/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,18],$V2=[1,19],$V3=[1,22],$V4=[1,37],$V5=[1,27],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,30],$Va=[1,33],$Vb=[1,31],$Vc=[1,32],$Vd=[1,42],$Ve=[1,25],$Vf=[1,26],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[5,12,21,22,25,27,33,36,38,39,40,55,59,61,62,63,64,68,73,82,106,122,123,124],$Vl=[1,52],$Vm=[1,55],$Vn=[1,57],$Vo=[1,56],$Vp=[1,58],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,74],$Vv=[1,78],$Vw=[1,83],$Vx=[1,82],$Vy=[1,99],$Vz=[1,81],$VA=[1,91],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,98],$VJ=[31,77],$VK=[1,112],$VL=[2,170],$VM=[30,31,33,38,50,77,81,92],$VN=[1,119],$VO=[2,152],$VP=[1,125],$VQ=[28,33,37,52,92,103,104,105,106,107,108,109,115],$VR=[5,12,21,22,25,27,33,36,38,39,40,55,59,61,62,63,64,68,69,73,82,106,122,123,124],$VS=[5,12,21,22,25,27,28,33,36,37,38,39,40,52,55,59,61,62,63,64,68,73,82,92,103,104,105,106,107,108,109,115,122,123,124],$VT=[1,136],$VU=[1,137],$VV=[1,143],$VW=[1,142],$VX=[1,138],$VY=[1,139],$VZ=[1,140],$V_=[1,141],$V$=[1,144],$V01=[1,145],$V11=[1,146],$V21=[1,147],$V31=[1,148],$V41=[1,149],$V51=[30,31,38,51,52,60,77,80,81,93,94,95,96,97,98,99,100,101,102,121],$V61=[1,162],$V71=[1,177],$V81=[1,181],$V91=[1,186],$Va1=[1,191],$Vb1=[30,31,38,50,51,52,60,71,77,80,81,93,94,95,96,97,98,99,100,101,102,121],$Vc1=[1,196],$Vd1=[30,77,93],$Ve1=[30,31,38,51,52,60,77,80,81,93,98,99,100,101,102,121],$Vf1=[30,31,38,60,77,93,101,102,121],$Vg1=[30,31,33,38,50,77,92],$Vh1=[1,242],$Vi1=[30,77],$Vj1=[1,246],$Vk1=[30,31,38,50,51,52,60,71,77,80,81,92,93,94,95,96,97,98,99,100,101,102,121],$Vl1=[30,31,38,51,52,60,77,80,81,93,94,95,96,98,99,100,101,102,121],$Vm1=[30,31,38,60,77,80,81,93,98,99,100,101,102,121],$Vn1=[1,292],$Vo1=[1,293],$Vp1=[38,77],$Vq1=[1,301],$Vr1=[38,59,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCION":8,"DECLARACION_TYPE":9,"ASIGNACION":10,"PUSH_ARREGLO":11,"IMPRIMIR":12,"CONDICION_IF":13,"SWITCH":14,"BREAK":15,"RETURN":16,"CONTINUE":17,"WHILE":18,"DO_WHILE":19,"FOR":20,"FOR1_OF":21,"FOR2_IN":22,"LLAMAR_FUNCION":23,"INCREMENTO_DECREMENTO":24,"PRINTLN":25,"PRINT":26,"println":27,"par_abierto":28,"EXP":29,"par_cerrado":30,"punto_coma":31,"PT_COMA":32,"id":33,"LISTA_EXPRESIONES":34,"LLAMAR_FUNCION_EXP":35,"while":36,"llave_abierta":37,"llave_cerrada":38,"do":39,"for":40,"ASIGNACION_FOR":41,"FOR_OF":42,"TIPO_DEC_VARIABLE":43,"of":44,"FOR_IN":45,"in":46,"TIPO_IGUAL":47,"LISTA_ACCESOS_TYPE":48,"ACCESO_ARREGLO":49,"igual":50,"mas":51,"menos":52,"mas_mas":53,"menos_menos":54,"switch":55,"LISTA_CASE":56,"CASE":57,"DEFAULT":58,"case":59,"dos_puntos":60,"default":61,"continue":62,"break":63,"return":64,"IF":65,"ELSE":66,"LISTA_ELSE_IF":67,"if":68,"else":69,"ELSE_IF":70,"punto":71,"push":72,"function":73,"TIPO_VARIABLE_NATIVA":74,"LISTA_CORCHETES":75,"LISTA_PARAMETROS":76,"coma":77,"PARAMETRO":78,"Array":79,"menor":80,"mayor":81,"type":82,"LISTA_ATRIBUTOS":83,"ATRIBUTO":84,"LISTA_DECLARACIONES":85,"DEC_ID":86,"DEC_ID_TIPO":87,"DEC_ID_TIPO_CORCHETES":88,"DEC_ID_EXP":89,"DEC_ID_TIPO_EXP":90,"DEC_ID_TIPO_CORCHETES_EXP":91,"corchete_abierto":92,"corchete_cerrado":93,"por":94,"div":95,"mod":96,"potencia":97,"mayor_igual":98,"menor_igual":99,"dif_que":100,"and":101,"or":102,"not":103,"entero":104,"decimal":105,"string":106,"true":107,"false":108,"null":109,"ARRAY_LENGTH":110,"ARRAY_POP":111,"ACCESO_TYPE":112,"TYPE":113,"TERNARIO":114,"LLAMADA_FUNCION_EXP":115,"ATRIBUTOS_TYPE":116,"ATRIBUTO_TYPE":117,"length":118,"LISTA_ACCESOS_ARREGLO":119,"pop":120,"interrogacion":121,"int":122,"double":123,"boolean":124,"number":125,"void":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"IMPRIMIR",21:"FOR1_OF",22:"FOR2_IN",25:"PRINTLN",27:"println",28:"par_abierto",30:"par_cerrado",31:"punto_coma",33:"id",36:"while",37:"llave_abierta",38:"llave_cerrada",39:"do",40:"for",44:"of",46:"in",50:"igual",51:"mas",52:"menos",53:"mas_mas",54:"menos_menos",55:"switch",59:"case",60:"dos_puntos",61:"default",62:"continue",63:"break",64:"return",68:"if",69:"else",71:"punto",72:"push",73:"function",77:"coma",79:"Array",80:"menor",81:"mayor",82:"type",92:"corchete_abierto",93:"corchete_cerrado",94:"por",95:"div",96:"mod",97:"potencia",98:"mayor_igual",99:"menor_igual",100:"dif_que",101:"and",102:"or",103:"not",104:"entero",105:"decimal",106:"string",107:"true",108:"false",109:"null",115:"LLAMADA_FUNCION_EXP",118:"length",120:"pop",121:"interrogacion",122:"int",123:"double",124:"boolean",125:"number",126:"void"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,5],[32,1],[23,4],[23,5],[35,3],[35,4],[18,7],[19,9],[20,10],[20,10],[42,10],[45,10],[10,4],[10,5],[10,4],[47,1],[47,2],[47,2],[41,3],[41,2],[41,2],[14,7],[56,2],[56,1],[56,1],[56,2],[57,4],[58,3],[17,2],[15,2],[16,3],[16,2],[13,1],[13,2],[13,2],[13,3],[65,7],[66,4],[70,8],[67,2],[67,1],[11,7],[11,8],[8,8],[8,9],[8,7],[8,9],[8,10],[8,8],[76,3],[76,1],[78,3],[78,4],[78,6],[9,7],[9,6],[83,3],[83,1],[84,3],[84,4],[7,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[91,6],[90,5],[89,3],[87,3],[86,1],[88,4],[75,3],[75,2],[24,3],[24,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[113,3],[116,3],[116,1],[117,3],[110,3],[110,4],[110,4],[111,5],[111,6],[111,6],[114,5],[49,2],[112,2],[48,3],[48,2],[48,4],[48,3],[119,4],[119,3],[34,3],[34,1],[43,1],[43,1],[43,1],[43,1],[74,1],[74,1],[74,1],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;   
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23:
   this.$ = $$[$0] 
break;
case 24:
 this.$ = new Print(1,1,$$[$0-2]);  
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 45:
   
break;
case 39: case 40: case 41: case 42: case 43: case 44: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 117: case 118: case 119: case 120: case 121: case 123: case 124: case 128: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164:
    
break;
case 46: case 47: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 166: case 167: case 168: case 169: case 170:
  
break;
case 48: case 165:
 
break;
case 108:
 this.$ = new Suma(0,$$[$0-2],$$[$0],yylineno,0);   
break;
case 116:
  this.$ = $$[$0-1]  
break;
case 122:
 this.$ = new And($$[$0-2],$$[$0],yylineno,0);   
break;
case 125:
 this.$ = new Primitivo(TIPO.ENTERO,$$[$0],yylineno,0); 
break;
case 126:
this.$ = new Primitivo(1,$$[$0],yylineno,0);
break;
case 127:
 this.$ = new Primitivo(TIPO.CADENA,$$[$0],yylineno,0);   
break;
case 129: case 130:
 this.$ = new Primitivo(2,$$[$0],yylineno,0);   
break;
case 131:
  this.$ = new Primitivo(TIPO.NULL,$$[$0],yylineno,0);  
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,3]),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),{33:$Vl,85:45,86:46,87:47,88:48,89:49,90:50,91:51},{33:[1,54],74:53,106:$Vm,124:$Vn,125:$Vo,126:$Vp},{33:[1,59]},{28:[1,63],47:60,48:61,50:$Vq,51:$Vr,52:$Vs,53:[1,64],54:[1,65],71:[1,62],92:$Vt,119:66},{47:71,50:$Vq,51:$Vr,52:$Vs},o($Vk,[2,56],{66:72,67:73,70:75,69:$Vu}),{28:[1,76]},{31:$Vv,32:77},{28:$Vw,29:79,31:[1,80],33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{31:$Vv,32:100},{28:[1,101]},{37:[1,102]},{28:[1,103]},{28:[1,104]},{33:[2,162]},{33:[2,163]},{33:[2,164]},{33:[2,165]},{28:[1,105]},{1:[2,1]},o($Vk,[2,2]),{31:[1,106],77:[1,107]},o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),o($VJ,[2,95]),o($VJ,[2,96]),o($VJ,[2,101],{50:[1,109],60:[1,108]}),{33:[1,110],75:111,92:$VK},o([33,92],$VL,{28:[1,113]}),o($VM,[2,166]),o($VM,[2,167]),o($VM,[2,168]),o($VM,[2,169]),{50:[1,114]},{28:$Vw,29:115,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{47:116,50:$Vq,51:$Vr,52:$Vs,71:[1,117]},{33:$VN,72:[1,118]},{28:$Vw,29:122,30:[1,120],33:$Vx,34:121,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{31:$Vv,32:123},{31:$Vv,32:124},o([50,51,52],$VO,{92:$VP}),o($VQ,[2,39]),{50:[1,126]},{50:[1,127]},{28:$Vw,29:128,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:129,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($Vk,[2,57]),o($Vk,[2,58],{66:130,70:131,69:$Vu}),{37:[1,132],68:[1,133]},o($VR,[2,64]),{28:$Vw,29:134,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($Vk,[2,53]),o($VS,[2,25]),{31:$Vv,32:135,51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vk,[2,55]),{28:$Vw,29:150,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($V51,[2,128],{119:153,48:155,53:[1,151],54:[1,152],71:[1,154],92:$Vt}),{28:$Vw,29:156,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:157,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($V51,[2,125]),o($V51,[2,126]),o($V51,[2,127]),o($V51,[2,129]),o($V51,[2,130]),o($V51,[2,131]),{28:$Vw,29:122,33:$Vx,34:158,37:$Vy,49:92,52:$Vz,92:$VA,93:[1,159],103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($V51,[2,134]),o($V51,[2,135]),o($V51,[2,136]),o($V51,[2,137]),o($V51,[2,138]),o($V51,[2,139]),o($V51,[2,140]),{33:$V61,116:160,117:161},o($Vk,[2,52]),{28:$Vw,29:163,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{7:165,10:166,33:[1,167],43:24,49:28,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:$Vw,29:168,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:169,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($VS,[2,84]),{33:$Vl,86:170,87:171,88:172,89:173,90:174,91:175},{33:$V71,74:176,106:$Vm,124:$Vn,125:$Vo,126:$Vp},{28:$Vw,29:178,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:[1,179]},{33:[1,180],92:$V81},{93:[1,182]},{30:[1,183],33:$V91,76:184,78:185},{37:[1,187]},{31:[1,188],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{28:$Vw,29:189,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{33:$Va1,72:[1,190]},{28:[1,192]},o($Vb1,[2,155],{119:193,92:$Vt}),{31:$Vv,32:194},{30:[1,195],77:$Vc1},o($Vd1,[2,161],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),o($Vk,[2,105]),o($Vk,[2,106]),{28:$Vw,29:197,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($VQ,[2,40]),o($VQ,[2,41]),{51:$VT,52:$VU,80:$VV,81:$VW,93:[1,198],94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{31:[1,199],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vk,[2,59]),o($VR,[2,63]),{4:200,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:[1,201]},{30:[1,202],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vk,[2,54]),{28:$Vw,29:203,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:204,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:205,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:206,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:207,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:208,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:209,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:210,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:211,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:212,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:213,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:214,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:215,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:216,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($Ve1,[2,107],{94:$VX,95:$VY,96:$VZ,97:$V_}),o($V51,[2,114]),o($V51,[2,115]),o($V51,$VO,{71:[1,217],92:$VP}),{33:$VN,118:[1,218],120:[1,219]},o($V51,[2,153],{71:[1,220]}),{30:[1,221],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vf1,[2,124],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11}),{77:$Vc1,93:[1,222]},o($V51,[2,133]),{38:[1,223]},{38:[2,143],77:[1,224]},{60:[1,225]},{30:[1,226],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,227],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:$Vw,29:228,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{28:$Vw,29:229,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{47:60,48:230,50:$Vq,51:$Vr,52:$Vs,71:[1,231],92:$Vt,119:66},{30:[1,232],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{30:[1,233],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),o($VJ,[2,88]),o($VJ,[2,89]),o($VJ,[2,90]),o($VJ,[2,100],{75:234,50:[1,235],92:$VK}),o([30,31,38,50,77,81,92],$VL),o($VJ,[2,99],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),{30:[1,236],33:$V91,76:237,78:185},{28:[1,238]},{93:[1,239]},o($Vg1,[2,104]),{37:[1,240]},{30:[1,241],77:$Vh1},o($Vi1,[2,74]),{60:[1,243]},{33:$Vj1,83:244,84:245},o($VS,[2,36]),{31:$Vv,32:247,51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{28:[1,248]},o($Vb1,[2,154],{119:249,92:$Vt}),{28:$Vw,29:250,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($Vb1,[2,157],{92:$VP}),o($Vk,[2,26]),{31:$Vv,32:251},{28:$Vw,29:252,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{51:$VT,52:$VU,80:$VV,81:$VW,93:[1,253],94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vk1,[2,159]),o($VS,[2,38]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,254],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:$Vw,29:255,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{37:[1,256]},o($Ve1,[2,108],{94:$VX,95:$VY,96:$VZ,97:$V_}),o($Ve1,[2,109],{94:$VX,95:$VY,96:$VZ,97:$V_}),o($Vl1,[2,110],{97:$V_}),o($Vl1,[2,111],{97:$V_}),o($Vl1,[2,112],{97:$V_}),o($Vl1,[2,113],{97:$V_}),o($Vm1,[2,117],{51:$VT,52:$VU,94:$VX,95:$VY,96:$VZ,97:$V_}),o($Vm1,[2,118],{51:$VT,52:$VU,94:$VX,95:$VY,96:$VZ,97:$V_}),o($Vm1,[2,119],{51:$VT,52:$VU,94:$VX,95:$VY,96:$VZ,97:$V_}),o($Vm1,[2,120],{51:$VT,52:$VU,94:$VX,95:$VY,96:$VZ,97:$V_}),o([30,31,38,60,77,93,100,101,102,121],[2,121],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01}),o($Vf1,[2,122],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11}),o([30,31,38,60,77,93,102,121],[2,123],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),{51:$VT,52:$VU,60:[1,257],80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{118:[1,258],120:[1,259]},o($V51,[2,145]),{28:[1,260]},{33:$Va1,118:[1,261],120:[1,262]},o($V51,[2,116]),o($V51,[2,132]),o($V51,[2,141]),{33:$V61,116:263,117:161},{28:$Vw,29:264,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{37:[1,265]},{36:[1,266]},{31:[1,267],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{31:[1,268],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{47:116,50:$Vq,51:$Vr,52:$Vs,71:[1,269]},{33:$VN},{31:[1,270]},{37:[1,271]},o($VJ,[2,102],{50:[1,272],92:$V81}),{28:$Vw,29:273,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{37:[1,274]},{30:[1,275],77:$Vh1},{30:[1,276],33:$V91,76:277,78:185},o($Vg1,[2,103]),{4:278,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{37:[1,279]},{33:$V91,78:280},{33:$V71,74:281,79:[1,282],106:$Vm,124:$Vn,125:$Vo,126:$Vp},{38:[1,283]},{38:[2,81],77:[1,284]},{60:[1,285]},o($VS,[2,37]),{28:$Vw,29:286,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($Vb1,[2,156],{92:$VP}),{30:[1,287],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},o($Vk,[2,27]),o($Vd1,[2,160],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),o($Vk1,[2,158]),o($Vk,[2,61]),{30:[1,288],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{56:289,57:290,58:291,59:$Vn1,61:$Vo1},{28:$Vw,29:294,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($V51,[2,146]),{28:[1,295]},{30:[1,296]},o($V51,[2,147]),{28:[1,297]},{38:[2,142]},o($Vp1,[2,144],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),{4:298,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:[1,299]},{33:$Vq1,41:300},{33:$Vq1,41:302},{33:$Va1},o($Vk,[2,24]),{4:303,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:$Vw,29:304,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},o($VJ,[2,98],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),{4:305,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{37:[1,306]},{37:[1,307]},{30:[1,308],77:$Vh1},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,309],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{4:310,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vi1,[2,73]),o($Vi1,[2,75],{75:311,92:$VK}),{80:[1,312]},o($Vk,[2,79],{31:[1,313]}),{33:$Vj1,83:314,84:245},{33:$V71,74:315,106:$Vm,124:$Vn,125:$Vo,126:$Vp},{30:[1,316],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{31:$Vv,32:317},{37:[1,318]},{38:[1,319],57:320,58:321,59:$Vn1,61:$Vo1},o($Vr1,[2,47]),o($Vr1,[2,48]),{28:$Vw,29:322,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{60:[1,323]},o([30,31,38,60,77,93,121],[2,151],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31}),{30:[1,324]},o($V51,[2,148]),{30:[1,325]},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,326],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{28:$Vw,29:327,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{30:[1,328]},{47:329,50:$Vq,51:$Vr,52:$Vs,53:[1,330],54:[1,331]},{30:[1,332]},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,333],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($VJ,[2,97],{51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41}),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,334],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{4:335,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{4:336,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{37:[1,337]},o($Vk,[2,69]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,338],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vi1,[2,76],{92:$V81}),{33:$V71,74:339,106:$Vm,124:$Vn,125:$Vo,126:$Vp},o($Vk,[2,78]),{38:[2,80]},o($Vp1,[2,82],{75:340,92:$VK}),{31:$Vv,32:341},o($Vk,[2,65]),{4:342,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,45]),o($Vr1,[2,46]),o($Vr1,[2,49]),{51:$VT,52:$VU,60:[1,343],80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{4:344,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($V51,[2,149]),o($V51,[2,150]),o($Vk,[2,30]),{30:[1,345],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{37:[1,346]},{28:$Vw,29:347,33:$Vx,37:$Vy,49:92,52:$Vz,92:$VA,103:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH,110:93,111:94,112:95,113:96,114:97,115:$VI},{30:[2,43]},{30:[2,44]},{37:[1,348]},o($VR,[2,60]),o($Vk,[2,67]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,349],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,350],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{4:351,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,72]),{81:[1,352]},o($Vp1,[2,83],{92:$V81}),o($Vk,[2,66]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,353],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{4:354,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vr1,[2,51],{7:4,8:5,9:6,10:7,11:8,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,23:20,24:21,26:23,43:24,49:28,65:29,6:44,12:$V0,21:$V1,22:$V2,25:$V3,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,55:$V9,62:$Va,63:$Vb,64:$Vc,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj}),{31:$Vv,32:355},{4:356,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{30:[2,42],51:$VT,52:$VU,80:$VV,81:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,102:$V31,121:$V41},{4:357,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,70]),o($Vk,[2,68]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,358],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vi1,[2,77]),o($VR,[2,62]),o($Vr1,[2,50],{7:4,8:5,9:6,10:7,11:8,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,23:20,24:21,26:23,43:24,49:28,65:29,6:44,12:$V0,21:$V1,22:$V2,25:$V3,27:$V4,33:$V5,36:$V6,39:$V7,40:$V8,55:$V9,62:$Va,63:$Vb,64:$Vc,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj}),o($Vk,[2,31]),{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,359],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},{6:44,7:4,8:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:$V1,22:$V2,23:20,24:21,25:$V3,26:23,27:$V4,33:$V5,36:$V6,38:[1,360],39:$V7,40:$V8,43:24,49:28,55:$V9,62:$Va,63:$Vb,64:$Vc,65:29,68:$Vd,73:$Ve,82:$Vf,106:$Vg,122:$Vh,123:$Vi,124:$Vj},o($Vk,[2,71]),o($Vk,[2,32]),o($Vk,[2,33])],
defaultActions: {38:[2,162],39:[2,163],40:[2,164],41:[2,165],43:[2,1],263:[2,142],314:[2,80],330:[2,43],331:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //const  Nodo = require('../ts/arbol/ast');
    const { Primitivo } = require('../expresiones/primitivo');
    const { Print } = require('../instruccion/print');
    const { Instruccion } = require('../instruccion/print');
            
    const { ARITMETICO } = require('../table/tipo')
    const { TIPO } = require('../table/tipo');
    const { RELACIONAL } = require('../table/tipo');
    const { LOGICO} = require('../table/tipo');
    
    const { IgualIgual } = require('../expresiones/relacional/igual_igual');
    const { And } = require('../expresiones/logico/and');
    const { Suma} = require('../expresiones/artimetica/suma');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:// comentario simple
break;
case 2:// comentario multiple líneas
break;
case 3:return 106;
break;
case 4:return 122;
break;
case 5:return 123;
break;
case 6:return 124;
break;
case 7:return 126;
break;
case 8:return 'Struct';
break;
case 9:return 'const';
break;
case 10:return 'print';
break;
case 11:return 27;
break;
case 12:return 72;
break;
case 13:return 118;
break;
case 14:return 120;
break;
case 15:return 73;
break;
case 16:return 64;
break;
case 17:return 109;
break;
case 18:return 68;
break;
case 19:return 69;
break;
case 20:return 63;
break;
case 21:return 55;
break;
case 22:return 59;
break;
case 23:return 61;
break;
case 24:return 62;
break;
case 25:return 36;
break;
case 26:return 39;
break;
case 27:return 40;
break;
case 28:return 46;
break;
case 29:return 107;
break;
case 30:return 108;
break;
case 31:return 105;
break;
case 32:return 104;
break;
case 33:return 33;
break;
case 34:return  'punto_coma';
break;
case 35:return 77;
break;
case 36:return 60;
break;
case 37:return 71;
break;
case 38:return 37;
break;
case 39:return 38;
break;
case 40:return 28;
break;
case 41:return 30;
break;
case 42:return 92;
break;
case 43:return 93;
break;
case 44:return 53;
break;
case 45:return 51;
break;
case 46:return 54
break;
case 47:return 52;
break;
case 48:return 97;
break;
case 49:return 94;
break;
case 50:return 95;
break;
case 51:return 96;
break;
case 52:return 99;
break;
case 53:return 98;
break;
case 54:return 81;
break;
case 55:return 80;
break;
case 56:return 'igual_que';
break;
case 57:return 50;
break;
case 58:return 100;
break;
case 59:return 101;
break;
case 60:return 'concatenacion';
break;
case 61:return 102;
break;
case 62:return 103;
break;
case 63:return 121;
break;
case 64: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 106; 
break;
case 65: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 106; 
break;
case 66:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
case 67:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:Struct\b)/,/^(?:const\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}