/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var variable = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[5,7,11,12,13],$V5=[1,13],$V6=[1,12],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,36],$Vs=[1,38],$Vt=[1,46],$Vu=[1,44],$Vv=[1,45],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,55],$VF=[1,56],$VG=[1,57],$VH=[1,58],$VI=[1,59],$VJ=[10,14,15,16,17,18,19,23,29,32,42,43,44,45,46,47,48,49,61,65,76,82],$VK=[10,14,15,16,23,29,42,43,44,45,46,47,48,49,61,65,76,82],$VL=[10,23,29,48,49,61,65,76,82],$VM=[29,61],$VN=[10,23,29,42,43,44,45,46,47,48,49,61,65,76,82],$VO=[10,23,29,46,47,48,49,61,65,76,82],$VP=[1,216],$VQ=[1,237],$VR=[10,14,15,16,17,18,19,23,29,32,34,42,43,44,45,46,47,48,49,61,65,76,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"dolar":7,"llave_abierta":8,"EXP":9,"llave_cerrada":10,"id":11,"esp":12,"id2":13,"menos":14,"mas":15,"mass":16,"por":17,"div":18,"mod":19,"mas_mas":20,"menos_menos":21,"par_abierto":22,"par_cerrado":23,"sin":24,"cos":25,"tan":26,"sqrt":27,"pow":28,"coma":29,"log10":30,"NATIVA_STRING":31,"repeticion":32,"int":33,"punto":34,"parse":35,"double":36,"boolean":37,"toInt":38,"toDouble":39,"typeof":40,"string":41,"mayor":42,"menor":43,"mayor_igual":44,"menor_igual":45,"igual_que":46,"dif_que":47,"and":48,"or":49,"not":50,"entero":51,"decimal":52,"true":53,"false":54,"null":55,"ACCESO_ARREGLO":56,"ARRAY_LENGTH":57,"ARRAY_POP":58,"corchete_abierto":59,"LISTA_EXPRESIONES":60,"corchete_cerrado":61,"ARRAY_METHOD":62,"ACCESO_TYPE":63,"igual":64,"punto_coma":65,"TERNARIO":66,"LLAMADA_FUNCION_EXP":67,"toLowercase":68,"NATIVA_STRING2":69,"toUppercase":70,"length":71,"subString":72,"caracterOfPosition":73,"EXPS_CORCHETE":74,"begin":75,"dos_puntos":76,"end":77,"pop":78,"push":79,"nmral":80,"LISTA_ACCESOS_TYPE":81,"interrogacion":82,"PARAMETROS_LLAMADA":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"dolar",8:"llave_abierta",10:"llave_cerrada",11:"id",12:"esp",13:"id2",14:"menos",15:"mas",16:"mass",17:"por",18:"div",19:"mod",20:"mas_mas",21:"menos_menos",22:"par_abierto",23:"par_cerrado",24:"sin",25:"cos",26:"tan",27:"sqrt",28:"pow",29:"coma",30:"log10",32:"repeticion",33:"int",34:"punto",35:"parse",36:"double",37:"boolean",38:"toInt",39:"toDouble",40:"typeof",41:"string",42:"mayor",43:"menor",44:"mayor_igual",45:"menor_igual",46:"igual_que",47:"dif_que",48:"and",49:"or",50:"not",51:"entero",52:"decimal",53:"true",54:"false",55:"null",57:"ARRAY_LENGTH",59:"corchete_abierto",61:"corchete_cerrado",64:"igual",65:"punto_coma",68:"toLowercase",70:"toUppercase",71:"length",72:"subString",73:"caracterOfPosition",74:"EXPS_CORCHETE",75:"begin",76:"dos_puntos",77:"end",78:"pop",79:"push",80:"nmral",81:"LISTA_ACCESOS_TYPE",82:"interrogacion",83:"PARAMETROS_LLAMADA"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,1],[6,1],[6,1],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,4],[9,4],[9,4],[9,4],[9,6],[9,4],[9,1],[9,3],[9,6],[9,6],[9,6],[9,4],[9,4],[9,4],[9,4],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,1],[9,2],[9,1],[9,4],[9,1],[9,1],[31,6],[31,6],[31,6],[31,6],[31,6],[31,6],[31,9],[31,9],[31,7],[31,7],[31,5],[31,5],[31,5],[31,5],[31,5],[31,5],[31,8],[31,8],[31,6],[31,6],[69,5],[69,5],[69,5],[69,8],[69,6],[69,4],[69,4],[69,4],[69,7],[69,5],[56,2],[56,6],[56,6],[56,6],[56,6],[58,5],[58,6],[58,6],[58,7],[60,3],[60,1],[62,4],[62,4],[62,4],[62,4],[62,5],[62,5],[62,5],[63,2],[66,5],[67,3],[67,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;   
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
  this.$ = [$$[$0]];   
break;
case 4:
 this.$=$$[$0-1]; 
break;
case 5: case 6:
 this.$ = new Primitivo(TIPO.CADENA,$$[$0],_$[$0].firt_line,_$[$0].firt_column); 
break;
case 7:
 this.$ = new Identificador($$[$0].slice(1),_$[$0].firt_line,_$[$0].firt_column);   
break;
case 8:
  this.$ = new NegacionNum(6,$$[$0],0,_$[$0-1].firt_line,_$[$0-1].firt_column);   
break;
case 9:
 this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 10:
  this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 11:
  this.$ = new Resta(1,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 12:
  this.$ = new Multiplicar(2,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 13:
  this.$ = new Division(3,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);     
break;
case 14:
  this.$ = new Modulo(5,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 15:
  this.$=new IncrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 16:
  this.$=new DecrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 17:
  this.$ = $$[$0-1]  
break;
case 18:
  this.$ = new Seno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 19:
  this.$ = new Coseno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 20:
  this.$ = new Tangente($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 21:
 this.$ = new Sqrt($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 22:
 this.$ = new Pow($$[$0-3],$$[$0-1],_$[$0-5].firt_line,_$[$0-5].firt_column);  
break;
case 23:
  this.$ = new Log($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 24:
this.$=$$[$0];
break;
case 25:
  this.$= new RepeticionCadena($$[$0-2],TIPO_NATIVA_CADENA.REPETICION,$$[$0],null,_$[$0-2].firt_line,_$[$0-2].firt_column); 
break;
case 26:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.INTPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 27:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.DOUBLEPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 28:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.BOOLEANPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 29:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOINT,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 30:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TODOUBLE,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 31:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TYPEOF,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 32:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOSTRING,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 33:
 this.$ = new Mayor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 34:
 this.$ = new Menor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 35:
 this.$ = new MayorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 36:
 this.$ = new MenorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 37:
 this.$ = new IgualIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 38:
 this.$ = new Diff($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 39:
  this.$ = new And($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);   
break;
case 40:
 this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 41:
  this.$ = new Not($$[$0],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 42:
 this.$ = new Primitivo(0,$$[$0],_$[$0].firt_line,_$[$0].firt_column); 
break;
case 43:
 this.$ = new Primitivo(TIPO.DECIMAL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);
break;
case 44:
 this.$ = new Primitivo(TIPO.CADENA,$$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 45:
 this.$ = new Identificador($$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 46:
 this.$ = new Primitivo(TIPO.BOOLEAN,true,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 47:
 this.$ = new Primitivo(TIPO.BOOLEAN,false,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 48:
 this.$ = new Primitivo(TIPO.NULL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);  
break;
case 49: case 50: case 51: case 53:
 this.$ = $$[$0]; 
break;
case 52:
 this.$ = $$[$0-1]; 
break;
case 54:
    
break;
case 55:
 this.$ = $$[$0];   
break;
case 56:
  this.$ = new Asignacion_Struct_Exp($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 57:
  this.$ = $$[$0];  
break;
case 58:
  this.$ = $$[$0]  
break;
case 59:
  this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 60:
  this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 61:
 this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 62:
 this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 63:
 this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 64:
 this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 65:
 this.$= new NativasString(new Identificador($$[$0-8],_$[$0-8].firt_line,_$[$0-8].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 66:
 this.$= new NativasString($$[$0-8],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 67:
 this.$= new NativasString(new Identificador($$[$0-6],_$[$0-6].firt_line,_$[$0-6].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 68:
 this.$= new NativasString($$[$0-6],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 69:
 this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 70:
 this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 71:
  this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 72:
 ; this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 73:
  this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 74:
  this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 75:
  this.$= new NativasString(new Identificador($$[$0-7],_$[$0-7].firt_line,_$[$0-7].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 76:
  this.$= new NativasString($$[$0-7],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 77:
  this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 78:
  this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 79:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 80:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 81:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 82:
 $$[$0-7].push(new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column)); this.$=$$[$0-7]; 
break;
case 83:
 $$[$0-5].push(new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column)); this.$=$$[$0-5]; 
break;
case 84:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 85:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 86:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column) ]; 
break;
case 87:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-6].firt_line,_$[$0-6].firt_column)]; 
break;
case 88:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-4].firt_line,_$[$0-4].firt_column)]; 
break;
case 89:
  this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 90:
  this.$ = new Fin_Rango($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 91:
  this.$ = new Begin_Rango($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 92:
  this.$ = new Rango($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 93:
  this.$ = new Rango_Complete($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 94:
 this.$ = new Pop($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);   
break;
case 95:
 this.$ = new Push($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);   
break;
case 96:
 this.$ = new Pop_List($$[$0-5],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);  
break;
case 97:
 this.$ = new Push_List($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 98:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 99:
 this.$ = [$$[$0]]; 
break;
case 100:
this.$ = new Multiplicacion_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 101:
this.$ = new Division_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 102:
this.$ = new Resta_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 103:
this.$ = new Suma_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 104:
this.$ = new Seno_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 105:
this.$ = new Cos_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 106:
this.$ = new Tan_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 107:
 this.$ = new Acceso_Struct($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);   
break;
case 108:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].firt_line,_$[$0-4].firt_column);  
break;
case 109:
 this.$ = new Llamada($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 110:
 this.$ = new Llamada($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,11:$V1,12:$V2,13:$V3},{1:[3]},{5:[1,8],6:9,7:$V0,11:$V1,12:$V2,13:$V3},o($V4,[2,3]),{8:[1,10]},o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{1:[2,1]},o($V4,[2,2]),{9:11,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{10:[1,43],14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:60,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,45],{20:[1,61],21:[1,62],22:[1,68],34:[1,63],59:[1,65],74:[1,64],80:[1,66],81:[1,67]}),{9:69,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,70],80:[1,71]},{22:[1,72],80:[1,73]},{22:[1,74],80:[1,75]},{22:[1,76]},{22:[1,77]},{22:[1,78]},o($VJ,[2,24]),{34:[1,79]},{34:[1,80]},{34:[1,81]},{22:[1,82]},{22:[1,83]},{22:[1,84]},o($VJ,[2,44],{22:[1,85],34:[1,86]}),{9:87,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,46]),o($VJ,[2,47]),o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),{9:90,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,60:88,61:[1,89],62:39,63:40,66:41,67:42},o($VJ,[2,53]),o($VJ,[2,55],{64:[1,91]}),o($VJ,[2,57]),o($VJ,[2,58]),o($V4,[2,4]),{9:92,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:93,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:94,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:95,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:96,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:97,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:98,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:99,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:100,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:101,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:102,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:103,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:104,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:105,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:106,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:107,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VK,[2,8],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,15]),o($VJ,[2,16]),{68:[1,108],70:[1,109],71:[1,110],72:[1,111],73:[1,112],78:[1,113],79:[1,114]},o($VJ,[2,89],{34:[1,115]}),{9:117,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,75:[1,116]},{14:[1,120],15:[1,121],17:[1,118],18:[1,119]},o([10,14,15,16,17,18,19,23,29,32,42,43,44,45,46,47,48,49,61,64,65,76,82],[2,107]),{23:[1,122],83:[1,123]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,124],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:125,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,126]},{9:127,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,128]},{9:129,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,130]},{9:131,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:132,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:133,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{35:[1,134]},{35:[1,135]},{35:[1,136]},{9:137,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:138,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:139,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:140,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{68:[1,141],70:[1,142],71:[1,143],72:[1,144],73:[1,145]},o($VL,[2,41],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),{29:[1,147],61:[1,146]},o($VJ,[2,54]),o($VM,[2,99],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI}),{9:148,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VK,[2,9],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,10],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,11],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,12]),o($VJ,[2,13]),o($VJ,[2,14]),o($VJ,[2,25]),o($VN,[2,33],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,34],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,35],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,36],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VO,[2,37],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VO,[2,38],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VL,[2,39],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o([10,23,29,49,61,65,76,82],[2,40],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,76:[1,149],82:$VI},{22:[1,150]},{22:[1,151]},{22:[1,152]},{22:[1,153]},{22:[1,154]},{22:[1,155]},{22:[1,156]},{78:[1,157],79:[1,158]},{76:[1,159]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,76:[1,160],82:$VI},{9:161,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:162,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:163,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:164,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,109]),{23:[1,165]},o($VJ,[2,17]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,166],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,167]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,168],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,169]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,170],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,171]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,172],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,173],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,174],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{22:[1,175]},{22:[1,176]},{22:[1,177]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,178],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,179],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,180],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,181],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{22:[1,182]},{22:[1,183]},{22:[1,184]},{22:[1,185]},{22:[1,186]},o($VJ,[2,52]),{9:187,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,65:[1,188],82:$VI},{9:189,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{23:[1,190]},{23:[1,191]},{23:[1,192]},{9:193,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:194,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{23:[1,195]},{9:196,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,197]},{22:[1,198]},{9:199,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,77:[1,200]},{9:202,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,77:[1,201]},o($VJ,[2,100]),o($VJ,[2,101]),o($VK,[2,102],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,103],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,110]),o($VJ,[2,18]),{23:[1,203]},o($VJ,[2,19]),{23:[1,204]},o($VJ,[2,20]),{23:[1,205]},o($VJ,[2,21]),{9:206,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,23]),{9:207,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:208,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:209,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,29]),o($VJ,[2,30]),o($VJ,[2,31]),o($VJ,[2,32]),{23:[1,210]},{23:[1,211]},{23:[1,212]},{9:213,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:214,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VM,[2,98],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI}),o($VJ,[2,56]),o([10,23,29,61,65,76,82],[2,108],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH}),o($VJ,[2,69],{69:215,34:$VP}),o($VJ,[2,71],{69:217,34:$VP}),o($VJ,[2,73],{69:218,34:$VP}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,219],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,220],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,94]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,221],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{23:[1,222]},{9:223,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,61:[1,224],82:$VI},{61:[1,225]},{61:[1,226]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,61:[1,227],82:$VI},o($VJ,[2,104]),o($VJ,[2,105]),o($VJ,[2,106]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,228],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,229],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,230],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,231],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,70],{69:232,34:$VP}),o($VJ,[2,72],{69:233,34:$VP}),o($VJ,[2,74],{69:234,34:$VP}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,235],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,236],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,59],{34:$VQ}),{68:[1,238],70:[1,239],71:[1,240],72:[1,241],73:[1,242]},o($VJ,[2,61],{34:$VQ}),o($VJ,[2,63],{34:$VQ}),{9:243,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,77],{69:244,34:$VP}),o($VJ,[2,95]),o($VJ,[2,96]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,245],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,90]),o($VJ,[2,93]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,22]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,60],{34:$VQ}),o($VJ,[2,62],{34:$VQ}),o($VJ,[2,64],{34:$VQ}),{9:246,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,78],{69:247,34:$VP}),{68:[1,248],70:[1,249],71:[1,250],72:[1,251],73:[1,252]},{22:[1,253]},{22:[1,254]},{22:[1,255]},{22:[1,256]},{22:[1,257]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,258],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,67],{34:$VQ}),o($VJ,[2,97]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,259],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,68],{34:$VQ}),{22:[1,260]},{22:[1,261]},{22:[1,262]},{22:[1,263]},{22:[1,264]},{23:[1,265]},{23:[1,266]},{23:[1,267]},{9:268,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:269,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,75],{69:270,34:$VP}),o($VJ,[2,76],{69:271,34:$VP}),{23:[1,272]},{23:[1,273]},{23:[1,274]},{9:275,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:276,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,277],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,278],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,65],{34:$VQ}),o($VJ,[2,66],{34:$VQ}),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,279],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,280],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:281,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,88]),{9:282,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,83]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,283],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,284],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VR,[2,87]),o($VR,[2,82])],
defaultActions: {8:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
  
  const { Simbolo   } = require('../table/simbolo');
  //Instrucciones
    const { Print   } = require('../instruccion/print');
    const { D_IdExp } = require('../instruccion/declaracion_idexp');
    const { D_Id    } = require('../instruccion/declaracion_id');
    const { Funcion } = require('../instruccion/funcion');
    const { Llamada } = require ('../instruccion/llamada');
    const { Return }  = require ('../instruccion/Return');
    const { Main }    = require ('../instruccion/main');
    const { Asignacion } = require('../instruccion/asignacion');
    const { Asignacion_VAR_STRUCT } = require('../expresiones/struct/asignacion_var_struct');
    const { Asignacion_Struct_Exp } = require('../expresiones/struct/asignacion_struct_exp');
    const { Asignacion_Mas } = require('../instruccion/asignacion_mas');
    const { List_Declaracion } = require('../instruccion/list_declaracion');
    //List_Declaracion
    const { Modificar }  = require('../expresiones/array/modificar_array');
    const { Acceso }     = require('../expresiones/array/acceso');
    const { Pop } = require('../expresiones/array/pop');
    const { Pop_List } = require('../expresiones/array/pop_list');
    const { Push_List } = require('../expresiones/array/push_list');
    const { Push } = require('../expresiones/array/push');
    const { Rango } = require('../expresiones/array/rango');
    const { Begin_Rango } = require('../expresiones/array/begin_rango');
    const { Fin_Rango } = require('../expresiones/array/fin_rango');
    const { Rango_Complete } = require('../expresiones/array/rango_complete');
    const { Seno_Arr } = require('../expresiones/array/operaciones/seno');
    const { Cos_Arr } = require('../expresiones/array/operaciones/cos');
    const { Tan_Arr } = require('../expresiones/array/operaciones/tan');
    
    const { Multiplicacion_Arr } = require('../expresiones/array/operaciones/multiplicacion');
    const { Division_Arr } = require('../expresiones/array/operaciones/division');
    const { Suma_Arr } = require('../expresiones/array/operaciones/suma');
    const { Resta_Arr } = require('../expresiones/array/operaciones/resta');
    //Tipos
    const { Primitivo } = require('../expresiones/primitivo');
    
    //Enumerados        
    const { ARITMETICO } = require('../table/tipo');
    const { RELACIONAL } = require('../table/tipo');
    const { LOGICO} = require('../table/tipo');
    const { TIPO } = require('../table/tipo');
    
    
    //relacionales
    const { Diff } = require('../expresiones/relacional/dif');
    const { IgualIgual } = require('../expresiones/relacional/igual_igual');
    const { MayorIgual } = require('../expresiones/relacional/mayor_igual');
    const { Mayor } = require('../expresiones/relacional/mayor');
    const { MenorIgual } = require('../expresiones/relacional/menor_igual');
    const { Menor } = require('../expresiones/relacional/menor');
    const {Identificador} = require('../expresiones/identificador');
    const { Ternario } = require('../expresiones/ternario/ternario');
    //logicos
    const { And } = require('../expresiones/logico/and');
    const { Or } = require('../expresiones/logico/or');
    const { Not } = require('../expresiones/logico/not');
    
    //Operaciones Aritmeticas
    const { Suma} = require('../expresiones/artimetica/suma');
    const { Resta} = require('../expresiones/artimetica/resta');
    const { Multiplicar} = require('../expresiones/artimetica/multiplicar');
    const { Division } = require('../expresiones/artimetica/division');
    const { Modulo} = require('../expresiones/artimetica/modulo');
    const { NegacionNum} = require('../expresiones/artimetica/negacion_numero');    
    const { Potencia } = require('../expresiones/artimetica/potencia');    
    
    const { Arreglo } = require('../expresiones/array/declarar_array')
    //Arreglo_Valor
    const { Arreglo_Valor } = require('../expresiones/array/array_valor')
    const { DecrementoVariable} = require('../expresiones/artimetica/decremento_variable');
    const { IncrementoVariable} = require('../expresiones/artimetica/Incremento_variable');

    //nativas
    const { Seno} = require('../expresiones/nativas/seno');
    const { Coseno} = require('../expresiones/nativas/coseno');
    const { Tangente} = require('../expresiones/nativas/tangente');
    const { Sqrt} = require('../expresiones/nativas/sqrt');
    const { Pow} = require('../expresiones/nativas/pow');
    const { Log} = require('../expresiones/nativas/log');
    const { NativasString} = require('../expresiones/nativas/nativas_string');
    const { RepeticionCadena} = require('../expresiones/nativas/repeticion_cadena');
    const { TIPO_NATIVA_CADENA} = require('../expresiones/nativas/tiponativacadena');
    const { Casteos} = require('../expresiones/nativas/casteos');
    const { CasteosTo} = require('../expresiones/nativas/casteos_to');


    const { Struct }          = require('../expresiones/struct/struct')
    const { Dec_Struct }      = require('../expresiones/struct/instancia_struct')
    const { Atributo }        = require('../expresiones/struct/atributo')
    const { Acceso_Struct }   = require('../expresiones/struct/acceso_struct')
    //JAMES
    const { If } = require('../instruccion/if');
    const { Switch } = require('../instruccion/switch');
    const { Case } = require('../instruccion/case');
    const { Default } = require('../instruccion/default');
    const { Break } = require('../instruccion/break');
    const { For } = require('../instruccion/for');
    const { ForEach } = require('../instruccion/for_each');
    const { While } = require('../instruccion/while');
    const { DoWhile } = require('../instruccion/do_while');
    const { Continue } = require('../instruccion/continue');
    const { Excepcion } = require('../table/excepcion');
    const { Reporte } = require('./reporte');
    

    const reporte=new Reporte();

    var reporteGramatical =reporte.reporteGramatical;
    var reporte_error =[];


    // function reportarError(tipo,descripccion,linea,columna){
    //     errores.push({tipo:tipo,descripccion:descripccion,linea:linea,columna:columna});
    // }
    function addReporte(produccion,regla){
        reporte.reporteGramatical.push({produccion:produccion,regla:regla});
    }

    //METODOS GET PARA REPORTE DE ERRORES Y GRAMATICAL
    function getReporteError(){
      return reporte_error;
    }
    function getReporteGramatical(){
      return reporteGramatical;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1:// comentario multiple líneas
break;
case 2:this.begin("state1"); return 8; 
break;
case 3:return 41;
break;
case 4:return 33;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 'void';
break;
case 8:return 'struct';
break;
case 9:return 'const';
break;
case 10:return 'print';
break;
case 11:return 'println';
break;
case 12:return 79;
break;
case 13:return 71;
break;
case 14:return 78;
break;
case 15:return 'return';
break;
case 16:return 55;
break;
case 17:return 'if';
break;
case 18:return 'else';
break;
case 19:return 'break';
break;
case 20:return 'switch';
break;
case 21:return 'case';
break;
case 22:return 'default';
break;
case 23:return 'continue';
break;
case 24:return 'while';
break;
case 25:return 'do';
break;
case 26:return 'for';
break;
case 27:return 'in';
break;
case 28:return 24;
break;
case 29:return 30;
break;
case 30:return 25;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 28;
break;
case 34:return 32;
break;
case 35:return 68;
break;
case 36:return 70;
break;
case 37:return 72;
break;
case 38:return 73;
break;
case 39:return 35;
break;
case 40:return 38;
break;
case 41:return 39;
break;
case 42:return 40;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 78;
break;
case 46:return 79;
break;
case 47:return 'main';
break;
case 48:return 75;
break;
case 49:return 77;
break;
case 50:return 52;
break;
case 51:return  'punto_coma';
break;
case 52:return 29;
break;
case 53:return 76;
break;
case 54:return 34;
break;
case 55:  
break;
case 56:return 15;
break;
case 57:return 51;
break;
case 58:return 11;
break;
case 59:return 22;
break;
case 60:return 23;
break;
case 61:return 59;
break;
case 62:return 61;
break;
case 63:return 20;
break;
case 64:return 21
break;
case 65:return 14;
break;
case 66:return 'potencia';
break;
case 67:return 17;
break;
case 68:return 18;
break;
case 69:return 19;
break;
case 70:return 45;
break;
case 71:return 44;
break;
case 72:return 42;
break;
case 73:return 43;
break;
case 74:return 46;
break;
case 75:return 64;
break;
case 76:return 47;
break;
case 77:return 48;
break;
case 78:return 16;
break;
case 79:return 49;
break;
case 80:return 50;
break;
case 81:return 82;
break;
case 82:return 80;
break;
case 83: yy_.yytext = yy_.yytext.slice(1,-1); return 41; 
break;
case 84: yy_.yytext = yy_.yytext.slice(1,-1); return 41; 
break;
case 85:this.popState(); return 10;
break;
case 86:return 13;
break;
case 87:return 7;
break;
case 88:return 11;
break;
case 89:return 12;						                // espacios en blanco
break;
case 90:

  
break;
case 91:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[{])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:struct\b)/,/^(?:const\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:sin\b)/,/^(?:log10\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:pow\b)/,/^(?:\^)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:main\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\s+)/,/^(?:\+)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:#)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[}])/,/^(?:([$][a-zA-ZÀ-ÿ_$])[À-ÿ$a-zA-Z0-9_]*)/,/^(?:\$)/,/^(?:([a-zA-ZÀ-ÿ_$])[À-ÿ$a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/],
conditions: {"state1":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"INITIAL":{"rules":[0,1,2,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = variable;
exports.Parser = variable.Parser;
exports.parse = function () { return variable.parse.apply(variable, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}