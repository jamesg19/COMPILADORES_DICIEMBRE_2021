(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instruccion = void 0;
class Instruccion {
    constructor(fila, columna) {
        this.columna = columna;
        this.fila = fila;
        this.struct = false;
        this.arra = false;
        this.temp = 0;
    }
}
exports.Instruccion = Instruccion;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodoAST = void 0;
class NodoAST {
    constructor(valor) {
        this.hijos = [];
        this.valor = valor;
    }
    agregarHijo(valorHijo) {
        this.hijos.push(new NodoAST(valorHijo));
    }
    agregarHijoNodo(hijo) {
        this.hijos.push(hijo);
    }
    getValor() {
        return this.valor;
    }
    getHijos() {
        return this.hijos;
    }
}
exports.NodoAST = NodoAST;

},{}],3:[function(require,module,exports){
(function (process){(function (){
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,11],$V2=[1,20],$V3=[1,24],$V4=[1,30],$V5=[1,43],$V6=[1,44],$V7=[1,32],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,36],$Vc=[1,39],$Vd=[1,37],$Ve=[1,38],$Vf=[1,35],$Vg=[1,33],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,46],$Vl=[1,45],$Vm=[2,5,14,23,28,33,38,39,41,44,45,47,48,60,64,66,67,68,69,70,81,99,101,102,106,140],$Vn=[2,5,14,23,26,28,33,38,39,41,44,45,47,48,60,64,66,67,68,69,70,78,81,99,101,102,106,140],$Vo=[1,58],$Vp=[1,67],$Vq=[1,59],$Vr=[1,60],$Vs=[1,69],$Vt=[1,61],$Vu=[1,62],$Vv=[1,65],$Vw=[1,66],$Vx=[1,63],$Vy=[1,75],$Vz=[1,80],$VA=[1,79],$VB=[1,104],$VC=[1,78],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,102],$VX=[44,53],$VY=[1,120],$VZ=[1,134],$V_=[1,133],$V$=[1,132],$V01=[1,138],$V11=[1,136],$V21=[1,152],$V31=[1,154],$V41=[1,153],$V51=[1,155],$V61=[1,156],$V71=[1,157],$V81=[1,158],$V91=[1,159],$Va1=[1,160],$Vb1=[1,161],$Vc1=[1,162],$Vd1=[1,163],$Ve1=[1,164],$Vf1=[1,165],$Vg1=[1,166],$Vh1=[1,167],$Vi1=[26,36,37,54,55,56,65,78,87,88,89,90,98,107,108,109,110,111,112,113,114,133],$Vj1=[1,173],$Vk1=[1,210],$Vl1=[38,44,53,78],$Vm1=[26,36,37,52,54,55,56,65,73,78,87,88,89,90,98,107,108,109,110,111,112,113,114,133],$Vn1=[36,78],$Vo1=[1,235],$Vp1=[1,239],$Vq1=[26,36,37,54,55,56,65,78,87,107,108,109,110,111,112,113,114,133],$Vr1=[2,201],$Vs1=[26,36,37,54,65,78,113,114,133],$Vt1=[1,293],$Vu1=[36,54,78],$Vv1=[1,306],$Vw1=[26,78],$Vx1=[26,36,37,52,53,54,55,56,65,73,78,87,88,89,90,98,107,108,109,110,111,112,113,114,133],$Vy1=[38,78],$Vz1=[26,36,37,54,65,78,107,108,109,110,111,112,113,114,133],$VA1=[1,406],$VB1=[1,405],$VC1=[38,64,66],$VD1=[1,452],$VE1=[1,484],$VF1=[26,36,37,54,55,56,65,73,78,87,88,89,90,98,107,108,109,110,111,112,113,114,133];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"MAIN":7,"DEC_ARRAY":8,"DECLARACION_VARIABLE":9,"DECLARACION_FUNCION":10,"DECLARACION_TYPE":11,"INSTANCIA_STRUCT":12,"ASIGNACION":13,"IMPRIMIR":14,"CONDICION_IF":15,"SWITCH":16,"BREAK":17,"RETURN":18,"CONTINUE":19,"WHILE":20,"DO_WHILE":21,"FOR":22,"FOR1_OF":23,"FOR_IN":24,"ARRAY_POP":25,"punto_coma":26,"INCREMENTO_DECREMENTO":27,"PRINTLN":28,"PRINT":29,"LLAMADA_FUNCION_EXP":30,"MODIFICAR_ARREGLO":31,"GRAFICAR_TABLA":32,"void":33,"main":34,"par_abierto":35,"par_cerrado":36,"llave_abierta":37,"llave_cerrada":38,"println":39,"LISTA_EXPRESIONES":40,"print":41,"PT_COMA":42,"LLAMAR_FUNCION":43,"id":44,"while":45,"EXP":46,"do":47,"for":48,"DECLARACION_VARIABLE_FOR":49,"INCREMENTO_FOR":50,"in":51,"igual":52,"corchete_abierto":53,"corchete_cerrado":54,"mas":55,"menos":56,"ACCESO_TYPE":57,"mas_mas":58,"menos_menos":59,"switch":60,"LISTA_CASE":61,"DEFAULT":62,"CASE":63,"case":64,"dos_puntos":65,"default":66,"continue":67,"break":68,"return":69,"if":70,"else":71,"PUSH_ARREGLO":72,"punto":73,"push":74,"LISTA_ACCESOS_TYPE":75,"TIPO_DEC_VARIABLE":76,"LISTA_PARAMETROS":77,"coma":78,"PARAMETRO":79,"LISTA_CORCHETES":80,"struct":81,"LISTA_ATRIBUTOS":82,"ATRIBUTO":83,"LIST_ID":84,"DEC_ID_TIPO_EXP":85,"DEC_ID":86,"mass":87,"por":88,"div":89,"mod":90,"sin":91,"cos":92,"tan":93,"sqrt":94,"pow":95,"log10":96,"NATIVA_STRING":97,"repeticion":98,"int":99,"parse":100,"double":101,"boolean":102,"toInt":103,"toDouble":104,"typeof":105,"string":106,"mayor":107,"menor":108,"mayor_igual":109,"menor_igual":110,"igual_que":111,"dif_que":112,"and":113,"or":114,"not":115,"entero":116,"decimal":117,"true":118,"false":119,"null":120,"ACCESO_ARREGLO":121,"ARRAY_LENGTH":122,"ARRAY_METHOD":123,"TERNARIO":124,"toLowercase":125,"NATIVA_STRING2":126,"toUppercase":127,"length":128,"subString":129,"caracterOfPosition":130,"pop":131,"EXPS_CORCHETE":132,"interrogacion":133,"LISTA_ACCESOS_ARREGLO":134,"PARAMETROS_LLAMADA":135,"PARAMETRO_LLAMADA":136,"nmral":137,"begin":138,"end":139,"graficar_ts":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"IMPRIMIR",23:"FOR1_OF",26:"punto_coma",28:"PRINTLN",33:"void",34:"main",35:"par_abierto",36:"par_cerrado",37:"llave_abierta",38:"llave_cerrada",39:"println",41:"print",44:"id",45:"while",47:"do",48:"for",51:"in",52:"igual",53:"corchete_abierto",54:"corchete_cerrado",55:"mas",56:"menos",58:"mas_mas",59:"menos_menos",60:"switch",64:"case",65:"dos_puntos",66:"default",67:"continue",68:"break",69:"return",70:"if",71:"else",73:"punto",74:"push",78:"coma",81:"struct",87:"mass",88:"por",89:"div",90:"mod",91:"sin",92:"cos",93:"tan",94:"sqrt",95:"pow",96:"log10",98:"repeticion",99:"int",100:"parse",101:"double",102:"boolean",103:"toInt",104:"toDouble",105:"typeof",106:"string",107:"mayor",108:"menor",109:"mayor_igual",110:"menor_igual",111:"igual_que",112:"dif_que",113:"and",114:"or",115:"not",116:"entero",117:"decimal",118:"true",119:"false",120:"null",122:"ARRAY_LENGTH",125:"toLowercase",127:"toUppercase",128:"length",129:"subString",130:"caracterOfPosition",131:"pop",133:"interrogacion",137:"nmral",138:"begin",139:"end",140:"graficar_ts"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[7,7],[29,5],[29,5],[42,1],[43,4],[43,5],[20,7],[21,9],[22,11],[24,7],[13,5],[13,4],[13,5],[13,5],[13,4],[50,2],[50,2],[16,7],[16,8],[16,7],[61,2],[61,1],[63,4],[62,3],[19,2],[17,2],[18,3],[18,2],[15,7],[15,5],[15,11],[15,9],[72,7],[72,8],[10,7],[10,7],[10,7],[10,8],[10,8],[10,8],[77,3],[77,1],[79,2],[79,2],[79,3],[11,6],[82,3],[82,1],[83,2],[83,2],[83,3],[83,3],[9,5],[9,3],[9,5],[84,3],[84,1],[84,3],[49,4],[85,4],[85,4],[86,1],[27,3],[27,3],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,2],[46,3],[46,4],[46,4],[46,4],[46,4],[46,6],[46,4],[46,1],[46,3],[46,6],[46,6],[46,6],[46,4],[46,4],[46,4],[46,4],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,1],[46,1],[46,4],[46,1],[46,1],[97,6],[97,6],[97,6],[97,6],[97,6],[97,6],[97,9],[97,9],[97,7],[97,7],[97,5],[97,5],[97,5],[97,5],[97,5],[97,5],[97,8],[97,8],[97,6],[97,6],[126,5],[126,5],[126,5],[126,8],[126,6],[126,4],[126,4],[126,4],[126,7],[126,5],[25,5],[25,6],[25,6],[25,7],[124,5],[57,2],[75,3],[75,2],[75,2],[134,4],[134,3],[40,3],[40,1],[76,1],[76,1],[76,1],[76,1],[30,3],[30,4],[135,3],[135,1],[136,1],[8,8],[8,6],[80,3],[80,2],[31,5],[121,2],[121,6],[121,6],[121,6],[121,6],[132,4],[132,3],[12,8],[123,4],[123,4],[123,4],[123,4],[123,5],[123,5],[123,5],[32,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return [this.$,reporte];   
break;
case 2:
  addReporte('INSTRUCCIONES: INSTRUCCIONES INSTRUCCION','INSTRUCCIONES.val  INSTRUCCION.val'); $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
  addReporte('INSTRUCCIONES: INSTRUCCION','INSTRUCCIONES.val:= INSTRUCCION.val');    this.$ = [$$[$0]];   
break;
case 4:
   addReporte('INSTRUCCION: MAIN',' MAIN: INSTRUCCION'); this.$ = $$[$0]; 
break;
case 5:
 addReporte('INSTRUCCION: DEC_ARRAY',' DEC_ARRAY: DEC_ARRAY.val');  this.$ = $$[$0] 
break;
case 6:
  addReporte('INSTRUCCION: DECLARACION_VARIABLE',' DECLARACION_VARIABLE: DECLARACION_VARIABLE.val'); this.$ = $$[$0] 
break;
case 7:
 addReporte('INSTRUCCION: DECLARACION_FUNCION',' DECLARACION_FUNCION: DECLARACION_FUNCION.val');  this.$ = $$[$0] 
break;
case 8:
  addReporte('INSTRUCCION: DECLARACION_TYPE',' DECLARACION_TYPE: DECLARACION_TYPE.val'); this.$ = $$[$0] 
break;
case 9:
 addReporte('INSTRUCCION: INSTANCIA_STRUCT',' INSTANCIA_STRUCT: INSTANCIA_STRUCT.val');  this.$ = $$[$0] 
break;
case 10:
  addReporte('INSTRUCCION: ASIGNACION',' ASIGNACION: ASIGNACION.val'); this.$ = $$[$0] 
break;
case 11:
 addReporte('INSTRUCCION: IMPRIMIR',' IMPRIMIR: IMPRIMIR.val');  this.$ = $$[$0] 
break;
case 12:
 addReporte('INSTRUCCION: CONDICION_IF',' CONDICION_IF: CONDICION_IF.val');  this.$ = $$[$0] 
break;
case 13:
 addReporte('INSTRUCCION: SWITCH',' SWITCH: SWITCH.val');  this.$ = $$[$0] 
break;
case 14:
 addReporte('INSTRUCCION: BREAK',' BREAK: BREAK.val');  this.$ = $$[$0] 
break;
case 15: case 20:
 addReporte('INSTRUCCION: RETURN',' RETURN: RETURN.val');  this.$ = $$[$0] 
break;
case 16:
 addReporte('INSTRUCCION: CONTINUE',' ');  this.$ = $$[$0] 
break;
case 17:
 addReporte('INSTRUCCION: WHILE',' WHILE: WHILE.val');  this.$ = $$[$0] 
break;
case 18:
 addReporte('INSTRUCCION: DO_WHILE',' DO_WHILE: DO_WHILE.val');  this.$ = $$[$0] 
break;
case 19:
 addReporte('INSTRUCCION: FOR',' FOR: FOR.val');  this.$ = $$[$0] 
break;
case 21:
 addReporte('INSTRUCCION: FOR_IN',' FOR_IN: FOR_IN.val');  this.$ = $$[$0] 
break;
case 22:
 addReporte('INSTRUCCION: ARRAY_POP',' ARRAY_POP: ARRAY_POP.val');  this.$ = $$[$0-1] 
break;
case 23:
 addReporte('INSTRUCCION: INCREMENTO_DECREMENTO',' INCREMENTO_DECREMENTO: INCREMENTO_DECREMENTO.val');  this.$ = $$[$0] 
break;
case 24:
 addReporte('INSTRUCCION: PRINTLN',' PRINTLN: PRINTLN.val');  this.$ = $$[$0] 
break;
case 25:
 addReporte('INSTRUCCION: PRINT',' PRINT: PRINT.val');  this.$ = $$[$0] 
break;
case 26:
 addReporte('INSTRUCCION: LLAMADA_FUNCION_EXP',' LLAMADA_FUNCION_EXP: LLAMADA_FUNCION_EXP.val');  this.$ = $$[$0-1] 
break;
case 27:
 addReporte('INSTRUCCION: MODIFICAR_ARREGLO',' MODIFICAR_ARREGLO: MODIFICAR_ARREGLO.val');  this.$ = $$[$0] 
break;
case 28:
 this.$=$$[$0]; 
break;
case 29:
this.$=new Excepcion('Sintactico',`Error sintactico en ${$$[$0]}`,_$[$0].first_line,_$[$0].first_column); 
break;
case 30:
 this.$ = new Main($$[$0-1],_$[$0-6].firt_line,_$[$0-6].first_column); 
break;
case 31:
 addReporte('PRINT:= println par_abierto LISTA_EXPRESIONES par_cerrado punto_coma','PRINT.val := LISTA_EXPRESIONES.val'); this.$ = new Print(_$[$0-4].firt_line,_$[$0-4].firt_column,$$[$0-2],true);  
break;
case 32:
 addReporte('PRINT:= println par_abierto LISTA_EXPRESIONES par_cerrado punto_coma','PRINT.val := LISTA_EXPRESIONES.val'); this.$ = new Print(_$[$0-4].firt_line,_$[$0-4].firt_column,$$[$0-2],false);  
break;
case 33: case 63:
  
break;
case 34:
 addReporte('LLAMAR_FUNCION: id par_abierto par_cerrado );',' ');  this.$ = new Llamada($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 35:
 addReporte('LLAMAR_FUNCION: id par_abierto LISTA_EXPRESIONES par_cerrado',' ');  this.$ = new Llamada($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]); 
break;
case 36:
 addReporte('WHILE: while par_abierto EXP par_cerrado llave_abierta INSTRUCCIONES llave_cerrada',' '); this.$= new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);  
break;
case 37:
 addReporte('DO_WHILE: do llave_abierta INSTRUCCIONES llave_cerrada while par_abierto EXP par_cerrado PT_COMA',' '); this.$= new DoWhile($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);   
break;
case 38:
  addReporte('FOR : for par_abierto DECLARACION_VARIABLE_FOR  punto_coma EXP punto_coma INCREMENTO_FOR par_cerrado { INSTRUCCIONES }',' '); this.$= new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].firt_line,_$[$0-10].firt_column); 
break;
case 39:
 addReporte('FOR_IN: for id in EXP  llave_abierta INSTRUCCIONES llave_cerrada','EXP:= EXP.val; '); this.$=new ForEach($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);  
break;
case 40:
 addReporte('ASIGNACION: id -= EXP ;','EXP:= EXP.val; '); this.$ = new Asignacion($$[$0-4], null,false,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 41:
 addReporte('ASIGNACION: id igual EXP ;','EXP:= EXP.val; ');  this.$ = new Asignacion($$[$0-3], $$[$0-1],false,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 42:
 addReporte('ASIGNACION: id += EXP ;','EXP:= EXP.val; '); this.$ = new Asignacion_Mas($$[$0-4], $$[$0-1],true,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 43:
 addReporte('ASIGNACION: id -= EXP ;','EXP:= EXP.val; '); this.$ = new Asignacion_Mas($$[$0-4], $$[$0-1],false,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 44:
 addReporte('ASIGNACION: ACCESO_TYPE = EXP ;',' EXP:= EXP.val; ');   this.$ = new Asignacion_VAR_STRUCT($$[$0-1],$$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 45:
  addReporte('INCREMENTO_FOR: id mas_mas  ','id.val := id.val+1'); this.$= new IncrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column); 
break;
case 46:
 addReporte('INCREMENTO_FOR: id menos_menos  ','id.val := id.val-1'); this.$= new DecrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column); 
break;
case 47:
 addReporte('SWITCH: switch par_abierto EXP par_cerrado { LISTA_CASE }','EXP:=EXP.val LISTA_CASE:= LISTA_CASE.val');  this.$=new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].firt_line,_$[$0-6].firt_column);  
break;
case 48:
  addReporte('SWITCH: switch par_abierto EXP par_cerrado { LISTA_CASE DEFAULT }','EXP:=EXP.val'); this.$=new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column);  
break;
case 49:
 addReporte('SWITCH: switch par_abierto EXP par_cerrado { DEFAULT } ','EXP:=EXP.val'); this.$=new Switch($$[$0-4],null,$$[$0-1],_$[$0-6].firt_line,_$[$0-6].firt_column);  
break;
case 50:
 addReporte('LISTA_CASE: LISTA_CASE CASE',' '); $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 51:
 addReporte('LISTA_CASE: CASE','LISTA_CASE:= CASE.val'); this.$ = [$$[$0]]              
break;
case 52:
 addReporte('CASE: case EXP dos_puntos INSTRUCCIONES','EXP:= EXP.val'); this.$ = new Case($$[$0-2], $$[$0],_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 53:
 addReporte('DEFAULT: default dos_puntos INSTRUCCIONES','INSTRUCCIONES:= INSTRUCCIONES.val'); this.$ = new Default($$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 54:
 addReporte('CONTINUE: continue PT_COMA',' ' ); this.$= new Continue(_$[$0-1].firt_line,_$[$0-1].firt_column); 
break;
case 55:
 addReporte('BREAK: break PT_COMA',' ' ); this.$= new Break(_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 56:
 addReporte('RETURN: return EXP PT_COMA','RETURN:= EXP.val',' ' );  this.$ = new Return(true,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-1]); 
break;
case 57:
 addReporte('RETURN: return punto_coma','RETURN:= return',' ' ); this.$ = new Return(false,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 58:
 addReporte('CONDICION_IF: if par_abierto EXP par_cerrado llave_abierta INSTRUCCIONES llave_cerrada','EXP:=EXP.val'); this.$=new If($$[$0-4],$$[$0-1],null,null,_$[$0-6].firt_line,_$[$0-6].firt_column); 
break;
case 59:
 addReporte('CONDICION_IF: if par_abierto EXP par_cerrado  INSTRUCCION ','EXP:=EXP.val'); this.$=new If($$[$0-2],[$$[$0]],null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 60:
 addReporte('CONDICION_IF: if par_abierto EXP par_cerrado { INSTRUCCIONES } else { INSTRUCCIONES } ','EXP:=EXP.val'); this.$=new If($$[$0-8],$$[$0-5],$$[$0-1],null,_$[$0-10].firt_line,_$[$0-10].firt_column); 
break;
case 61:
 addReporte('CONDICION_IF: if ( EXP ) { INSTRUCCIONES } else CONDICION_IF ','EXP:=EXP.val'); this.$=new If($$[$0-6],$$[$0-3],null,[$$[$0]],_$[$0-8].firt_line,_$[$0-8].firt_column); 
break;
case 62:
 console.log("ENTRA QUI EL PUSH"); this.$ = new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 64:
 this.$ = new Funcion($$[$0-5],$$[$0-1],$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 65:
 this.$ = new Funcion($$[$0-5],$$[$0-1],TIPO.VOID,_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 66:
 this.$ = new Funcion($$[$0-5],$$[$0-1],TIPO.STRUCT,_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 67:
  this.$ = new Funcion($$[$0-6],$$[$0-1],$$[$0-7],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4]);    
break;
case 68:
  this.$ = new Funcion($$[$0-6],$$[$0-1],TIPO.VOID,_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4]);    
break;
case 69:
  this.$ = new Funcion($$[$0-6],$$[$0-1],TIPO.STRUCT,_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4]);    
break;
case 70:
  $$[$0-2].push($$[$0]); this.$ = $$[$0-2];   
break;
case 71:
  this.$ =  [$$[$0]]              
break;
case 72:
 this.$ = {'tipo':$$[$0-1], 'id':$$[$0], 'arreglo':false}   
break;
case 73:
 this.$ = {'tipo':TIPO.STRUCT, 'id':$$[$0], 'arreglo':false}   
break;
case 74:
 this.$ = {'tipo':TIPO.ARREGLO,'id':$$[$0], 'arreglo':true}      
break;
case 75:
 this.$ = new Struct($$[$0-4],$$[$0-2],_$[$0-5].first_linem,_$[$0-5].first_column);    
break;
case 76:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 77:
   this.$ = [$$[$0]]; 
break;
case 78:
 this.$ = new Simbolo($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column,null,false,false)
break;
case 79:
 this.$ = new Simbolo($$[$0],TIPO.STRUCT,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0-1],false,true)
break;
case 80:
 this.$ = new Simbolo($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,null,false,false)
break;
case 81:
 this.$ = new Simbolo($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],true,true)
break;
case 82:
  this.$ = new D_IdExp($$[$0-4], $$[$0-3], $$[$0-1],false,_$[$0-4].firt_line,_$[$0-4].firt_column);  
break;
case 83:
  this.$ = new D_Id($$[$0-2], $$[$0-1],false,_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 84:
  $$[$0-1].push($$[$0-3]) ; this.$ = new List_Declaracion($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column)   
break;
case 85:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 86:
 this.$ = [$$[$0]]
break;
case 87:
   $$[$0-2].push(new Excepcion('Sintactico',`NO SE PERMITE PALABRAS RESERVADAS ${$$[$0]}`,_$[$0-2].first_line,_$[$0-2].first_column)); this.$ = $$[$0-2];  
break;
case 88:
  this.$ = new D_IdExp($$[$0-3], $$[$0-2], $$[$0],false,_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 89:
  this.$ = new D_IdExp($$[$0-3], $$[$0-2], $$[$0-1],false,_$[$0-3].firt_line,_$[$0-3].firt_column);            
break;
case 90:
  this.$ = new D_IdExp(TIPO.STRUCT, $$[$0-2], $$[$0-1],false,_$[$0-3].firt_line,_$[$0-3].firt_column);   
break;
case 91:
 addReporte('DEC_ID: id','id:=id.val'); this.$ = $$[$0]  
break;
case 92:
 addReporte('INCREMENTO_DECREMENTO: id ++ PT_COMA','id.val=id.val +1'); this.$=new IncrementoVariable($$[$0-2],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 93:
 addReporte('INCREMENTO_DECREMENTO: id -- PT_COMA','id.val=id.val -1'); this.$=new DecrementoVariable($$[$0-2],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 94:
 addReporte('EXP: - EXP %prec UMENOS ','EXP:=EXP.val'); this.$ = new NegacionNum(6,$$[$0],0,_$[$0-1].firt_line,_$[$0-1].firt_column);   
break;
case 95:
 addReporte('EXP:  EXP + EXP ','EXP:=EXP.val+EXP.val'); this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 96:
 addReporte('EXP:  EXP & EXP ','EXP:=EXP.val&EXP.val'); this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 97:
 addReporte('EXP:  EXP - EXP','EXP:=EXP.val-EXP.val'); this.$ = new Resta(1,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 98:
 addReporte('EXP:  EXP * EXP','EXP:=EXP.val*EXP.val'); this.$ = new Multiplicar(2,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 99:
 addReporte('EXP:  EXP / EXP','EXP:=EXP.val/EXP.val'); this.$ = new Division(3,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);     
break;
case 100:
 addReporte('EXP:  EXP % EXP','EXP:=EXP.val % EXP.val'); this.$ = new Modulo(5,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 101:
 addReporte('EXP:  EXP ++','EXP:=EXP.val+1'); this.$=new IncrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 102:
 addReporte('EXP:  EXP --','EXP:=EXP.val-1'); this.$=new DecrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 103:
 addReporte('EXP:  ( EXP )','EXP:=EXP.val '); this.$ = $$[$0-1]  
break;
case 104:
 addReporte('EXP: sin par_abierto EXP par_cerrado','EXP:=sen( EXP.val )'); this.$ = new Seno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 105:
 addReporte('EXP: cos par_abierto EXP par_cerrado','EXP:=cos( EXP.val )'); this.$ = new Coseno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 106:
 addReporte('EXP: tan par_abierto EXP par_cerrado','EXP:=tan( EXP.val )'); this.$ = new Tangente($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 107:
 addReporte('EXP: sqrt par_abierto EXP par_cerrado','EXP:=sqrt( EXP.val )'); this.$ = new Sqrt($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 108:
 addReporte('EXP: pow par_abierto EXP coma EXP par_cerrado','EXP:=pow( EXP.val^ EXP.val)'); this.$ = new Pow($$[$0-3],$$[$0-1],_$[$0-5].firt_line,_$[$0-5].firt_column);  
break;
case 109:
 addReporte('EXP: log10 par_abierto EXP par_cerrado','EXP:=log10( EXP.val )'); this.$ = new Log($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 110:
this.$=$$[$0];
break;
case 111:
 addReporte('EXP:  EXP ^ EXP','EXP:=EXP1.val ^ EXP2.val'); this.$= new RepeticionCadena($$[$0-2],TIPO_NATIVA_CADENA.REPETICION,$$[$0],null,_$[$0-2].firt_line,_$[$0-2].firt_column); 
break;
case 112:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.INTPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 113:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.DOUBLEPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 114:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.BOOLEANPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 115:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOINT,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 116:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TODOUBLE,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 117:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TYPEOF,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 118:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOSTRING,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 119:
 addReporte('EXP:  EXP > EXP','EXP:=EXP1.val > EXP2.val');  this.$ = new Mayor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 120:
 addReporte('EXP:  EXP < EXP','EXP:=EXP1.val < EXP2.val');   this.$ = new Menor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 121:
 addReporte('EXP:  EXP >= EXP','EXP:=EXP1.val >= EXP2.val');  this.$ = new MayorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 122:
 addReporte('EXP:  EXP <= EXP','EXP:=EXP1.val <= EXP2.val');   this.$ = new MenorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 123:
 addReporte('EXP:  EXP == EXP','EXP:=EXP1.val == EXP2.val');   this.$ = new IgualIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 124:
 addReporte('EXP:  EXP != EXP','EXP:=EXP1.val != EXP2.val');   this.$ = new Diff($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 125:
 addReporte('EXP:  EXP && EXP','EXP:=EXP1.val && EXP2.val'); this.$ = new And($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);   
break;
case 126:
 addReporte('EXP:  EXP || EXP','EXP:=EXP1.val || EXP2.val'); this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 127:
 addReporte('EXP:  ! EXP','EXP:= ! EXP1.val'); this.$ = new Not($$[$0],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 128:
 addReporte('EXP:  entero','EXP:=entero.val'); this.$ = new Primitivo(0,$$[$0],_$[$0].firt_line,_$[$0].firt_column); 
break;
case 129:
 addReporte('EXP:  decimal','EXP:=decimal.val'); this.$ = new Primitivo(TIPO.DECIMAL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);
break;
case 130:
 addReporte('EXP:  string','EXP:=string.val'); this.$ = new Primitivo(TIPO.CADENA,$$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 131:
 addReporte('EXP:  id','EXP:=id.val'); this.$ = new Identificador($$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 132:
 addReporte('EXP:  true','EXP:=true'); this.$ = new Primitivo(TIPO.BOOLEAN,true,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 133:
 addReporte('EXP:  false','EXP:=false'); this.$ = new Primitivo(TIPO.BOOLEAN,false,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 134:
 addReporte('EXP:  null','EXP:=null'); this.$ = new Primitivo(TIPO.NULL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);  
break;
case 135: case 137:
 addReporte('EXP:  ACCESO_ARREGLO','EXP:=ACCESO_ARREGLO');  this.$ = $$[$0]; 
break;
case 136:
 addReporte('EXP:  ARRAY_LENGTH','EXP:=ARRAY_LENGTH');  this.$ = $$[$0]; 
break;
case 138:
 addReporte('EXP:  { LISTA_EXPRESIONES }','EXP:=LISTA_EXPRESIONES');  this.$ = $$[$0-1]; 
break;
case 139:
  addReporte('EXP:  ARRAY_METHOD','EXP:=ARRAY_METHOD'); this.$ = $$[$0]; 
break;
case 140:
 addReporte('EXP:  ACCESO_TYPE','EXP:=ACCESO_TYPE'); this.$ = $$[$0];   
break;
case 141:
 addReporte('EXP:  ACCESO_TYPE igual EXP punto_coma','EXP:=EXP.val'); this.$ = new Asignacion_Struct_Exp($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 142:
 addReporte('EXP:  TERNARIO','EXP:=TERNARIO.val'); this.$ = $$[$0];  
break;
case 143:
 addReporte('EXP: LLAMADA_FUNCION_EXP','EXP:= LLAMADA_FUNCION_EXP'); this.$ = $$[$0]  
break;
case 144:
 addReporte('EXP: id punto toLowercase par_abierto par_cerrado','EXP:= toLowercase(id.val)'); this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 145:
 addReporte('EXP: id punto toLowercase par_abierto par_cerrado','EXP:= toLowercase(id.val)'); this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 146:
 addReporte('EXP: id punto toUppercase par_abierto par_cerrado','EXP:= toUppercase(id.val)'); this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 147:
 addReporte('EXP: id punto toUppercase par_abierto par_cerrado','EXP:= toUppercase(id.val)'); this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 148:
 addReporte('EXP: id punto length par_abierto par_cerrado','EXP:= id.val.length()'); this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 149:
 addReporte('EXP: id punto length par_abierto par_cerrado','EXP:= id.val.length()'); this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 150:
 addReporte('EXP: id punto subString par_abierto EXP coma EXP par_cerrado','EXP:= id.val.subString(EXP1.val,EXP2.val)'); this.$= new NativasString(new Identificador($$[$0-8],_$[$0-8].firt_line,_$[$0-8].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 151:
 addReporte('EXP: id punto subString par_abierto EXP coma EXP par_cerrado','EXP:= id.val.subString(EXP1.val,EXP2.val)'); this.$= new NativasString($$[$0-8],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 152:
 addReporte('EXP: id punto caracterOfPosition par_abierto EXP par_cerrado','EXP:= id.val)'); this.$= new NativasString(new Identificador($$[$0-6],_$[$0-6].firt_line,_$[$0-6].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 153:
 addReporte('EXP: id punto caracterOfPosition par_abierto EXP par_cerrado','EXP:= id.val)'); this.$= new NativasString($$[$0-6],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 154:
 addReporte('EXP: id punto toLowercase par_abierto par_cerrado','EXP:= toLowercase(id.val)'); this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 155:
 addReporte('EXP: id punto toLowercase par_abierto par_cerrado','EXP:= toLowercase(id.val)'); this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 156:
 addReporte('EXP: id punto toUppercase par_abierto par_cerrado','EXP:= toUppercase(id.val)'); this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 157:
 addReporte('EXP: id punto toUppercase par_abierto par_cerrado','EXP:= toUppercase(id.val)'); this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 158:
 addReporte('EXP: id punto length par_abierto par_cerrado','EXP:= id.val.length()'); this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 159:
 addReporte('EXP: id punto length par_abierto par_cerrado','EXP:= id.val.length()'); this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 160:
 addReporte('EXP: id punto subString par_abierto EXP coma EXP par_cerrado','EXP:= id.val.subString(EXP1.val,EXP2.val)'); this.$= new NativasString(new Identificador($$[$0-7],_$[$0-7].firt_line,_$[$0-7].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 161:
 addReporte('EXP: id punto subString par_abierto EXP coma EXP par_cerrado','EXP:= id.val.subString(EXP1.val,EXP2.val)'); this.$= new NativasString($$[$0-7],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 162:
 addReporte('EXP: id punto caracterOfPosition par_abierto EXP par_cerrado','EXP:= id.val)'); this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 163:
 addReporte('EXP: id punto caracterOfPosition par_abierto EXP par_cerrado','EXP:= id.val)'); this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 164:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 165:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 166:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 167:
 $$[$0-7].push(new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column)); this.$=$$[$0-7]; 
break;
case 168:
 $$[$0-5].push(new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column)); this.$=$$[$0-5]; 
break;
case 169:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 170:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 171:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column) ]; 
break;
case 172:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-6].firt_line,_$[$0-6].firt_column)]; 
break;
case 173:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-4].firt_line,_$[$0-4].firt_column)]; 
break;
case 174:
 addReporte('ARRAY_POP: id punto pop par_abierto par_cerrado',''); this.$ = new Pop($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);   
break;
case 175:
 addReporte('ARRAY_POP: id punto push par_abierto EXP par_cerrado',''); this.$ = new Push($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);   
break;
case 176:
 addReporte('ARRAY_POP: id EXPS_CORCHETE punto pop par_abierto par_cerrado',''); this.$ = new Pop_List($$[$0-5],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);  
break;
case 177:
 addReporte('ARRAY_POP: id EXPS_CORCHETE punto push par_abierto EXP par_cerrado',''); this.$ = new Push_List($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 178:
 addReporte('TERNARIO: EXP interrogacion EXP dos_puntos EXP',''); this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].firt_line,_$[$0-4].firt_column);  
break;
case 179:
   addReporte('ACCESO_TYPE: id LISTA_ACCESOS_TYPE',''); this.$ = new Acceso_Struct($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);   
break;
case 180:
 addReporte('LISTA_ACCESOS_TYPE: LISTA_ACCESOS_TYPE punto id',''); $$[$0-2].push($$[$0]);this.$ = $$[$0-2];  
break;
case 181:
 addReporte('LISTA_ACCESOS_TYPE: punto id','');  this.$ = [$$[$0]];            
break;
case 182:
   this.$ = [$$[$0]];
break;
case 183: case 184:
    
break;
case 185:
 addReporte('LISTA_EXPRESIONES: LISTA_EXPRESIONES coma EXP','LISTA_EXPRESIONES:=LISTA_EXPRESIONES.push(EXP) '); $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 186:
 addReporte('LISTA_EXPRESIONES: EXP','LISTA_EXPRESIONES:=EXP.val '); this.$ = [$$[$0]]; 
break;
case 187:
 addReporte('TIPO_DEC_VARIABLE: string','TIPO_DEC_VARIABLE:= string.val'); this.$ = TIPO.CADENA;  
break;
case 188:
 addReporte('TIPO_DEC_VARIABLE: int','TIPO_DEC_VARIABLE:= int.val'); this.$ = 0;            
break;
case 189:
 addReporte('TIPO_DEC_VARIABLE: double','TIPO_DEC_VARIABLE:= double.val'); this.$ = TIPO.DECIMAL; 
break;
case 190:
 addReporte('TIPO_DEC_VARIABLE: boolean','TIPO_DEC_VARIABLE:= boolean.val'); this.$ = TIPO.BOOLEAN; 
break;
case 191:
 addReporte('LLAMADA_FUNCION_EXP: id par_abierto par_cerrado',''); this.$ = new Llamada($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 192:
 addReporte('LLAMADA_FUNCION_EXP: id par_abierto PARAMETROS_LLAMADA par_cerrado',''); this.$ = new Llamada($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]); 
break;
case 193:
  addReporte(''); $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 194:
 this.$ = [$$[$0]];           
break;
case 195:
 this.$ = $$[$0]; 
break;
case 196:
 this.$ = new Arreglo ($$[$0-7],$$[$0-5],$$[$0-2],$$[$0-7],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column);    
break;
case 197:
 this.$ = new Arreglo_Valor($$[$0-5],$$[$0-3],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 198:
  this.$ = $$[$0-1]+$$[$0-2]  
break;
case 199:
  this.$ = 1;     
break;
case 200:
  this.$ = new Modificar($$[$0-4],$$[$0-3], $$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 201:
  this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 202:
  this.$ = new Fin_Rango($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 203:
  this.$ = new Begin_Rango($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 204:
  this.$ = new Rango($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 205:
  this.$ = new Rango_Complete($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 206:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 207:
 this.$ = [$$[$0-1]]             
break;
case 208:
 this.$ = new Dec_Struct($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 209:
this.$ = new Multiplicacion_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 210:
this.$ = new Division_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 211:
this.$ = new Resta_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 212:
this.$ = new Suma_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 213:
this.$ = new Seno_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 214:
this.$ = new Cos_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 215:
this.$ = new Tan_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 216:
 this.$ = new Graficar(_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{1:[3]},{2:$V0,5:[1,50],6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vm,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),{26:[1,52]},o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),{26:[1,53]},o($Vn,[2,27]),o($Vn,[2,28]),o($Vn,[2,29]),{34:[1,54],44:[1,55]},{44:[1,57],53:$Vo,80:56},{35:$Vp,44:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,58:$Vv,59:$Vw,73:$Vx,75:68,132:64},{44:[1,70]},{52:[1,71]},{35:[1,72]},{35:[1,73]},{26:$Vy,42:74},{25:103,26:[1,77],30:108,35:$Vz,44:$VA,46:76,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{26:$Vy,42:109},{35:[1,110]},{37:[1,111]},{35:[1,112],44:[1,113]},{35:[1,114]},{35:[1,115]},{35:[1,116]},o($VX,[2,187]),o($VX,[2,188]),o($VX,[2,189]),o($VX,[2,190]),{1:[2,1]},o($Vm,[2,2]),o($Vn,[2,22]),o($Vn,[2,26]),{35:[1,117]},{35:[1,118]},{44:[1,119],53:$VY},{26:[1,122],35:[1,124],52:[1,121],78:[1,123]},{54:[1,125]},{35:[1,126],52:[1,127]},{25:103,30:108,35:$Vz,44:$VA,46:129,53:[1,128],56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{52:[1,130]},{52:[1,131]},{44:$VZ,74:$V_,121:135,131:$V$},{52:[1,137],53:$V01,73:$V11},{26:$Vy,42:139},{26:$Vy,42:140},{25:103,30:108,35:$Vz,36:[1,141],44:$VA,46:144,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107,135:142,136:143},o([26,36,37,52,54,55,56,65,78,87,88,89,90,98,107,108,109,110,111,112,113,114,133],[2,179],{73:[1,145]}),{25:103,30:108,35:$Vz,44:$VA,46:146,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{37:[1,147]},{25:103,30:108,35:$Vz,44:$VA,46:148,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:149,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:150,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vn,[2,55]),o($Vn,[2,33]),{26:$Vy,42:151,55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vn,[2,57]),{25:103,30:108,35:$Vz,44:$VA,46:168,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,131],{75:68,132:172,35:$Vp,53:$Vj1,58:[1,169],59:[1,170],73:[1,171],137:[1,174]}),{25:103,30:108,35:$Vz,44:$VA,46:175,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{35:[1,176],137:[1,177]},{35:[1,178],137:[1,179]},{35:[1,180],137:[1,181]},{35:[1,182]},{35:[1,183]},{35:[1,184]},o($Vi1,[2,110]),{73:[1,185]},{73:[1,186]},{73:[1,187]},{35:[1,188]},{35:[1,189]},{35:[1,190]},o($Vi1,[2,130],{35:[1,191],73:[1,192]}),{25:103,30:108,35:$Vz,44:$VA,46:193,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,128]),o($Vi1,[2,129]),o($Vi1,[2,132]),o($Vi1,[2,133]),o($Vi1,[2,134]),o($Vi1,[2,135]),o($Vi1,[2,136]),o($Vi1,[2,137]),{25:103,30:108,35:$Vz,40:194,44:$VA,46:195,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,139]),o($Vi1,[2,140],{52:[1,196]}),o($Vi1,[2,142]),o($Vi1,[2,143]),o($Vn,[2,54]),{25:103,30:108,35:$Vz,44:$VA,46:197,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{2:$V0,4:198,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{49:199,76:200,99:$Vh,101:$Vi,102:$Vj,106:$Vk},{51:[1,201]},{25:103,30:108,35:$Vz,40:202,44:$VA,46:195,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,40:203,44:$VA,46:195,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{36:[1,204]},{36:[1,205]},{36:[1,206],44:$Vk1,76:209,77:207,79:208,99:$Vh,101:$Vi,102:$Vj,106:$Vk},{52:[1,211]},{54:[1,212]},{25:103,30:108,35:$Vz,44:$VA,46:213,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vn,[2,83]),{44:[1,215],84:214},{36:[1,216],44:$Vk1,76:209,77:217,79:208,99:$Vh,101:$Vi,102:$Vj,106:$Vk},o($Vl1,[2,199]),{36:[1,218],44:$Vk1,76:209,77:219,79:208,99:$Vh,101:$Vi,102:$Vj,106:$Vk},{44:[1,220]},{25:103,30:108,35:$Vz,40:194,44:$VA,46:195,53:$VB,54:[1,221],56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{26:[1,222],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{25:103,30:108,35:$Vz,44:$VA,46:223,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:224,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{35:[1,225]},{35:[1,226]},o($Vm1,[2,181],{132:227,53:$Vj1}),o($Vm1,[2,182]),{74:[1,229],131:[1,228]},{25:103,30:108,35:$Vz,44:$VA,46:230,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:231,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vn,[2,92]),o($Vn,[2,93]),o($Vi1,[2,191]),{36:[1,232],78:[1,233]},o($Vn1,[2,194]),o($Vn1,[2,195],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1}),{44:[1,234]},{54:$Vo1,55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{44:$Vp1,76:238,82:236,83:237,99:$Vh,101:$Vi,102:$Vj,106:$Vk},{26:[1,240],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,241],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,242],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vn,[2,56]),{25:103,30:108,35:$Vz,44:$VA,46:243,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:244,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:245,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:246,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:247,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:248,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:249,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:250,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:251,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:252,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:253,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:254,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:255,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:256,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:257,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:258,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vq1,[2,94],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vi1,[2,101]),o($Vi1,[2,102]),{44:$VZ,74:$V_,121:135,125:[1,259],127:[1,260],128:[1,261],129:[1,262],130:[1,263],131:$V$},o($Vi1,$Vr1,{53:$V01,73:$V11}),{25:103,30:108,35:$Vz,44:$VA,46:265,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107,138:[1,264]},{55:[1,269],56:[1,268],88:[1,266],89:[1,267]},{36:[1,270],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{25:103,30:108,35:$Vz,44:$VA,46:271,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{35:[1,272]},{25:103,30:108,35:$Vz,44:$VA,46:273,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{35:[1,274]},{25:103,30:108,35:$Vz,44:$VA,46:275,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{35:[1,276]},{25:103,30:108,35:$Vz,44:$VA,46:277,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:278,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:279,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{100:[1,280]},{100:[1,281]},{100:[1,282]},{25:103,30:108,35:$Vz,44:$VA,46:283,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:284,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:285,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:286,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{125:[1,287],127:[1,288],128:[1,289],129:[1,290],130:[1,291]},o($Vs1,[2,127],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1}),{54:[1,292],78:$Vt1},o($Vu1,[2,186],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1}),{25:103,30:108,35:$Vz,44:$VA,46:294,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{36:[1,295],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,296],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{26:[1,297]},{44:[1,298]},{25:103,30:108,35:$Vz,44:$VA,46:299,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{36:[1,300],78:$Vt1},{36:[1,301],78:$Vt1},{26:[1,302]},{37:[1,303]},{37:[1,304]},{36:[1,305],78:$Vv1},o($Vn1,[2,71]),{44:[1,307],53:$Vo,80:308},{44:[1,309]},{53:[1,310],137:[1,311]},o($Vl1,[2,198]),{26:[1,312],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{26:[1,313],78:[1,314]},o($Vw1,[2,86]),{37:[1,315]},{36:[1,316],78:$Vv1},{37:[1,317]},{36:[1,318],78:$Vv1},{35:[1,319]},{26:[1,320]},o($Vn,[2,41]),{26:[1,321],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{26:[1,322],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,323]},{25:103,30:108,35:$Vz,44:$VA,46:324,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vm1,$Vr1,{53:$V01}),{35:[1,325]},{35:[1,326]},{26:[1,327],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{54:[1,328],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,192]),{25:103,30:108,35:$Vz,44:$VA,46:144,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107,136:329},o($Vm1,[2,180]),o($Vx1,[2,207]),{38:[1,330],78:[1,331]},o($Vy1,[2,77]),{44:[1,332],53:$Vo,80:333},{44:[1,334]},o($Vn,[2,44]),{2:$V0,6:336,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,37:[1,335],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{37:[1,337]},o($Vq1,[2,95],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vq1,[2,96],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vq1,[2,97],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vi1,[2,98]),o($Vi1,[2,99]),o($Vi1,[2,100]),o($Vi1,[2,111]),o($Vz1,[2,119],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81}),o($Vz1,[2,120],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81}),o($Vz1,[2,121],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81}),o($Vz1,[2,122],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81}),o([26,36,37,54,65,78,111,112,113,114,133],[2,123],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1}),o([26,36,37,54,65,78,112,113,114,133],[2,124],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1}),o($Vs1,[2,125],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1}),o([26,36,37,54,65,78,114,133],[2,126],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1}),{55:$V21,56:$V31,65:[1,338],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{35:[1,339]},{35:[1,340]},{35:[1,341]},{35:[1,342]},{35:[1,343]},{65:[1,344]},{54:$Vo1,55:$V21,56:$V31,65:[1,345],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{25:103,30:108,35:$Vz,44:$VA,46:346,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:347,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:348,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:349,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,103]),{36:[1,350],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{44:[1,351]},{36:[1,352],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{44:[1,353]},{36:[1,354],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{44:[1,355]},{36:[1,356],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{55:$V21,56:$V31,78:[1,357],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,358],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{35:[1,359]},{35:[1,360]},{35:[1,361]},{36:[1,362],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,363],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,364],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,365],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{35:[1,366]},{35:[1,367]},{35:[1,368]},{35:[1,369]},{35:[1,370]},o($Vi1,[2,138]),{25:103,30:108,35:$Vz,44:$VA,46:371,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{26:[1,372],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{37:[1,373]},{45:[1,374]},{25:103,30:108,35:$Vz,44:$VA,46:375,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{52:[1,376]},{37:[1,377],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{26:[1,378]},{26:[1,379]},o($Vn,[2,216]),{2:$V0,4:380,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:381,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{37:[1,382]},{44:$Vk1,76:209,79:383,99:$Vh,101:$Vi,102:$Vj,106:$Vk},o($Vn1,[2,72]),{44:[1,384],53:$VY},o($Vn1,[2,73]),{25:103,30:108,35:$Vz,40:385,44:$VA,46:195,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{44:[1,386]},o($Vn,[2,82]),o($Vn,[2,84]),{2:$V0,6:388,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:[1,387],45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:389,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{37:[1,390]},{2:$V0,4:391,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{37:[1,392]},{25:103,30:108,35:$Vz,40:393,44:$VA,46:195,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vn,[2,40]),o($Vn,[2,42]),o($Vn,[2,43]),o($Vi1,[2,174]),{36:[1,394],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,395]},{25:103,30:108,35:$Vz,44:$VA,46:396,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vn,[2,200]),o($Vx1,[2,206]),o($Vn1,[2,193]),{26:[1,397]},{44:$Vp1,76:238,83:398,99:$Vh,101:$Vi,102:$Vj,106:$Vk},o($Vy1,[2,78]),{44:[1,399],53:$VY},o($Vy1,[2,79],{80:400,53:$Vo}),{2:$V0,4:401,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,59]),{61:402,62:403,63:404,64:$VA1,66:$VB1},{25:103,30:108,35:$Vz,44:$VA,46:407,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{36:[1,408]},{36:[1,409]},{36:[1,410]},{25:103,30:108,35:$Vz,44:$VA,46:411,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:412,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:413,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107,139:[1,414]},{25:103,30:108,35:$Vz,44:$VA,46:416,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107,139:[1,415]},o($Vi1,[2,209]),o($Vi1,[2,210]),o($Vq1,[2,211],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vq1,[2,212],{88:$V51,89:$V61,90:$V71,98:$V81}),o($Vi1,[2,104]),{36:[1,417]},o($Vi1,[2,105]),{36:[1,418]},o($Vi1,[2,106]),{36:[1,419]},o($Vi1,[2,107]),{25:103,30:108,35:$Vz,44:$VA,46:420,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,109]),{25:103,30:108,35:$Vz,44:$VA,46:421,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:422,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:423,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,115]),o($Vi1,[2,116]),o($Vi1,[2,117]),o($Vi1,[2,118]),{36:[1,424]},{36:[1,425]},{36:[1,426]},{25:103,30:108,35:$Vz,44:$VA,46:427,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:428,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vu1,[2,185],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1}),o($Vi1,[2,141]),{2:$V0,4:429,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{35:[1,430]},{26:[1,431],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{25:103,30:108,35:$Vz,44:$VA,46:432,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{2:$V0,4:433,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,31]),o($Vn,[2,32]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,434],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,435],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:436,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn1,[2,70]),o($Vn1,[2,74]),{54:[1,437],78:$Vt1},o($Vn,[2,197]),o($Vw1,[2,85],{132:64,75:68,35:$Vp,44:$Vq,52:$Vr,53:$Vs,55:$Vt,56:$Vu,58:$Vv,59:$Vw,73:$Vx}),o($Vw1,[2,87]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,438],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:439,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,440],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:441,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{36:[1,442],78:$Vt1},o($Vi1,[2,175]),o($Vi1,[2,176]),{36:[1,443],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vn,[2,75]),o($Vy1,[2,76]),o($Vy1,[2,80]),o($Vy1,[2,81],{53:$VY}),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,444],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{38:[1,445],62:446,63:447,64:$VA1,66:$VB1},{38:[1,448]},o($VC1,[2,51]),{65:[1,449]},{25:103,30:108,35:$Vz,44:$VA,46:450,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o([26,36,37,54,65,78,133],[2,178],{55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1}),o($Vi1,[2,154],{126:451,73:$VD1}),o($Vi1,[2,156],{126:453,73:$VD1}),o($Vi1,[2,158],{126:454,73:$VD1}),{55:$V21,56:$V31,78:[1,455],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,456],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{54:[1,457],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{54:[1,458]},{54:[1,459]},{54:[1,460],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,213]),o($Vi1,[2,214]),o($Vi1,[2,215]),{36:[1,461],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,462],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,463],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,464],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,155],{126:465,73:$VD1}),o($Vi1,[2,157],{126:466,73:$VD1}),o($Vi1,[2,159],{126:467,73:$VD1}),{55:$V21,56:$V31,78:[1,468],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,469],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,470],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{25:103,30:108,35:$Vz,44:$VA,46:471,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{44:[1,473],50:472},{26:[2,88],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,474],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,30]),o($Vn,[2,65]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,475],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{26:[1,476]},o($Vn,[2,64]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,477],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,66]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,478],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{26:[1,479]},o($Vi1,[2,177]),o($Vn,[2,58],{71:[1,480]}),o($Vn,[2,47]),{38:[1,481]},o($VC1,[2,50]),o($Vn,[2,49]),{2:$V0,4:482,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{55:$V21,56:$V31,65:[1,483],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,144],{73:$VE1}),{125:[1,485],127:[1,486],128:[1,487],129:[1,488],130:[1,489]},o($Vi1,[2,146],{73:$VE1}),o($Vi1,[2,148],{73:$VE1}),{25:103,30:108,35:$Vz,44:$VA,46:490,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,162],{126:491,73:$VD1}),o($Vm1,[2,202]),o($Vm1,[2,205]),o($Vm1,[2,203]),o($Vm1,[2,204]),o($Vi1,[2,108]),o($Vi1,[2,112]),o($Vi1,[2,113]),o($Vi1,[2,114]),o($Vi1,[2,145],{73:$VE1}),o($Vi1,[2,147],{73:$VE1}),o($Vi1,[2,149],{73:$VE1}),{25:103,30:108,35:$Vz,44:$VA,46:492,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,163],{126:493,73:$VD1}),o($Vn,[2,36]),{36:[1,494],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,495]},{58:[1,496],59:[1,497]},o($Vn,[2,39]),o($Vn,[2,68]),o($Vn,[2,196]),o($Vn,[2,67]),o($Vn,[2,69]),o($Vn,[2,208]),{15:499,37:[1,498],70:$Vf},o($Vn,[2,48]),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[2,53],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,4:500,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{125:[1,501],127:[1,502],128:[1,503],129:[1,504],130:[1,505]},{35:[1,506]},{35:[1,507]},{35:[1,508]},{35:[1,509]},{35:[1,510]},{36:[1,511],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,152],{73:$VE1}),{36:[1,512],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,153],{73:$VE1}),{26:$Vy,42:513},{37:[1,514]},{36:[2,45]},{36:[2,46]},{2:$V0,4:515,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,61]),o($VC1,[2,52],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,24:21,25:22,27:23,29:25,30:26,31:27,32:28,76:31,57:34,6:51,2:$V0,14:$V1,23:$V2,28:$V3,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl}),{35:[1,516]},{35:[1,517]},{35:[1,518]},{35:[1,519]},{35:[1,520]},{36:[1,521]},{36:[1,522]},{36:[1,523]},{25:103,30:108,35:$Vz,44:$VA,46:524,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:525,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($Vi1,[2,160],{126:526,73:$VD1}),o($Vi1,[2,161],{126:527,73:$VD1}),o($Vn,[2,37]),{2:$V0,4:528,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,529],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},{36:[1,530]},{36:[1,531]},{36:[1,532]},{25:103,30:108,35:$Vz,44:$VA,46:533,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},{25:103,30:108,35:$Vz,44:$VA,46:534,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($VF1,[2,169]),o($VF1,[2,170]),o($VF1,[2,171]),{55:$V21,56:$V31,78:[1,535],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,536],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($Vi1,[2,150],{73:$VE1}),o($Vi1,[2,151],{73:$VE1}),{2:$V0,6:51,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V2,24:21,25:22,27:23,28:$V3,29:25,30:26,31:27,32:28,33:$V4,38:[1,537],39:$V5,41:$V6,44:$V7,45:$V8,47:$V9,48:$Va,57:34,60:$Vb,67:$Vc,68:$Vd,69:$Ve,70:$Vf,76:31,81:$Vg,99:$Vh,101:$Vi,102:$Vj,106:$Vk,140:$Vl},o($Vn,[2,60]),o($VF1,[2,164]),o($VF1,[2,165]),o($VF1,[2,166]),{55:$V21,56:$V31,78:[1,538],87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,539],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{25:103,30:108,35:$Vz,44:$VA,46:540,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($VF1,[2,173]),o($Vn,[2,38]),{25:103,30:108,35:$Vz,44:$VA,46:541,53:$VB,56:$VC,57:106,91:$VD,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:87,99:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,115:$VQ,116:$VR,117:$VS,118:$VT,119:$VU,120:$VV,121:101,122:$VW,123:105,124:107},o($VF1,[2,168]),{36:[1,542],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},{36:[1,543],55:$V21,56:$V31,87:$V41,88:$V51,89:$V61,90:$V71,98:$V81,107:$V91,108:$Va1,109:$Vb1,110:$Vc1,111:$Vd1,112:$Ve1,113:$Vf1,114:$Vg1,133:$Vh1},o($VF1,[2,172]),o($VF1,[2,167])],
defaultActions: {50:[2,1],496:[2,45],497:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  
  
  const { Simbolo   } = require('../table/simbolo');
  //Instrucciones
    const { Print   } = require('../instruccion/print');
    const { D_IdExp } = require('../instruccion/declaracion_idexp');
    const { D_Id    } = require('../instruccion/declaracion_id');
    const { Funcion } = require('../instruccion/funcion');
    const { Llamada } = require ('../instruccion/llamada');
    const { Return }  = require ('../instruccion/Return');
    const { Main }    = require ('../instruccion/main');
    const { Asignacion } = require('../instruccion/asignacion');
    const { Asignacion_VAR_STRUCT } = require('../expresiones/struct/asignacion_var_struct');
    const { Asignacion_Struct_Exp } = require('../expresiones/struct/asignacion_struct_exp');
    const { Asignacion_Mas } = require('../instruccion/asignacion_mas');
    const { List_Declaracion } = require('../instruccion/list_declaracion');
    //List_Declaracion
    const { Modificar }  = require('../expresiones/array/modificar_array');
    const { Acceso }     = require('../expresiones/array/acceso');
    const { Pop } = require('../expresiones/array/pop');
    const { Pop_List } = require('../expresiones/array/pop_list');
    const { Push_List } = require('../expresiones/array/push_list');
    const { Push } = require('../expresiones/array/push');
    const { Rango } = require('../expresiones/array/rango');
    const { Begin_Rango } = require('../expresiones/array/begin_rango');
    const { Fin_Rango } = require('../expresiones/array/fin_rango');
    const { Rango_Complete } = require('../expresiones/array/rango_complete');
    const { Seno_Arr } = require('../expresiones/array/operaciones/seno');
    const { Cos_Arr } = require('../expresiones/array/operaciones/cos');
    const { Tan_Arr } = require('../expresiones/array/operaciones/tan');
    
    const { Multiplicacion_Arr } = require('../expresiones/array/operaciones/multiplicacion');
    const { Division_Arr } = require('../expresiones/array/operaciones/division');
    const { Suma_Arr } = require('../expresiones/array/operaciones/suma');
    const { Resta_Arr } = require('../expresiones/array/operaciones/resta');
    //Tipos
    const { Primitivo } = require('../expresiones/primitivo');
    
    //Enumerados        
    const { ARITMETICO } = require('../table/tipo');
    const { RELACIONAL } = require('../table/tipo');
    const { LOGICO} = require('../table/tipo');
    const { TIPO } = require('../table/tipo');
    
    
    //relacionales
    const { Diff } = require('../expresiones/relacional/dif');
    const { IgualIgual } = require('../expresiones/relacional/igual_igual');
    const { MayorIgual } = require('../expresiones/relacional/mayor_igual');
    const { Mayor } = require('../expresiones/relacional/mayor');
    const { MenorIgual } = require('../expresiones/relacional/menor_igual');
    const { Menor } = require('../expresiones/relacional/menor');
    const {Identificador} = require('../expresiones/identificador');
    const { Ternario } = require('../expresiones/ternario/ternario');
    //logicos
    const { And } = require('../expresiones/logico/and');
    const { Or } = require('../expresiones/logico/or');
    const { Not } = require('../expresiones/logico/not');
    
    //Operaciones Aritmeticas
    const { Suma} = require('../expresiones/artimetica/suma');
    const { Resta} = require('../expresiones/artimetica/resta');
    const { Multiplicar} = require('../expresiones/artimetica/multiplicar');
    const { Division } = require('../expresiones/artimetica/division');
    const { Modulo} = require('../expresiones/artimetica/modulo');
    const { NegacionNum} = require('../expresiones/artimetica/negacion_numero');    
    const { Potencia } = require('../expresiones/artimetica/potencia');    
    
    const { Arreglo } = require('../expresiones/array/declarar_array')
    //Arreglo_Valor
    const { Arreglo_Valor } = require('../expresiones/array/array_valor')
    const { DecrementoVariable} = require('../expresiones/artimetica/decremento_variable');
    const { IncrementoVariable} = require('../expresiones/artimetica/Incremento_variable');

    //nativas
    const { Seno} = require('../expresiones/nativas/seno');
    const { Coseno} = require('../expresiones/nativas/coseno');
    const { Tangente} = require('../expresiones/nativas/tangente');
    const { Sqrt} = require('../expresiones/nativas/sqrt');
    const { Pow} = require('../expresiones/nativas/pow');
    const { Log} = require('../expresiones/nativas/log');
    const { NativasString} = require('../expresiones/nativas/nativas_string');
    const { RepeticionCadena} = require('../expresiones/nativas/repeticion_cadena');
    const { TIPO_NATIVA_CADENA} = require('../expresiones/nativas/tiponativacadena');
    const { Casteos} = require('../expresiones/nativas/casteos');
    const { CasteosTo} = require('../expresiones/nativas/casteos_to');


    const { Struct }          = require('../expresiones/struct/struct')
    const { Dec_Struct }      = require('../expresiones/struct/instancia_struct')
    const { Atributo }        = require('../expresiones/struct/atributo')
    const { Acceso_Struct }   = require('../expresiones/struct/acceso_struct')
    //JAMES
    const { If } = require('../instruccion/if');
    const { Switch } = require('../instruccion/switch');
    const { Case } = require('../instruccion/case');
    const { Default } = require('../instruccion/default');
    const { Break } = require('../instruccion/break');
    const { For } = require('../instruccion/for');
    const { ForEach } = require('../instruccion/for_each');
    const { While } = require('../instruccion/while');
    const { DoWhile } = require('../instruccion/do_while');
    const { Continue } = require('../instruccion/continue');
    const { Excepcion } = require('../table/excepcion');
    const { Reporte } = require('./reporte');
    const { Graficar } = require('../instruccion/graficar');
    

    const reporte=new Reporte();

    var reporteGramatical =reporte.reporteGramatical;
    var reporte_error =[];


    // function reportarError(tipo,descripccion,linea,columna){
    //     errores.push({tipo:tipo,descripccion:descripccion,linea:linea,columna:columna});
    // }
    function addReporte(produccion,regla){
        reporte.reporteGramatical.push({produccion:produccion,regla:regla});
    }

    //METODOS GET PARA REPORTE DE ERRORES Y GRAMATICAL
    function getReporteError(){
      return reporte_error;
    }
    function setReporte(){
      reporte_error=[];
    }
    function getReporteGramatical(){
      return reporteGramatical;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:// comentario simple
break;
case 2:// comentario multiple líneas
break;
case 3:return 106;
break;
case 4:return 106;
break;
case 5:return 99;
break;
case 6:return 101;
break;
case 7:return 102;
break;
case 8:return 33;
break;
case 9:return 81;
break;
case 10:return 'const';
break;
case 11:return 41;
break;
case 12:return 39;
break;
case 13:return 74;
break;
case 14:return 128;
break;
case 15:return 131;
break;
case 16:return 69;
break;
case 17:return 120;
break;
case 18:return 70;
break;
case 19:return 71;
break;
case 20:return 68;
break;
case 21:return 60;
break;
case 22:return 64;
break;
case 23:return 66;
break;
case 24:return 67;
break;
case 25:return 45;
break;
case 26:return 47;
break;
case 27:return 48;
break;
case 28:return 51;
break;
case 29:return 140;
break;
case 30:return 91;
break;
case 31:return 96;
break;
case 32:return 92;
break;
case 33:return 93;
break;
case 34:return 94;
break;
case 35:return 95;
break;
case 36:return 98;
break;
case 37:return 125;
break;
case 38:return 127;
break;
case 39:return 129;
break;
case 40:return 130;
break;
case 41:return 100;
break;
case 42:return 103;
break;
case 43:return 104;
break;
case 44:return 105;
break;
case 45:return 118;
break;
case 46:return 119;
break;
case 47:return 131;
break;
case 48:return 74;
break;
case 49:return 34;
break;
case 50:return 138;
break;
case 51:return 139;
break;
case 52:return 117;
break;
case 53:return 116;
break;
case 54:return 44;
break;
case 55:return  'punto_coma';
break;
case 56:return 78;
break;
case 57:return 65;
break;
case 58:return 73;
break;
case 59:return 37;
break;
case 60:return 38;
break;
case 61:return 35;
break;
case 62:return 36;
break;
case 63:return 53;
break;
case 64:return 54;
break;
case 65:return 58;
break;
case 66:return 55;
break;
case 67:return 59
break;
case 68:return 56;
break;
case 69:return 'potencia';
break;
case 70:return 88;
break;
case 71:return 89;
break;
case 72:return 90;
break;
case 73:return 110;
break;
case 74:return 109;
break;
case 75:return 107;
break;
case 76:return 108;
break;
case 77:return 111;
break;
case 78:return 52;
break;
case 79:return 112;
break;
case 80:return 113;
break;
case 81:return 87;
break;
case 82:return 114;
break;
case 83:return 115;
break;
case 84:return 133;
break;
case 85:return 137;
break;
case 86: yy_.yytext = yy_.yytext.slice(1,-1); return 106; 
break;
case 87: yy_.yytext = yy_.yytext.slice(1,-1); return 106; 
break;
case 88:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);

  addReporte('Lexico',`El valor ${yy_.yytext} no se reconoce `,`${yy_.yylineno + 1}`,`${yy_.yylloc.first_column + 1}`)

  
break;
case 89:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:string\b)/,/^(?:String\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:struct\b)/,/^(?:const\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:graficar_ts\b)/,/^(?:sin\b)/,/^(?:log10\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:pow\b)/,/^(?:\^)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:main\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:#)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this)}).call(this,require('_process'))
},{"../expresiones/array/acceso":6,"../expresiones/array/array_valor":7,"../expresiones/array/begin_rango":8,"../expresiones/array/declarar_array":9,"../expresiones/array/fin_rango":10,"../expresiones/array/modificar_array":11,"../expresiones/array/operaciones/cos":12,"../expresiones/array/operaciones/division":13,"../expresiones/array/operaciones/multiplicacion":14,"../expresiones/array/operaciones/resta":15,"../expresiones/array/operaciones/seno":16,"../expresiones/array/operaciones/suma":17,"../expresiones/array/operaciones/tan":18,"../expresiones/array/pop":19,"../expresiones/array/pop_list":20,"../expresiones/array/push":21,"../expresiones/array/push_list":22,"../expresiones/array/rango":23,"../expresiones/array/rango_complete":24,"../expresiones/artimetica/Incremento_variable":25,"../expresiones/artimetica/decremento_variable":26,"../expresiones/artimetica/division":27,"../expresiones/artimetica/modulo":28,"../expresiones/artimetica/multiplicar":29,"../expresiones/artimetica/negacion_numero":30,"../expresiones/artimetica/potencia":31,"../expresiones/artimetica/resta":32,"../expresiones/artimetica/suma":33,"../expresiones/identificador":34,"../expresiones/logico/and":35,"../expresiones/logico/not":36,"../expresiones/logico/or":37,"../expresiones/nativas/casteos":38,"../expresiones/nativas/casteos_to":39,"../expresiones/nativas/coseno":40,"../expresiones/nativas/log":41,"../expresiones/nativas/nativas_string":42,"../expresiones/nativas/pow":43,"../expresiones/nativas/repeticion_cadena":44,"../expresiones/nativas/seno":45,"../expresiones/nativas/sqrt":46,"../expresiones/nativas/tangente":47,"../expresiones/nativas/tiponativacadena":48,"../expresiones/primitivo":49,"../expresiones/relacional/dif":50,"../expresiones/relacional/igual_igual":51,"../expresiones/relacional/mayor":52,"../expresiones/relacional/mayor_igual":53,"../expresiones/relacional/menor":54,"../expresiones/relacional/menor_igual":55,"../expresiones/struct/acceso_struct":56,"../expresiones/struct/asignacion_struct_exp":58,"../expresiones/struct/asignacion_var_struct":59,"../expresiones/struct/atributo":60,"../expresiones/struct/instancia_struct":61,"../expresiones/struct/struct":62,"../expresiones/ternario/ternario":63,"../instruccion/Return":65,"../instruccion/asignacion":68,"../instruccion/asignacion_mas":69,"../instruccion/break":70,"../instruccion/case":71,"../instruccion/continue":72,"../instruccion/declaracion_id":73,"../instruccion/declaracion_idexp":74,"../instruccion/default":75,"../instruccion/do_while":76,"../instruccion/for":77,"../instruccion/for_each":78,"../instruccion/funcion":79,"../instruccion/graficar":80,"../instruccion/if":81,"../instruccion/list_declaracion":82,"../instruccion/llamada":83,"../instruccion/main":84,"../instruccion/print":85,"../instruccion/switch":86,"../instruccion/while":87,"../table/excepcion":115,"../table/simbolo":116,"../table/tipo":118,"./reporte":4,"_process":107,"fs":90,"path":106}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reporte = void 0;
class Reporte {
    constructor() {
        this.reporteGramatical = [{}];
    }
}
exports.Reporte = Reporte;

},{}],5:[function(require,module,exports){
(function (process){(function (){
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var variable = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[5,7,11,12,13],$V5=[1,13],$V6=[1,12],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,36],$Vs=[1,38],$Vt=[1,46],$Vu=[1,44],$Vv=[1,45],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,55],$VF=[1,56],$VG=[1,57],$VH=[1,58],$VI=[1,59],$VJ=[10,14,15,16,17,18,19,23,29,32,42,43,44,45,46,47,48,49,61,65,76,82],$VK=[10,14,15,16,23,29,42,43,44,45,46,47,48,49,61,65,76,82],$VL=[10,23,29,48,49,61,65,76,82],$VM=[29,61],$VN=[10,23,29,42,43,44,45,46,47,48,49,61,65,76,82],$VO=[10,23,29,46,47,48,49,61,65,76,82],$VP=[1,216],$VQ=[1,237],$VR=[10,14,15,16,17,18,19,23,29,32,34,42,43,44,45,46,47,48,49,61,65,76,82];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"dolar":7,"llave_abierta":8,"EXP":9,"llave_cerrada":10,"id":11,"esp":12,"id2":13,"menos":14,"mas":15,"mass":16,"por":17,"div":18,"mod":19,"mas_mas":20,"menos_menos":21,"par_abierto":22,"par_cerrado":23,"sin":24,"cos":25,"tan":26,"sqrt":27,"pow":28,"coma":29,"log10":30,"NATIVA_STRING":31,"repeticion":32,"int":33,"punto":34,"parse":35,"double":36,"boolean":37,"toInt":38,"toDouble":39,"typeof":40,"string":41,"mayor":42,"menor":43,"mayor_igual":44,"menor_igual":45,"igual_que":46,"dif_que":47,"and":48,"or":49,"not":50,"entero":51,"decimal":52,"true":53,"false":54,"null":55,"ACCESO_ARREGLO":56,"ARRAY_LENGTH":57,"ARRAY_POP":58,"corchete_abierto":59,"LISTA_EXPRESIONES":60,"corchete_cerrado":61,"ARRAY_METHOD":62,"ACCESO_TYPE":63,"igual":64,"punto_coma":65,"TERNARIO":66,"LLAMADA_FUNCION_EXP":67,"toLowercase":68,"NATIVA_STRING2":69,"toUppercase":70,"length":71,"subString":72,"caracterOfPosition":73,"EXPS_CORCHETE":74,"begin":75,"dos_puntos":76,"end":77,"pop":78,"push":79,"nmral":80,"LISTA_ACCESOS_TYPE":81,"interrogacion":82,"PARAMETROS_LLAMADA":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"dolar",8:"llave_abierta",10:"llave_cerrada",11:"id",12:"esp",13:"id2",14:"menos",15:"mas",16:"mass",17:"por",18:"div",19:"mod",20:"mas_mas",21:"menos_menos",22:"par_abierto",23:"par_cerrado",24:"sin",25:"cos",26:"tan",27:"sqrt",28:"pow",29:"coma",30:"log10",32:"repeticion",33:"int",34:"punto",35:"parse",36:"double",37:"boolean",38:"toInt",39:"toDouble",40:"typeof",41:"string",42:"mayor",43:"menor",44:"mayor_igual",45:"menor_igual",46:"igual_que",47:"dif_que",48:"and",49:"or",50:"not",51:"entero",52:"decimal",53:"true",54:"false",55:"null",57:"ARRAY_LENGTH",59:"corchete_abierto",61:"corchete_cerrado",64:"igual",65:"punto_coma",68:"toLowercase",70:"toUppercase",71:"length",72:"subString",73:"caracterOfPosition",74:"EXPS_CORCHETE",75:"begin",76:"dos_puntos",77:"end",78:"pop",79:"push",80:"nmral",81:"LISTA_ACCESOS_TYPE",82:"interrogacion",83:"PARAMETROS_LLAMADA"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,1],[6,1],[6,1],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,4],[9,4],[9,4],[9,4],[9,6],[9,4],[9,1],[9,3],[9,6],[9,6],[9,6],[9,4],[9,4],[9,4],[9,4],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,1],[9,2],[9,1],[9,4],[9,1],[9,1],[31,6],[31,6],[31,6],[31,6],[31,6],[31,6],[31,9],[31,9],[31,7],[31,7],[31,5],[31,5],[31,5],[31,5],[31,5],[31,5],[31,8],[31,8],[31,6],[31,6],[69,5],[69,5],[69,5],[69,8],[69,6],[69,4],[69,4],[69,4],[69,7],[69,5],[56,2],[56,6],[56,6],[56,6],[56,6],[58,5],[58,6],[58,6],[58,7],[60,3],[60,1],[62,4],[62,4],[62,4],[62,4],[62,5],[62,5],[62,5],[63,2],[66,5],[67,3],[67,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;   
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
  this.$ = [$$[$0]];   
break;
case 4:
 this.$=$$[$0-1]; 
break;
case 5: case 6:
 this.$ = new Primitivo(TIPO.CADENA,$$[$0],_$[$0].firt_line,_$[$0].firt_column); 
break;
case 7:
 this.$ = new Identificador($$[$0].slice(1),_$[$0].firt_line,_$[$0].firt_column);   
break;
case 8:
  this.$ = new NegacionNum(6,$$[$0],0,_$[$0-1].firt_line,_$[$0-1].firt_column);   
break;
case 9:
 this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 10:
  this.$ = new Suma(0,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);         
break;
case 11:
  this.$ = new Resta(1,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 12:
  this.$ = new Multiplicar(2,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 13:
  this.$ = new Division(3,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);     
break;
case 14:
  this.$ = new Modulo(5,$$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 15:
  this.$=new IncrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 16:
  this.$=new DecrementoVariable($$[$0-1],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 17:
  this.$ = $$[$0-1]  
break;
case 18:
  this.$ = new Seno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 19:
  this.$ = new Coseno($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 20:
  this.$ = new Tangente($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 21:
 this.$ = new Sqrt($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 22:
 this.$ = new Pow($$[$0-3],$$[$0-1],_$[$0-5].firt_line,_$[$0-5].firt_column);  
break;
case 23:
  this.$ = new Log($$[$0-1],_$[$0-3].firt_line,_$[$0-3].firt_column);  
break;
case 24:
this.$=$$[$0];
break;
case 25:
  this.$= new RepeticionCadena($$[$0-2],TIPO_NATIVA_CADENA.REPETICION,$$[$0],null,_$[$0-2].firt_line,_$[$0-2].firt_column); 
break;
case 26:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.INTPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 27:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.DOUBLEPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 28:
 this.$=new Casteos($$[$0-1],TIPO_NATIVA_CADENA.BOOLEANPARSE,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 29:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOINT,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 30:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TODOUBLE,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 31:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TYPEOF,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 32:
 this.$=new CasteosTo($$[$0-1],TIPO_NATIVA_CADENA.TOSTRING,_$[$0-3].firt_line,_$[$0-3].firt_column); 
break;
case 33:
 this.$ = new Mayor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 34:
 this.$ = new Menor($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);       
break;
case 35:
 this.$ = new MayorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 36:
 this.$ = new MenorIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 37:
 this.$ = new IgualIgual($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 38:
 this.$ = new Diff($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);        
break;
case 39:
  this.$ = new And($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);   
break;
case 40:
 this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].firt_line,_$[$0-2].firt_column);  
break;
case 41:
  this.$ = new Not($$[$0],_$[$0-1].firt_line,_$[$0-1].firt_column);  
break;
case 42:
 this.$ = new Primitivo(0,$$[$0],_$[$0].firt_line,_$[$0].firt_column); 
break;
case 43:
 this.$ = new Primitivo(TIPO.DECIMAL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);
break;
case 44:
 this.$ = new Primitivo(TIPO.CADENA,$$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 45:
 this.$ = new Identificador($$[$0],_$[$0].firt_line,_$[$0].firt_column);   
break;
case 46:
 this.$ = new Primitivo(TIPO.BOOLEAN,true,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 47:
 this.$ = new Primitivo(TIPO.BOOLEAN,false,_$[$0].firt_line,_$[$0].firt_column);   
break;
case 48:
 this.$ = new Primitivo(TIPO.NULL,$$[$0],_$[$0].firt_line,_$[$0].firt_column);  
break;
case 49: case 50: case 51: case 53:
 this.$ = $$[$0]; 
break;
case 52:
 this.$ = $$[$0-1]; 
break;
case 54:
    
break;
case 55:
 this.$ = $$[$0];   
break;
case 56:
  this.$ = new Asignacion_Struct_Exp($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 57:
  this.$ = $$[$0];  
break;
case 58:
  this.$ = $$[$0]  
break;
case 59:
  this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 60:
  this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 61:
 this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 62:
 this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 63:
 this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 64:
 this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-5].firt_line,_$[$0-5].firt_column,$$[$0]); 
break;
case 65:
 this.$= new NativasString(new Identificador($$[$0-8],_$[$0-8].firt_line,_$[$0-8].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 66:
 this.$= new NativasString($$[$0-8],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-4],$$[$0-2],_$[$0-8].firt_line,_$[$0-8].firt_column,$$[$0]); 
break;
case 67:
 this.$= new NativasString(new Identificador($$[$0-6],_$[$0-6].firt_line,_$[$0-6].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 68:
 this.$= new NativasString($$[$0-6],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-2],null,_$[$0-6].firt_line,_$[$0-6].firt_column,$$[$0]); 
break;
case 69:
 this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 70:
 this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 71:
  this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 72:
 ; this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 73:
  this.$= new NativasString(new Identificador($$[$0-4],_$[$0-4].firt_line,_$[$0-4].firt_column),TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 74:
  this.$= new NativasString($$[$0-4],TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column); 
break;
case 75:
  this.$= new NativasString(new Identificador($$[$0-7],_$[$0-7].firt_line,_$[$0-7].firt_column),TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 76:
  this.$= new NativasString($$[$0-7],TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column); 
break;
case 77:
  this.$= new NativasString(new Identificador($$[$0-5],_$[$0-5].firt_line,_$[$0-5].firt_column),TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 78:
  this.$= new NativasString($$[$0-5],TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column); 
break;
case 79:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 80:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 81:
 $$[$0-4].push(new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-4].firt_line,_$[$0-4].firt_column)); this.$=$$[$0-4]; 
break;
case 82:
 $$[$0-7].push(new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-7].firt_line,_$[$0-7].firt_column)); this.$=$$[$0-7]; 
break;
case 83:
 $$[$0-5].push(new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-5].firt_line,_$[$0-5].firt_column)); this.$=$$[$0-5]; 
break;
case 84:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOLOWER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 85:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.TOUPPER,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column)]; 
break;
case 86:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.LENGHT,null,null,_$[$0-3].firt_line,_$[$0-3].firt_column) ]; 
break;
case 87:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.SUBSTRING,$$[$0-3],$$[$0-1],_$[$0-6].firt_line,_$[$0-6].firt_column)]; 
break;
case 88:
 this.$=[new NativasString("",TIPO_NATIVA_CADENA.CARACTER_POSITION,$$[$0-1],null,_$[$0-4].firt_line,_$[$0-4].firt_column)]; 
break;
case 89:
  this.$ = new Acceso($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 90:
  this.$ = new Fin_Rango($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 91:
  this.$ = new Begin_Rango($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 92:
  this.$ = new Rango($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 93:
  this.$ = new Rango_Complete($$[$0-5],$$[$0-3] ,$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 94:
 this.$ = new Pop($$[$0-4],_$[$0-4].first_line,_$[$0-4].first_column);   
break;
case 95:
 this.$ = new Push($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);   
break;
case 96:
 this.$ = new Pop_List($$[$0-5],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);  
break;
case 97:
 this.$ = new Push_List($$[$0-6],$$[$0-5],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);   
break;
case 98:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 99:
 this.$ = [$$[$0]]; 
break;
case 100:
this.$ = new Multiplicacion_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 101:
this.$ = new Division_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 102:
this.$ = new Resta_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 103:
this.$ = new Suma_Arr($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 104:
this.$ = new Seno_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 105:
this.$ = new Cos_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 106:
this.$ = new Tan_Arr($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 107:
 this.$ = new Acceso_Struct($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);   
break;
case 108:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].firt_line,_$[$0-4].firt_column);  
break;
case 109:
 this.$ = new Llamada($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 110:
 this.$ = new Llamada($$[$0-3],_$[$0-3].first_line,_$[$0-3].first_column,$$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,11:$V1,12:$V2,13:$V3},{1:[3]},{5:[1,8],6:9,7:$V0,11:$V1,12:$V2,13:$V3},o($V4,[2,3]),{8:[1,10]},o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{1:[2,1]},o($V4,[2,2]),{9:11,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{10:[1,43],14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:60,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,45],{20:[1,61],21:[1,62],22:[1,68],34:[1,63],59:[1,65],74:[1,64],80:[1,66],81:[1,67]}),{9:69,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,70],80:[1,71]},{22:[1,72],80:[1,73]},{22:[1,74],80:[1,75]},{22:[1,76]},{22:[1,77]},{22:[1,78]},o($VJ,[2,24]),{34:[1,79]},{34:[1,80]},{34:[1,81]},{22:[1,82]},{22:[1,83]},{22:[1,84]},o($VJ,[2,44],{22:[1,85],34:[1,86]}),{9:87,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,46]),o($VJ,[2,47]),o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),{9:90,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,60:88,61:[1,89],62:39,63:40,66:41,67:42},o($VJ,[2,53]),o($VJ,[2,55],{64:[1,91]}),o($VJ,[2,57]),o($VJ,[2,58]),o($V4,[2,4]),{9:92,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:93,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:94,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:95,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:96,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:97,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:98,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:99,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:100,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:101,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:102,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:103,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:104,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:105,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:106,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:107,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VK,[2,8],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,15]),o($VJ,[2,16]),{68:[1,108],70:[1,109],71:[1,110],72:[1,111],73:[1,112],78:[1,113],79:[1,114]},o($VJ,[2,89],{34:[1,115]}),{9:117,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,75:[1,116]},{14:[1,120],15:[1,121],17:[1,118],18:[1,119]},o([10,14,15,16,17,18,19,23,29,32,42,43,44,45,46,47,48,49,61,64,65,76,82],[2,107]),{23:[1,122],83:[1,123]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,124],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:125,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,126]},{9:127,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,128]},{9:129,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,130]},{9:131,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:132,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:133,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{35:[1,134]},{35:[1,135]},{35:[1,136]},{9:137,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:138,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:139,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:140,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{68:[1,141],70:[1,142],71:[1,143],72:[1,144],73:[1,145]},o($VL,[2,41],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),{29:[1,147],61:[1,146]},o($VJ,[2,54]),o($VM,[2,99],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI}),{9:148,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VK,[2,9],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,10],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,11],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,12]),o($VJ,[2,13]),o($VJ,[2,14]),o($VJ,[2,25]),o($VN,[2,33],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,34],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,35],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VN,[2,36],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VO,[2,37],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VO,[2,38],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD}),o($VL,[2,39],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF}),o([10,23,29,49,61,65,76,82],[2,40],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,76:[1,149],82:$VI},{22:[1,150]},{22:[1,151]},{22:[1,152]},{22:[1,153]},{22:[1,154]},{22:[1,155]},{22:[1,156]},{78:[1,157],79:[1,158]},{76:[1,159]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,76:[1,160],82:$VI},{9:161,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:162,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:163,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:164,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,109]),{23:[1,165]},o($VJ,[2,17]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,166],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,167]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,168],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,169]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,170],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{11:[1,171]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,172],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,173],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,174],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{22:[1,175]},{22:[1,176]},{22:[1,177]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,178],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,179],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,180],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,181],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{22:[1,182]},{22:[1,183]},{22:[1,184]},{22:[1,185]},{22:[1,186]},o($VJ,[2,52]),{9:187,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,65:[1,188],82:$VI},{9:189,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{23:[1,190]},{23:[1,191]},{23:[1,192]},{9:193,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:194,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{23:[1,195]},{9:196,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{22:[1,197]},{22:[1,198]},{9:199,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,77:[1,200]},{9:202,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42,77:[1,201]},o($VJ,[2,100]),o($VJ,[2,101]),o($VK,[2,102],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VK,[2,103],{17:$Vw,18:$Vx,19:$Vy,32:$Vz}),o($VJ,[2,110]),o($VJ,[2,18]),{23:[1,203]},o($VJ,[2,19]),{23:[1,204]},o($VJ,[2,20]),{23:[1,205]},o($VJ,[2,21]),{9:206,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,23]),{9:207,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:208,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:209,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,29]),o($VJ,[2,30]),o($VJ,[2,31]),o($VJ,[2,32]),{23:[1,210]},{23:[1,211]},{23:[1,212]},{9:213,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:214,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VM,[2,98],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI}),o($VJ,[2,56]),o([10,23,29,61,65,76,82],[2,108],{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH}),o($VJ,[2,69],{69:215,34:$VP}),o($VJ,[2,71],{69:217,34:$VP}),o($VJ,[2,73],{69:218,34:$VP}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,219],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,220],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,94]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,221],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{23:[1,222]},{9:223,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,61:[1,224],82:$VI},{61:[1,225]},{61:[1,226]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,61:[1,227],82:$VI},o($VJ,[2,104]),o($VJ,[2,105]),o($VJ,[2,106]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,228],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,229],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,230],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,231],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,70],{69:232,34:$VP}),o($VJ,[2,72],{69:233,34:$VP}),o($VJ,[2,74],{69:234,34:$VP}),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,235],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,236],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,59],{34:$VQ}),{68:[1,238],70:[1,239],71:[1,240],72:[1,241],73:[1,242]},o($VJ,[2,61],{34:$VQ}),o($VJ,[2,63],{34:$VQ}),{9:243,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,77],{69:244,34:$VP}),o($VJ,[2,95]),o($VJ,[2,96]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,245],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,90]),o($VJ,[2,93]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,22]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,60],{34:$VQ}),o($VJ,[2,62],{34:$VQ}),o($VJ,[2,64],{34:$VQ}),{9:246,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,78],{69:247,34:$VP}),{68:[1,248],70:[1,249],71:[1,250],72:[1,251],73:[1,252]},{22:[1,253]},{22:[1,254]},{22:[1,255]},{22:[1,256]},{22:[1,257]},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,258],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,67],{34:$VQ}),o($VJ,[2,97]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,259],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,68],{34:$VQ}),{22:[1,260]},{22:[1,261]},{22:[1,262]},{22:[1,263]},{22:[1,264]},{23:[1,265]},{23:[1,266]},{23:[1,267]},{9:268,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:269,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VJ,[2,75],{69:270,34:$VP}),o($VJ,[2,76],{69:271,34:$VP}),{23:[1,272]},{23:[1,273]},{23:[1,274]},{9:275,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},{9:276,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,277],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,278],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VJ,[2,65],{34:$VQ}),o($VJ,[2,66],{34:$VQ}),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,29:[1,279],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,280],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{9:281,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,88]),{9:282,11:$V5,14:$V6,22:$V7,24:$V8,25:$V9,26:$Va,27:$Vb,28:$Vc,30:$Vd,31:21,33:$Ve,36:$Vf,37:$Vg,38:$Vh,39:$Vi,40:$Vj,41:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,55:$Vq,56:35,57:$Vr,58:37,59:$Vs,62:39,63:40,66:41,67:42},o($VR,[2,83]),{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,283],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},{14:$Vt,15:$Vu,16:$Vv,17:$Vw,18:$Vx,19:$Vy,23:[1,284],32:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,47:$VF,48:$VG,49:$VH,82:$VI},o($VR,[2,87]),o($VR,[2,82])],
defaultActions: {8:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
  
  const { Simbolo   } = require('../table/simbolo');
  //Instrucciones
    const { Print   } = require('../instruccion/print');
    const { D_IdExp } = require('../instruccion/declaracion_idexp');
    const { D_Id    } = require('../instruccion/declaracion_id');
    const { Funcion } = require('../instruccion/funcion');
    const { Llamada } = require ('../instruccion/llamada');
    const { Return }  = require ('../instruccion/Return');
    const { Main }    = require ('../instruccion/main');
    const { Asignacion } = require('../instruccion/asignacion');
    const { Asignacion_VAR_STRUCT } = require('../expresiones/struct/asignacion_var_struct');
    const { Asignacion_Struct_Exp } = require('../expresiones/struct/asignacion_struct_exp');
    const { Asignacion_Mas } = require('../instruccion/asignacion_mas');
    const { List_Declaracion } = require('../instruccion/list_declaracion');
    //List_Declaracion
    const { Modificar }  = require('../expresiones/array/modificar_array');
    const { Acceso }     = require('../expresiones/array/acceso');
    const { Pop } = require('../expresiones/array/pop');
    const { Pop_List } = require('../expresiones/array/pop_list');
    const { Push_List } = require('../expresiones/array/push_list');
    const { Push } = require('../expresiones/array/push');
    const { Rango } = require('../expresiones/array/rango');
    const { Begin_Rango } = require('../expresiones/array/begin_rango');
    const { Fin_Rango } = require('../expresiones/array/fin_rango');
    const { Rango_Complete } = require('../expresiones/array/rango_complete');
    const { Seno_Arr } = require('../expresiones/array/operaciones/seno');
    const { Cos_Arr } = require('../expresiones/array/operaciones/cos');
    const { Tan_Arr } = require('../expresiones/array/operaciones/tan');
    
    const { Multiplicacion_Arr } = require('../expresiones/array/operaciones/multiplicacion');
    const { Division_Arr } = require('../expresiones/array/operaciones/division');
    const { Suma_Arr } = require('../expresiones/array/operaciones/suma');
    const { Resta_Arr } = require('../expresiones/array/operaciones/resta');
    //Tipos
    const { Primitivo } = require('../expresiones/primitivo');
    
    //Enumerados        
    const { ARITMETICO } = require('../table/tipo');
    const { RELACIONAL } = require('../table/tipo');
    const { LOGICO} = require('../table/tipo');
    const { TIPO } = require('../table/tipo');
    
    
    //relacionales
    const { Diff } = require('../expresiones/relacional/dif');
    const { IgualIgual } = require('../expresiones/relacional/igual_igual');
    const { MayorIgual } = require('../expresiones/relacional/mayor_igual');
    const { Mayor } = require('../expresiones/relacional/mayor');
    const { MenorIgual } = require('../expresiones/relacional/menor_igual');
    const { Menor } = require('../expresiones/relacional/menor');
    const {Identificador} = require('../expresiones/identificador');
    const { Ternario } = require('../expresiones/ternario/ternario');
    //logicos
    const { And } = require('../expresiones/logico/and');
    const { Or } = require('../expresiones/logico/or');
    const { Not } = require('../expresiones/logico/not');
    
    //Operaciones Aritmeticas
    const { Suma} = require('../expresiones/artimetica/suma');
    const { Resta} = require('../expresiones/artimetica/resta');
    const { Multiplicar} = require('../expresiones/artimetica/multiplicar');
    const { Division } = require('../expresiones/artimetica/division');
    const { Modulo} = require('../expresiones/artimetica/modulo');
    const { NegacionNum} = require('../expresiones/artimetica/negacion_numero');    
    const { Potencia } = require('../expresiones/artimetica/potencia');    
    
    const { Arreglo } = require('../expresiones/array/declarar_array')
    //Arreglo_Valor
    const { Arreglo_Valor } = require('../expresiones/array/array_valor')
    const { DecrementoVariable} = require('../expresiones/artimetica/decremento_variable');
    const { IncrementoVariable} = require('../expresiones/artimetica/Incremento_variable');

    //nativas
    const { Seno} = require('../expresiones/nativas/seno');
    const { Coseno} = require('../expresiones/nativas/coseno');
    const { Tangente} = require('../expresiones/nativas/tangente');
    const { Sqrt} = require('../expresiones/nativas/sqrt');
    const { Pow} = require('../expresiones/nativas/pow');
    const { Log} = require('../expresiones/nativas/log');
    const { NativasString} = require('../expresiones/nativas/nativas_string');
    const { RepeticionCadena} = require('../expresiones/nativas/repeticion_cadena');
    const { TIPO_NATIVA_CADENA} = require('../expresiones/nativas/tiponativacadena');
    const { Casteos} = require('../expresiones/nativas/casteos');
    const { CasteosTo} = require('../expresiones/nativas/casteos_to');


    const { Struct }          = require('../expresiones/struct/struct')
    const { Dec_Struct }      = require('../expresiones/struct/instancia_struct')
    const { Atributo }        = require('../expresiones/struct/atributo')
    const { Acceso_Struct }   = require('../expresiones/struct/acceso_struct')
    //JAMES
    const { If } = require('../instruccion/if');
    const { Switch } = require('../instruccion/switch');
    const { Case } = require('../instruccion/case');
    const { Default } = require('../instruccion/default');
    const { Break } = require('../instruccion/break');
    const { For } = require('../instruccion/for');
    const { ForEach } = require('../instruccion/for_each');
    const { While } = require('../instruccion/while');
    const { DoWhile } = require('../instruccion/do_while');
    const { Continue } = require('../instruccion/continue');
    const { Excepcion } = require('../table/excepcion');
    const { Reporte } = require('./reporte');
    

    const reporte=new Reporte();

    var reporteGramatical =reporte.reporteGramatical;
    var reporte_error =[];


    // function reportarError(tipo,descripccion,linea,columna){
    //     errores.push({tipo:tipo,descripccion:descripccion,linea:linea,columna:columna});
    // }
    function addReporte(produccion,regla){
        reporte.reporteGramatical.push({produccion:produccion,regla:regla});
    }

    //METODOS GET PARA REPORTE DE ERRORES Y GRAMATICAL
    function getReporteError(){
      return reporte_error;
    }
    function getReporteGramatical(){
      return reporteGramatical;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1:// comentario multiple líneas
break;
case 2:this.begin("state1"); return 8; 
break;
case 3:return 41;
break;
case 4:return 33;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 'void';
break;
case 8:return 'struct';
break;
case 9:return 'const';
break;
case 10:return 'print';
break;
case 11:return 'println';
break;
case 12:return 79;
break;
case 13:return 71;
break;
case 14:return 78;
break;
case 15:return 'return';
break;
case 16:return 55;
break;
case 17:return 'if';
break;
case 18:return 'else';
break;
case 19:return 'break';
break;
case 20:return 'switch';
break;
case 21:return 'case';
break;
case 22:return 'default';
break;
case 23:return 'continue';
break;
case 24:return 'while';
break;
case 25:return 'do';
break;
case 26:return 'for';
break;
case 27:return 'in';
break;
case 28:return 24;
break;
case 29:return 30;
break;
case 30:return 25;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 28;
break;
case 34:return 32;
break;
case 35:return 68;
break;
case 36:return 70;
break;
case 37:return 72;
break;
case 38:return 73;
break;
case 39:return 35;
break;
case 40:return 38;
break;
case 41:return 39;
break;
case 42:return 40;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 78;
break;
case 46:return 79;
break;
case 47:return 'main';
break;
case 48:return 75;
break;
case 49:return 77;
break;
case 50:return 52;
break;
case 51:return  'punto_coma';
break;
case 52:return 29;
break;
case 53:return 76;
break;
case 54:return 34;
break;
case 55:  
break;
case 56:return 15;
break;
case 57:return 51;
break;
case 58:return 11;
break;
case 59:return 22;
break;
case 60:return 23;
break;
case 61:return 59;
break;
case 62:return 61;
break;
case 63:return 20;
break;
case 64:return 21
break;
case 65:return 14;
break;
case 66:return 'potencia';
break;
case 67:return 17;
break;
case 68:return 18;
break;
case 69:return 19;
break;
case 70:return 45;
break;
case 71:return 44;
break;
case 72:return 42;
break;
case 73:return 43;
break;
case 74:return 46;
break;
case 75:return 64;
break;
case 76:return 47;
break;
case 77:return 48;
break;
case 78:return 16;
break;
case 79:return 49;
break;
case 80:return 50;
break;
case 81:return 82;
break;
case 82:return 80;
break;
case 83: yy_.yytext = yy_.yytext.slice(1,-1); return 41; 
break;
case 84: yy_.yytext = yy_.yytext.slice(1,-1); return 41; 
break;
case 85:this.popState(); return 10;
break;
case 86:return 13;
break;
case 87:return 7;
break;
case 88:return 11;
break;
case 89:return 12;						                // espacios en blanco
break;
case 90:

  
break;
case 91:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[{])/,/^(?:string\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:struct\b)/,/^(?:const\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:push\b)/,/^(?:length\b)/,/^(?:pop\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:sin\b)/,/^(?:log10\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sqrt\b)/,/^(?:pow\b)/,/^(?:\^)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:subString\b)/,/^(?:caracterOfPosition\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:main\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\s+)/,/^(?:\+)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:#)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[}])/,/^(?:([$][a-zA-ZÀ-ÿ_$])[À-ÿ$a-zA-Z0-9_]*)/,/^(?:\$)/,/^(?:([a-zA-ZÀ-ÿ_$])[À-ÿ$a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:.)/,/^(?:$)/],
conditions: {"state1":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":false},"INITIAL":{"rules":[0,1,2,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = variable;
exports.Parser = variable.Parser;
exports.parse = function () { return variable.parse.apply(variable, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this)}).call(this,require('_process'))
},{"../expresiones/array/acceso":6,"../expresiones/array/array_valor":7,"../expresiones/array/begin_rango":8,"../expresiones/array/declarar_array":9,"../expresiones/array/fin_rango":10,"../expresiones/array/modificar_array":11,"../expresiones/array/operaciones/cos":12,"../expresiones/array/operaciones/division":13,"../expresiones/array/operaciones/multiplicacion":14,"../expresiones/array/operaciones/resta":15,"../expresiones/array/operaciones/seno":16,"../expresiones/array/operaciones/suma":17,"../expresiones/array/operaciones/tan":18,"../expresiones/array/pop":19,"../expresiones/array/pop_list":20,"../expresiones/array/push":21,"../expresiones/array/push_list":22,"../expresiones/array/rango":23,"../expresiones/array/rango_complete":24,"../expresiones/artimetica/Incremento_variable":25,"../expresiones/artimetica/decremento_variable":26,"../expresiones/artimetica/division":27,"../expresiones/artimetica/modulo":28,"../expresiones/artimetica/multiplicar":29,"../expresiones/artimetica/negacion_numero":30,"../expresiones/artimetica/potencia":31,"../expresiones/artimetica/resta":32,"../expresiones/artimetica/suma":33,"../expresiones/identificador":34,"../expresiones/logico/and":35,"../expresiones/logico/not":36,"../expresiones/logico/or":37,"../expresiones/nativas/casteos":38,"../expresiones/nativas/casteos_to":39,"../expresiones/nativas/coseno":40,"../expresiones/nativas/log":41,"../expresiones/nativas/nativas_string":42,"../expresiones/nativas/pow":43,"../expresiones/nativas/repeticion_cadena":44,"../expresiones/nativas/seno":45,"../expresiones/nativas/sqrt":46,"../expresiones/nativas/tangente":47,"../expresiones/nativas/tiponativacadena":48,"../expresiones/primitivo":49,"../expresiones/relacional/dif":50,"../expresiones/relacional/igual_igual":51,"../expresiones/relacional/mayor":52,"../expresiones/relacional/mayor_igual":53,"../expresiones/relacional/menor":54,"../expresiones/relacional/menor_igual":55,"../expresiones/struct/acceso_struct":56,"../expresiones/struct/asignacion_struct_exp":58,"../expresiones/struct/asignacion_var_struct":59,"../expresiones/struct/atributo":60,"../expresiones/struct/instancia_struct":61,"../expresiones/struct/struct":62,"../expresiones/ternario/ternario":63,"../instruccion/Return":65,"../instruccion/asignacion":68,"../instruccion/asignacion_mas":69,"../instruccion/break":70,"../instruccion/case":71,"../instruccion/continue":72,"../instruccion/declaracion_id":73,"../instruccion/declaracion_idexp":74,"../instruccion/default":75,"../instruccion/do_while":76,"../instruccion/for":77,"../instruccion/for_each":78,"../instruccion/funcion":79,"../instruccion/if":81,"../instruccion/list_declaracion":82,"../instruccion/llamada":83,"../instruccion/main":84,"../instruccion/print":85,"../instruccion/switch":86,"../instruccion/while":87,"../table/excepcion":115,"../table/simbolo":116,"../table/tipo":118,"./reporte":4,"_process":107,"fs":90,"path":106}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Acceso = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Acceso extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {Instruccion[]} list_expresiones
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(id, list_expresiones, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.list_expresiones = list_expresiones;
        this.tipo = tipo_1.TIPO.NULL;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     */
    interpretar(entorno, arbol) {
        let exist = entorno.getSimbolo(this.id); //verifico que exista la variable
        if (!exist)
            return new excepcion_1.Excepcion("Semantico", "No se encontro " + this.id, super.fila + "", super.columna + "");
        if (!exist.arreglo)
            //verifico que sea un arreglo
            new excepcion_1.Excepcion("Semantico", "No es un arragle " + this.id, super.fila + "", super.columna + "");
        let contador = this.list_expresiones.length;
        let temp = (exist.valor);
        let value_return;
        this.tipo = exist.tipo;
        if (contador == 1)
            temp = exist === null || exist === void 0 ? void 0 : exist.valor;
        this.list_expresiones.forEach((x) => {
            let index = x.interpretar(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            contador--;
            if (contador == 0) {
                if (temp instanceof Array) {
                    if (index < 0 || index > temp.length)
                        return value_return = new excepcion_1.Excepcion("Semantico", "no existe el indice indicado para el arreglo " + this.id, "" + super.fila, "" + super.columna);
                    return value_return = JSON.parse(JSON.stringify(temp[parseInt(index)]));
                }
                this.tipo = exist.tipo;
                value_return = JSON.parse(JSON.stringify(temp));
                //if()
                //value_return = new Excepcion("Semantico","no existe el indice indicado para el arreglo "+this.id,""+super.fila,""+super.columna);
                //return (value_return = JSON.parse(JSON.stringify(temp[index])));
            }
            else {
                this.tipo = exist.tipo;
                temp = (temp)[index];
            }
        });
        return value_return;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ACCESO");
        nodo.agregarHijo(this.id);
        const lista_expresiones = new nodo_1.NodoAST("LISTA EXPRESIONES");
        if (this.list_expresiones != null || this.list_expresiones != undefined) {
            this.list_expresiones.forEach((instr) => {
                lista_expresiones.agregarHijoNodo(instr.getNodo());
            });
            nodo.agregarHijoNodo(lista_expresiones);
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        let exist = entorno.getSimbolo(this.id); //verifico que exista la variable
        if (!exist)
            return new excepcion_1.Excepcion("Semantico", "No se encontro " + this.id, super.fila + "", super.columna + "");
        if (!exist.arreglo)
            //verifico que sea un arreglo
            new excepcion_1.Excepcion("Semantico", "No es un arragle " + this.id, super.fila + "", super.columna + "");
        let contador = this.list_expresiones.length;
        let temp = (exist.valor);
        let value_return;
        this.tipo = exist.tipo;
        if (contador == 1)
            temp = exist === null || exist === void 0 ? void 0 : exist.valor;
        this.list_expresiones.forEach((x) => {
            let index = x.traducir(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            principal_1.Principal.addComentario("Accediendo a un Arreglo");
            let temp = principal_1.Principal.temp;
            temp++;
            let t = "t" + temp;
            principal_1.Principal.temp = temp;
            Acceso.ACCCESO = true;
            principal_1.Principal.historial += "stack[(int)" + (principal_1.Principal.posicion + 1) + "] = " + exist.posicion + ";\n";
            principal_1.Principal.historial += "stack[(int)" + (principal_1.Principal.posicion + 2) + "] = " + index + ";\n";
            principal_1.Principal.historial += "P = " + (principal_1.Principal.posicion + 1) + ";\n";
            principal_1.Principal.historial += "acces();\n";
            principal_1.Principal.historial += t + " = P;\nprintString();\n";
            value_return = t + "/* esta es la referencia del heap*/";
            // contador--;
            // if (contador == 0) {
            //   if (temp instanceof Array) {
            //     if (index < 0 || index > temp.length)
            //       return value_return = new Excepcion("Semantico", "no existe el indice indicado para el arreglo " + this.id, "" + super.fila, "" + super.columna);
            //     return value_return = JSON.parse(JSON.stringify(temp[parseInt(index)]));
            //   }
            //   this.tipo = exist.tipo;
            //   value_return = JSON.parse(JSON.stringify(temp));
            //   //if()
            //   //value_return = new Excepcion("Semantico","no existe el indice indicado para el arreglo "+this.id,""+super.fila,""+super.columna);
            //   //return (value_return = JSON.parse(JSON.stringify(temp[index])));
            // } else {
            //   this.tipo = exist.tipo;
            //   temp = (temp)[index];
            // }
        });
        return value_return;
        //return value_return;
    }
}
exports.Acceso = Acceso;
Acceso.ACCCESO = false;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Arreglo_Valor = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
class Arreglo_Valor extends Instruccion_1.Instruccion {
    constructor(tipo, id, id_valor, fila, columna) {
        super(fila, columna);
        this.tipo = tipo;
        this.id = id;
        this.id_valor = id_valor;
    }
    interpretar(entorno, arbol) {
        let simbolo = entorno.getSimbolo(this.id_valor);
        if (simbolo == undefined) {
            return new excepcion_1.Excepcion("Semantico", "No se encuentra el Array: " + this.id_valor, "" + this.fila, this.columna + "");
        }
        if (!simbolo.arreglo)
            return new excepcion_1.Excepcion("Semantico", "No es un Array: " + this.id_valor, "" + this.fila, this.columna + "");
        if (this.tipo != simbolo.tipo)
            return new excepcion_1.Excepcion("Semantico", "No Coinciden los tipos " + this.id_valor, "" + this.fila, this.columna + "");
        let sim = entorno.getSimbolo(this.id);
        if (sim == undefined) {
            let value = JSON.parse(JSON.stringify(simbolo.valor));
            let new_array = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, value, true, false);
            entorno.addSimbolo(new_array);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("VALOR ARRAY");
        nodo.agregarHijo(this.id);
        nodo.agregarHijo(this.id_valor);
        return nodo;
    }
}
exports.Arreglo_Valor = Arreglo_Valor;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Begin_Rango = void 0;
const util_1 = require("util");
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
class Begin_Rango extends Instruccion_1.Instruccion {
    constructor(id, fin, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fin = fin;
    }
    interpretar(entorno, arbol) {
        let final_value = this.fin.interpretar(entorno, arbol);
        if (final_value instanceof excepcion_1.Excepcion)
            return final_value;
        if (!final_value)
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion ", this.fila + "", this.columna + "");
        final_value = Number(final_value);
        if (!(0, util_1.isNumber)(final_value))
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion  numerica", this.fila + "", this.columna + "");
        let array_val = entorno.getSimbolo(this.id);
        if (!(array_val instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Semantico", " Error al transpilar ", this.fila + "", this.columna + "");
        if (!array_val.arreglo)
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(array_val.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(final_value <= array_val.valor.length && final_value >= 0))
            return new excepcion_1.Excepcion("Semantico", " expresion final excede la longitud del arreglo ", this.fila + "", this.columna + "");
        return array_val.valor.slice(0, final_value);
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("BEGIN:");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.fin.getNodo());
        return nodo;
    }
}
exports.Begin_Rango = Begin_Rango;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116,"util":110}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Arreglo = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Arreglo extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {TIPO} tipo
     * @param  {TIPO} t_esperado
     * @param  {number} corchete
     */
    constructor(tipo, id, lst_expresiones, t_esperado, corchete, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.lst_expresiones = lst_expresiones;
        this.tipo = tipo;
        this.t_esperado = t_esperado;
        this.corchete = corchete;
    }
    /**para array's de tipo int[] a = [lista_expresion]
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        let value_array = [];
        this.lst_expresiones.forEach((x) => {
            let result_value;
            if (x instanceof Instruccion_1.Instruccion) {
                result_value = x.interpretar(entorno, arbol);
                if (x.tipo != this.tipo) {
                    console.log("x.tipo != this.tipo", x.tipo != this.tipo, x.tipo, this.tipo);
                    return new excepcion_1.Excepcion("Semantico", "Se esta asigando un tipo de valor inesperado", "" + super.fila, "" + this.columna);
                }
            }
            else {
                result_value = this.copyExpDeep(entorno, arbol, x);
            }
            if (result_value instanceof excepcion_1.Excepcion)
                return result_value;
            let value = JSON.parse(JSON.stringify(result_value));
            if (value instanceof excepcion_1.Excepcion)
                return value;
            value_array.push(value);
        });
        let value_object = JSON.parse(JSON.stringify(value_array));
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, value_object, true, false);
        entorno.addSimbolo(simbolo);
    }
    copyExpDeep(entorno, arbol, element) {
        let value_array = [];
        let result_value;
        element.forEach((x) => {
            if (!(x instanceof Instruccion_1.Instruccion)) {
                result_value = this.copyExpDeep(entorno, arbol, x);
            }
            else {
                result_value = x.interpretar(entorno, arbol);
                if (x.tipo != this.tipo) {
                    return new excepcion_1.Excepcion("Semantico", "Se esta asigando un tipo de valor inesperado", "" + super.fila, "" + this.columna);
                }
            }
            if (result_value instanceof excepcion_1.Excepcion)
                return result_value;
            let value = JSON.parse(JSON.stringify(result_value));
            if (value instanceof excepcion_1.Excepcion)
                return value;
            value_array.push(value);
        });
        return value_array;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DECLARACION ARRAY");
        const lista_expresiones = new nodo_1.NodoAST("LISTA EXPRESION");
        if (this.tipo == tipo_1.TIPO.ARREGLO) {
            nodo.agregarHijo("ARREGLO");
        }
        else if (this.tipo == tipo_1.TIPO.BOOLEAN) {
            nodo.agregarHijo("BOOLEAN");
        }
        else if (this.tipo == tipo_1.TIPO.CADENA) {
            nodo.agregarHijo("CADENA");
        }
        else if (this.tipo == tipo_1.TIPO.CARACTER) {
            nodo.agregarHijo("CARACTER");
        }
        else if (this.tipo == tipo_1.TIPO.DECIMAL) {
            nodo.agregarHijo("DECIMAL");
        }
        else if (this.tipo == tipo_1.TIPO.ENTERO) {
            nodo.agregarHijo("ENTERO");
        }
        else if (this.tipo == tipo_1.TIPO.NULL) {
            nodo.agregarHijo("NULL");
        }
        else if (this.tipo == tipo_1.TIPO.STRUCT) {
            nodo.agregarHijo("STRUCT");
        }
        else if (this.tipo == tipo_1.TIPO.VOID) {
            nodo.agregarHijo("VOID");
        }
        nodo.agregarHijo(this.id);
        if (this.lst_expresiones != null || this.lst_expresiones != undefined) {
            this.lst_expresiones.forEach((element) => {
                lista_expresiones.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(lista_expresiones);
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        principal_1.Principal.addComentario("Declarando Arreglos");
        let value_array = [];
        let temp = principal_1.Principal.temp;
        temp++;
        let th_position = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial +=
            th_position +
                "= H; //Posicion inicial que ocupara el array en  el heap\n";
        let contador = 0;
        this.lst_expresiones.forEach((x) => {
            let result_value;
            if (x.tipo != tipo_1.TIPO.CADENA)
                result_value = x.traducir(entorno, arbol);
            if (x.tipo != this.tipo) {
                console.log("x.tipo != this.tipo", x.tipo != this.tipo, x.tipo, this.tipo);
                return new excepcion_1.Excepcion("Semantico", "Se esta asigando un tipo de valor inesperado", "" + super.fila, "" + this.columna);
            }
            //verificar si es una cadena
            if (x.tipo == tipo_1.TIPO.CADENA) {
                this.transform_cadena(x.value, contador);
                contador--;
            }
            else {
                //let value = JSON.parse(JSON.stringify(result_value));
                principal_1.Principal.historial += "heap[(int) H] = " + result_value + ";\n";
                principal_1.Principal.historial += "H = H + 1;\n";
            }
        });
        let value_object = JSON.parse(JSON.stringify(value_array));
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, value_object, true, false);
        entorno.addSimbolo(simbolo);
        principal_1.Principal.addComentario("Agregando referencia del heap en el stack");
        principal_1.Principal.historial += "heap[(int) H] = " + -1 + ";\n";
        principal_1.Principal.historial += "H = H + 1;\n";
        let temp1 = principal_1.Principal.temp;
        temp1++;
        principal_1.Principal.temp = temp1;
        let ts = "t" + temp1;
        principal_1.Principal.historial += ts + " = " + simbolo.posicion + ";\n";
        principal_1.Principal.addComentario("simbolo posicion " + simbolo.posicion);
        principal_1.Principal.historial += "stack[(int) " + simbolo.posicion + "] = " + th_position + ";\n";
        principal_1.Principal.addComentario("Fin De La De");
    }
    transform_cadena(x, contador) {
        let return_string = "";
        principal_1.Principal.addComentario("Pasando cadena al heap , '" + x + "'");
        if (!x)
            x = "Undefined";
        for (let i = 0; i < x.length; i++) {
            let item = x.charCodeAt(i);
            return_string += "heap[(int)H] = " + item + " ;\n";
            return_string += "H = H + 1;\n";
            //console.log(item);
        }
        return_string += "heap[(int)H] = -1;\n";
        return_string += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        //let temp2 = Principal.posicion+1+"";
        //return_string +="stack[(int)"+(temp2)+"] = " +t+";\n";
        principal_1.Principal.historial += return_string;
        principal_1.Principal.addComentario("Fin de pasar cadena al heap");
        //"t" + Principal.temp + " = P + " + Principal.posicion + ";\n";
        //return //temp2;
    }
}
exports.Arreglo = Arreglo;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/simbolo":116,"../../table/tipo":118}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fin_Rango = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
class Fin_Rango extends Instruccion_1.Instruccion {
    constructor(id, fin, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fin = fin;
    }
    interpretar(entorno, arbol) {
        let final_value = this.fin.interpretar(entorno, arbol);
        if (final_value instanceof excepcion_1.Excepcion)
            return final_value;
        if (!final_value)
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion ", this.fila + "", this.columna + "");
        // if (!isNumber(final_value))
        //   return new Excepcion(
        //     "Semantico",
        //     " Se requiere una expresion  numerica",
        //     this.fila + "",
        //     this.columna + ""
        //   );
        let array_val = entorno.getSimbolo(this.id);
        if (!(array_val instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Semantico", " Error al transpilar ", this.fila + "", this.columna + "");
        if (!array_val.arreglo)
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(array_val.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(final_value <= array_val.valor.length && final_value >= 0))
            return new excepcion_1.Excepcion("Semantico", " expresion final excede la longitud del arreglo ", this.fila + "", this.columna + "");
        return array_val.valor.slice(final_value, array_val.valor.length - 1);
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST(":END");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.fin.getNodo());
        return nodo;
    }
}
exports.Fin_Rango = Fin_Rango;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modificar = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
class Modificar extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {Instruccion[]} list_expresiones
     * @param  {Instruccion} exp
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(id, list_expresiones, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.list_expresiones = list_expresiones;
        this.exp = exp;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     */
    interpretar(entorno, arbol) {
        let exist = entorno.getSimbolo(this.id); //verifico que exista la variable
        if (!exist)
            return new excepcion_1.Excepcion("Semantico", "No se encontro " + this.id, super.fila + "", super.columna + "");
        if (!exist.arreglo)
            //verifico que sea un arreglo
            new excepcion_1.Excepcion("Semantico", "No es un arragle " + this.id, super.fila + "", super.columna + "");
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp; //verifico la expresion
        if (!(exist.tipo == this.exp.tipo))
            return new excepcion_1.Excepcion("Semantico", "No coinciden los tipos " + this.id, super.fila + "", super.columna + "");
        let contador = this.list_expresiones.length;
        let temp;
        if (contador == 1)
            temp = (exist === null || exist === void 0 ? void 0 : exist.valor);
        this.list_expresiones.forEach((x) => {
            let index = x.interpretar(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            contador--;
            if ((contador == 0)) {
                let val = JSON.parse(JSON.stringify(value_exp));
                if ((exist === null || exist === void 0 ? void 0 : exist.valor) instanceof Array)
                    (temp)[index] = val;
            }
            else {
                temp = (exist === null || exist === void 0 ? void 0 : exist.valor)[index];
            }
        });
    }
    modificarIndex(lst, valor, entorno, arbol) {
        this.lst.forEach((x) => {
            let index = x.interpretar(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            let val = JSON.parse(JSON.stringify(value_exp));
            if ((exist === null || exist === void 0 ? void 0 : exist.valor) instanceof Array)
                (exist === null || exist === void 0 ? void 0 : exist.valor)[index] = val;
        });
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("MODIFICAR ARRAY");
        nodo.agregarHijo(this.id);
        const pos = new nodo_1.NodoAST("POSICION");
        if (this.list_expresiones != null || this.list_expresiones != undefined) {
            this.list_expresiones.forEach((element) => {
                pos.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(pos);
        }
        return nodo;
    }
}
exports.Modificar = Modificar;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cos_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const nodo_1 = require("../../../abs/nodo");
class Cos_Arr extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.
            map((x) => Math.cos(parseFloat(x)));
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("COSENO #");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Cos_Arr = Cos_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Division_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const tipo_1 = require("../../../table/tipo");
const nodo_1 = require("../../../abs/nodo");
class Division_Arr extends Instruccion_1.Instruccion {
    constructor(id, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (!value_exp)
            return new excepcion_1.Excepcion("Internal", "valor de expresion erroneo ", this.fila + "", this.columna + "");
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (!(this.exp.tipo == tipo_1.TIPO.ENTERO))
            return new excepcion_1.Excepcion("Semantico", "Se requiere un valor numerico", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        if (value_exp == 0)
            return new excepcion_1.Excepcion("Semantico", "Error Aritmetico div/0 <-" + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => x / value_exp);
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DIVISION #");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Division_Arr = Division_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116,"../../../table/tipo":118}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Multiplicacion_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const tipo_1 = require("../../../table/tipo");
const nodo_1 = require("../../../abs/nodo");
class Multiplicacion_Arr extends Instruccion_1.Instruccion {
    constructor(id, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (!value_exp)
            return new excepcion_1.Excepcion("Internal", "valor de expresion erroneo ", this.fila + "", this.columna + "");
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (!(this.exp.tipo == tipo_1.TIPO.ENTERO))
            return new excepcion_1.Excepcion("Semantico", "Se requiere un valor numerico", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => x * value_exp);
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("MULTIPLICACION #");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Multiplicacion_Arr = Multiplicacion_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116,"../../../table/tipo":118}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resta_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const tipo_1 = require("../../../table/tipo");
const nodo_1 = require("../../../abs/nodo");
class Resta_Arr extends Instruccion_1.Instruccion {
    constructor(id, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (!value_exp)
            return new excepcion_1.Excepcion("Internal", "valor de expresion erroneo ", this.fila + "", this.columna + "");
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (!(this.exp.tipo == tipo_1.TIPO.ENTERO))
            return new excepcion_1.Excepcion("Semantico", "Se requiere un valor numerico", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => x - value_exp);
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RESTA #");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Resta_Arr = Resta_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116,"../../../table/tipo":118}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Seno_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const nodo_1 = require("../../../abs/nodo");
class Seno_Arr extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => Math.sin(x));
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("SENO #");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Seno_Arr = Seno_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Suma_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const tipo_1 = require("../../../table/tipo");
const nodo_1 = require("../../../abs/nodo");
class Suma_Arr extends Instruccion_1.Instruccion {
    constructor(id, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (!value_exp)
            return new excepcion_1.Excepcion("Internal", "valor de expresion erroneo ", this.fila + "", this.columna + "");
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (!(this.exp.tipo == tipo_1.TIPO.ENTERO))
            return new excepcion_1.Excepcion("Semantico", "Se requiere un valor numerico", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => Number(x) + Number(value_exp));
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("SUMA #");
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Suma_Arr = Suma_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116,"../../../table/tipo":118}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tan_Arr = void 0;
const Instruccion_1 = require("../../../abs/Instruccion");
const simbolo_1 = require("../../../table/simbolo");
const excepcion_1 = require("../../../table/excepcion");
const nodo_1 = require("../../../abs/nodo");
class Tan_Arr extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
    }
    interpretar(entorno, arbol) {
        let arr = entorno.getSimbolo(this.id);
        if (!(arr instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Internal", "V8 esta presentando errores", this.fila + "", this.columna + "");
        if (!arr)
            return new excepcion_1.Excepcion("Internal", "No existe ", this.fila + "", this.columna + "");
        if (!(arr.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", "Se esperaba un Arrego " + this.id, this.fila + "", this.columna + "");
        let value_result = arr.valor.map((x) => Math.tan(x));
        return value_result;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("TAN #");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Tan_Arr = Tan_Arr;

},{"../../../abs/Instruccion":1,"../../../abs/nodo":2,"../../../table/excepcion":115,"../../../table/simbolo":116}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pop = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Pop extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        let arr_value = entorno.getSimbolo(this.id);
        if (arr_value instanceof excepcion_1.Excepcion)
            return arr_value;
        if (!arr_value)
            return new excepcion_1.Excepcion("Semantico", "la variable '" + this.id + "' no existe ", "" + super.fila, "" + super.columna);
        if (!arr_value.arreglo)
            return new excepcion_1.Excepcion("Semantico", "la variable '" + this.id + "' no es un array ", "" + super.fila, "" + super.columna);
        this.tipo = arr_value.tipo;
        if (arr_value.valor instanceof Array) {
            let last_value_array = arr_value.valor[arr_value.valor.length - 1];
            arr_value.valor.pop();
            this.tipo = arr_value.tipo;
            return last_value_array;
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("POP");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Pop = Pop;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pop_List = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Pop_List extends Instruccion_1.Instruccion {
    constructor(id, list_expresiones, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.list_expresiones = list_expresiones;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        let arr_value = entorno.getSimbolo(this.id);
        if (arr_value instanceof excepcion_1.Excepcion)
            return arr_value;
        if (!arr_value)
            return new excepcion_1.Excepcion("Semantico", "la variable '" + this.id + "' no existe ", "" + super.fila, "" + super.columna);
        if (!arr_value.arreglo)
            return new excepcion_1.Excepcion("Semantico", "la variable '" + this.id + "' no es un array ", "" + super.fila, "" + super.columna);
        // this.tipo = arr_value.tipo;
        // if(arr_value.valor instanceof Array){
        //     let last_value_array = arr_value.valor[arr_value.valor.length-1];
        //     arr_value.valor.pop();
        //     this.tipo = arr_value.tipo;
        //     return last_value_array
        // }
        let contador = this.list_expresiones.length;
        let temp = arr_value.valor; //:any = undefined;
        let value_return;
        //if (contador == 1) temp = arr_value?.valor;
        this.list_expresiones.forEach((x) => {
            let index = x.interpretar(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            contador--;
            if (contador == 0) {
                if (temp instanceof Array) {
                    if (index < 0 || index > temp.length)
                        return (value_return = new excepcion_1.Excepcion("Semantico", "no existe el indice indicado para el arreglo " + this.id, "" + super.fila, "" + super.columna));
                    value_return = (temp[index])[temp[index].length - 1];
                    temp[index].pop();
                    this.tipo = arr_value.tipo;
                    return value_return;
                }
                return (value_return = new excepcion_1.Excepcion("Semantico", "El indice indicado para " + this.id + " debe ser un arreglo", "" + super.fila, "" + super.columna));
            }
            else {
                this.tipo = arr_value.tipo;
                temp = temp[index];
            }
        });
        return value_return;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("POP LIST");
        nodo.agregarHijo(this.id);
        const pos = new nodo_1.NodoAST("POSICION");
        if (this.list_expresiones != null || this.list_expresiones != undefined) {
            this.list_expresiones.forEach((element) => {
                pos.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(pos);
        }
        return nodo;
    }
}
exports.Pop_List = Pop_List;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Push = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Push extends Instruccion_1.Instruccion {
    constructor(id, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        let exp_value = this.exp.interpretar(entorno, arbol);
        if (exp_value instanceof excepcion_1.Excepcion)
            return exp_value;
        let arr_value = entorno.getSimbolo(this.id);
        //if (arr_value.tipo != this.exp.tipo) return new Excepcion("Semantico","No coinciden los tipos", super.fila+"",super.columna+"");
        if (arr_value instanceof excepcion_1.Excepcion)
            return arr_value;
        if (!arr_value)
            return new excepcion_1.Excepcion("Semantico", "la variable" + this.id + " no existe ", "" + super.fila, "" + super.columna);
        if (arr_value.tipo)
            return new excepcion_1.Excepcion("Semantico", "la variable" + this.id + " no es un array ", "" + super.fila, "" + super.columna);
        this.tipo = arr_value.tipo;
        if (arr_value.valor instanceof Array) {
            arr_value.valor.push(exp_value);
            //return last_value_array
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return true;
        }
        this.tipo = tipo_1.TIPO.NULL;
        return new excepcion_1.Excepcion("Semantico", "Push se aplica en arrays, " + this.id + " no es un array", super.fila + "", super.columna + "");
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("PUSH");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Push = Push;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Push_List = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Push_List extends Instruccion_1.Instruccion {
    constructor(id, list_expresiones, exp, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.exp = exp;
        this.list_expresiones = list_expresiones;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        let exp_value = this.exp.interpretar(entorno, arbol);
        if (exp_value instanceof excepcion_1.Excepcion)
            return exp_value;
        let arr_value = entorno.getSimbolo(this.id);
        //if (arr_value.tipo != this.exp.tipo) return new Excepcion("Semantico","No coinciden los tipos", super.fila+"",super.columna+"");
        if (arr_value instanceof excepcion_1.Excepcion)
            return arr_value;
        if (!arr_value)
            return new excepcion_1.Excepcion("Semantico", "la variable" + this.id + " no existe ", "" + super.fila, "" + super.columna);
        if (arr_value.tipo)
            return new excepcion_1.Excepcion("Semantico", "la variable" + this.id + " no es un array ", "" + super.fila, "" + super.columna);
        // this.tipo = arr_value.tipo;   
        // if(arr_value.valor instanceof Array){ 
        //     arr_value.valor.push(exp_value);
        //     //return last_value_array
        //     this.tipo = TIPO.BOOLEAN;
        //     return true;
        // }
        let contador = this.list_expresiones.length;
        let temp = arr_value.valor; //:any = undefined;
        let value_return;
        //if (contador == 1) temp = arr_value?.valor;
        this.list_expresiones.forEach((x) => {
            let index = x.interpretar(entorno, arbol);
            if (index instanceof excepcion_1.Excepcion)
                return index;
            if (!(x.tipo == tipo_1.TIPO.ENTERO))
                return new excepcion_1.Excepcion("Semantico", "Se esperaba una expresion numerica", super.fila + "", super.columna + "");
            contador--;
            if (contador == 0) {
                if (temp[index] instanceof Array) {
                    if (index < 0 || index > temp.length)
                        return (value_return = new excepcion_1.Excepcion("Semantico", "no existe el indice indicado para el arreglo " + this.id, "" + super.fila, "" + super.columna));
                    temp[index].push(exp_value);
                    this.tipo = arr_value === null || arr_value === void 0 ? void 0 : arr_value.tipo;
                    return value_return = true;
                }
                return (value_return = new excepcion_1.Excepcion("Semantico", "El indice indicado para " + this.id + " debe ser un arreglo", "" + super.fila, "" + super.columna));
            }
            else {
                this.tipo = arr_value.tipo;
                temp = temp[index];
            }
        });
        this.tipo = tipo_1.TIPO.NULL;
        return value_return;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("PUSH LIST");
        nodo.agregarHijo(this.id);
        const pos = new nodo_1.NodoAST("POSICION");
        if (this.list_expresiones != null || this.list_expresiones != undefined) {
            this.list_expresiones.forEach((element) => {
                pos.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(pos);
        }
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Push_List = Push_List;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rango = void 0;
const util_1 = require("util");
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
class Rango extends Instruccion_1.Instruccion {
    constructor(id, inicio, fin, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fin = fin;
        this.inicio = inicio;
    }
    interpretar(entorno, arbol) {
        let final_value = this.fin.interpretar(entorno, arbol);
        if (final_value instanceof excepcion_1.Excepcion)
            return final_value;
        if (!final_value)
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion ", this.fila + "", this.columna + "");
        final_value = Number(final_value);
        if (!(0, util_1.isNumber)(final_value))
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion  numerica", this.fila + "", this.columna + "");
        let init_value = this.inicio.interpretar(entorno, arbol);
        if (init_value instanceof excepcion_1.Excepcion)
            return final_value;
        if (!init_value)
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion ", this.fila + "", this.columna + "");
        init_value = Number(final_value);
        if (!(0, util_1.isNumber)(init_value))
            return new excepcion_1.Excepcion("Semantico", " Se requiere una expresion  numerica", this.fila + "", this.columna + "");
        let array_val = entorno.getSimbolo(this.id);
        if (!(array_val instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Semantico", " Error al transpilar ", this.fila + "", this.columna + "");
        if (!array_val.arreglo)
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(array_val.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(final_value <= array_val.valor.length && final_value >= 0))
            return new excepcion_1.Excepcion("Semantico", " expresion final excede la longitud del arreglo ", this.fila + "", this.columna + "");
        if ((init_value >= 0 && init_value <= array_val.valor.length))
            return array_val.valor.slice(init_value, final_value);
        return new excepcion_1.Excepcion("Semantico", " Expresiones ingresadas exceden los limites del Arreglo ", this.fila + "", this.columna + "");
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RANGO");
        const inicio = new nodo_1.NodoAST("INICIO");
        const fin = new nodo_1.NodoAST("FIN");
        nodo.agregarHijo(this.id);
        inicio.agregarHijoNodo(this.inicio.getNodo());
        fin.agregarHijoNodo(this.fin.getNodo());
        nodo.agregarHijoNodo(inicio);
        nodo.agregarHijoNodo(fin);
        return nodo;
    }
}
exports.Rango = Rango;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116,"util":110}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rango_Complete = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
class Rango_Complete extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
    }
    interpretar(entorno, arbol) {
        let array_val = entorno.getSimbolo(this.id);
        if (!(array_val instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Semantico", " Error al transpilar ", this.fila + "", this.columna + "");
        if (!array_val.arreglo)
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        if (!(array_val.valor instanceof Array))
            return new excepcion_1.Excepcion("Semantico", " No es un Arreglo ", this.fila + "", this.columna + "");
        return array_val.valor;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RANGO");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Rango_Complete = Rango_Complete;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncrementoVariable = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const primitivo_1 = require("../primitivo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class IncrementoVariable extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    /**
     * INTERPRETA DECREMENTO
     * @param entorno
     * @param arbol
     * @returns
     */
    interpretar(entorno, arbol) {
        try {
            const simbol = entorno.getSimboloJ(this.id);
            //verifica que el simbolo exista
            if (simbol != null) {
                //verifica que sea tipo numero o decimal
                if (Number(simbol.getTipo() + "") === 0 || Number(simbol.getTipo() + "") === 1) {
                    //console.log(simbol.getValor()+" GET VALOR");
                    simbol.setValor(Number(simbol.getValor()) + 1);
                    //si el simbolo existe realizar el decremento
                    entorno.actualizarSimboloEnTabla(simbol);
                }
                else {
                    return new excepcion_1.Excepcion('Semantico', `La variable ${this.id} no existe para incremento`, `${this.fila}`, `${this.columna}`);
                }
            }
            else {
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Incremento", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("INCREMENTO ++");
        nodo.agregarHijo(this.id);
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        let variable = entorno.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.ENTERO, "1", this.fila, this.columna);
        let valor = primitivo.traducir(entorno, arbol);
        let value = JSON.parse(JSON.stringify(valor));
        if (valor instanceof Array) {
            // if(variable.valor instanceof Array){
            //   variable.valor = value;
            //   e.actualizarSimboloEnTabla(variable);
            //   return ;
            // }
            return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
        }
        //let value = JSON.parse(JSON.stringify(valor));
        console.log(primitivo.tipo + " -------------------------- " + variable.tipo);
        if (primitivo.tipo != variable.tipo)
            return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
        if ((primitivo.tipo == tipo_1.TIPO.ENTERO || primitivo.tipo == tipo_1.TIPO.DECIMAL) &&
            (variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL)) {
            if (true) {
                //Principal.historial += "/*Asignacion de variable: var += exp;*/\n"
                principal_1.Principal.historial += "stack[(int)" + variable.posicion + "] = stack[(int)" + variable.posicion + "] + " + valor + ";\n";
            }
            //   else {
            //       Principal.historial += "/*Asignacion de variable: var -= exp;*/"
            //       Principal.historial += "stack[(int)"+variable.posicion+"] = stack[(int)"+variable.posicion+"] - " + valor +";\n";
            //     }
            return "";
        }
        return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
    }
}
exports.IncrementoVariable = IncrementoVariable;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118,"../primitivo":49}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecrementoVariable = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const primitivo_1 = require("../primitivo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class DecrementoVariable extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    /**
     * INTERPRETA DECREMENTO
     * @param entorno
     * @param arbol
     * @returns
     */
    interpretar(entorno, arbol) {
        try {
            const simbol = entorno.getSimboloJ(this.id);
            //verifica que el simbolo exista
            if (simbol != null) {
                //verifica que sea tipo numero o decimal
                if (Number(simbol.getTipo() + "") === 0 || Number(simbol.getTipo() + "") === 1) {
                    //console.log(simbol.getValor()+" GET VALOR");
                    simbol.setValor(Number(simbol.getValor()) - 1);
                    //si el simbolo existe realizar el decremento
                    entorno.actualizarSimboloEnTabla(simbol);
                }
                else {
                    return new excepcion_1.Excepcion('Semantico', `La variable ${this.id} no existe para decremento`, `${this.fila}`, `${this.columna}`);
                }
            }
            else {
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Decremento", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DECREMENTO --");
        nodo.agregarHijo(this.id);
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        let variable = entorno.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.ENTERO, "1", this.fila, this.columna);
        let valor = primitivo.traducir(entorno, arbol);
        let value = JSON.parse(JSON.stringify(valor));
        if (valor instanceof Array) {
            // if(variable.valor instanceof Array){
            //   variable.valor = value;
            //   e.actualizarSimboloEnTabla(variable);
            //   return ;
            // }
            return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
        }
        //let value = JSON.parse(JSON.stringify(valor));
        console.log(primitivo.tipo + " -------------------------- " + variable.tipo);
        if (primitivo.tipo != variable.tipo)
            return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
        if ((primitivo.tipo == tipo_1.TIPO.ENTERO || primitivo.tipo == tipo_1.TIPO.DECIMAL) &&
            (variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL)) {
            if (true) {
                //Principal.historial += "/*Asignacion de variable: var += exp;*/\n"
                principal_1.Principal.historial += "stack[(int)" + variable.posicion + "] = stack[(int)" + variable.posicion + "] - " + valor + ";\n";
            }
            //   else {
            //       Principal.historial += "/*Asignacion de variable: var -= exp;*/"
            //       Principal.historial += "stack[(int)"+variable.posicion+"] = stack[(int)"+variable.posicion+"] - " + valor +";\n";
            //     }
            return "";
        }
        return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
    }
}
exports.DecrementoVariable = DecrementoVariable;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118,"../primitivo":49}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Division = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Division extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //--------------------------DIVISION------------------------------
            if (this.operador === 3 /* DIV */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //verifica que el DENOMINADOR SEA MAYOR A > 0 
                if (this.obtenerVal(this.operadorDer.tipo, der) > 0) {
                    //-------ENTERO
                    //ENTERO / ENTERO
                    if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                        this.tipo = tipo_1.TIPO.DECIMAL;
                        return this.obtenerVal(this.operadorIzq.tipo, izq) / this.obtenerVal(this.operadorDer.tipo, der);
                    }
                    //ENTERO / DECIMAL
                    else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                        this.tipo = tipo_1.TIPO.DECIMAL;
                        return this.obtenerVal(this.operadorIzq.tipo, izq) / this.obtenerVal(this.operadorDer.tipo, der);
                    }
                    ////--------DECIMAL
                    //DECIMAL / ENTERO
                    else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                        this.tipo = tipo_1.TIPO.DECIMAL;
                        return this.obtenerVal(this.operadorIzq.tipo, izq) / this.obtenerVal(this.operadorDer.tipo, der);
                    }
                    //DECIMAL / DECIMAL
                    else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                        this.tipo = tipo_1.TIPO.DECIMAL;
                        return this.obtenerVal(this.operadorIzq.tipo, izq) / this.obtenerVal(this.operadorDer.tipo, der);
                    }
                }
                else {
                    return new excepcion_1.Excepcion("Semantico", `Math Error no es posible dividir sobre 0 `, `${this.fila}`, `${this.columna}`);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para division ${this.operadorIzq.tipo} / ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter division", `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO / ENTERO
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) / this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO / DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) / this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL / ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) / this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL / DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) / this.obtenerVal(this.operadorDer.tipo,der);
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para division ${this.operadorIzq.tipo} / ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Division", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = " + izquierda + " / " + derecha + ";";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("/");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("/");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.Division = Division;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modulo = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Modulo extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //------------------------------MODULO------------------------------
            if (this.operador === 5 /* MOD */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO % ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) % this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO % DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) % this.obtenerVal(this.operadorDer.tipo, der);
                }
                ////--------DECIMAL
                //DECIMAL % ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) % this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL % DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) % this.obtenerVal(this.operadorDer.tipo, der);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para modulo ${this.operadorIzq.tipo} % ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter modulo", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("%");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("%");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor modulo `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO % ENTERO
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) % this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO % DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) % this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL % ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) % this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL % DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) % this.obtenerVal(this.operadorDer.tipo,der);
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Modulo ${this.operadorIzq.tipo} % ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Modulo", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = fmod(" + izquierda + " , " + derecha + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Modulo = Modulo;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Multiplicar = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Multiplicar extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //--------------------------MULTIPLICACION------------------------------
            if (this.operador === 2 /* POR */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO * ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) * this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO * DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) * this.obtenerVal(this.operadorDer.tipo, der);
                }
                ////--------DECIMAL
                //DECIMAL * ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) * this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL * DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) * this.obtenerVal(this.operadorDer.tipo, der);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para multiplicacion ${this.operadorIzq.tipo} * ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter multiplicacion", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("*");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("*");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO * ENTERO
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) * this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO * DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) * this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL * ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) * this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL * DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) * this.obtenerVal(this.operadorDer.tipo,der);
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Multiplicacion ${this.operadorIzq.tipo} / ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Multiplicacion", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = " + izquierda + " * " + derecha + ";";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor multiplicar `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.Multiplicar = Multiplicar;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NegacionNum = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class NegacionNum extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operador === 6 /* UMENOS */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return (this.obtenerVal(this.operadorIzq.tipo, izq)) * (-1);
                }
                //DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return (this.obtenerVal(this.operadorIzq.tipo, izq)) * (-1);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para negacion numero ${this.operadorIzq.tipo} * ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter negacion numero ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("NEGACION");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en negacion `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.NegacionNum = NegacionNum;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Potencia = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Potencia extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //------------------------------POTENCIA------------------------------
            if (this.operador === 4 /* POT */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO ^ ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return Math.pow(this.obtenerVal(this.operadorIzq.tipo, izq), this.obtenerVal(this.operadorDer.tipo, der));
                }
                //ENTERO ^ DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Math.pow(this.obtenerVal(this.operadorIzq.tipo, izq), this.obtenerVal(this.operadorDer.tipo, der));
                }
                ////--------DECIMAL
                //DECIMAL ^ ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Math.pow(this.obtenerVal(this.operadorIzq.tipo, izq), this.obtenerVal(this.operadorDer.tipo, der));
                }
                //DECIMAL ^ DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Math.pow(this.obtenerVal(this.operadorIzq.tipo, izq), this.obtenerVal(this.operadorDer.tipo, der));
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para potencia ${this.operadorIzq.tipo} % ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter modulo", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("POTENCIA");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("POTENCIA");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO ^^ ENTERO
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO ^ DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL ^ ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL ^ DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Modulo ${this.operadorIzq.tipo} ^ ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Modulo", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = pow(" + izquierda + " , " + derecha + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor potencia `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.Potencia = Potencia;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resta = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Resta extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //--------------------------RESTA------------------------------
            if (this.operador === 1 /* MENOS */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO - ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO - BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBooleanq = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBooleanq = 0;
                    }
                    else {
                        valorBooleanq = 1;
                    }
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - valorBooleanq;
                }
                ////--------DECIMAL
                //DECIMAL - ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL - BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean11 = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBoolean11 = 0;
                    }
                    else {
                        valorBoolean11 = 1;
                    }
                    return this.obtenerVal(this.operadorIzq.tipo, izq) - valorBoolean11;
                }
                //----BOOLEANO
                //BOOLEAN - ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBoolean22 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean22 = 0;
                    }
                    else {
                        valorBoolean22 = 1;
                    }
                    return valorBoolean22 - this.obtenerVal(this.operadorDer.tipo, der);
                }
                //BOOLEAN - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean33 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean33 = 0;
                    }
                    else {
                        valorBoolean33 = 1;
                    }
                    return valorBoolean33 - this.obtenerVal(this.operadorDer.tipo, der);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para resta ${this.operadorIzq.tipo} - ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter resta", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("-");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("-");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en resta `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //--------------------------RESTA------------------------------
            if (this.operador === 1 /* MENOS */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO - ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return this.setAtributosC3D(izq + "", der + "");
                }
                //ENTERO - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.setAtributosC3D(izq + "", der + "");
                }
                //ENTERO - BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBooleanq = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBooleanq = 0;
                    }
                    else {
                        valorBooleanq = 1;
                    }
                    return this.setAtributosC3D(izq + "", valorBooleanq + "");
                }
                ////--------DECIMAL
                //DECIMAL - ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.setAtributosC3D(izq + "", der + "");
                }
                //DECIMAL - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.setAtributosC3D(izq + "", der + "");
                }
                //DECIMAL - BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean11 = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBoolean11 = 0;
                    }
                    else {
                        valorBoolean11 = 1;
                    }
                    return this.setAtributosC3D(izq, valorBoolean11 + "");
                    //return this.obtenerVal(this.operadorIzq.tipo,izq) -valorBoolean11;
                }
                //----BOOLEANO
                //BOOLEAN - ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBoolean22 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean22 = 0;
                    }
                    else {
                        valorBoolean22 = 1;
                    }
                    return this.setAtributosC3D(valorBoolean22 + "", der);
                    //return valorBoolean22 - this.obtenerVal(this.operadorDer.tipo,der);
                }
                //BOOLEAN - DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean33 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean33 = 0;
                    }
                    else {
                        valorBoolean33 = 1;
                    }
                    return this.setAtributosC3D(valorBoolean33 + "", der);
                    //return valorBoolean33 - this.obtenerVal(this.operadorDer.tipo,der);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para resta ${this.operadorIzq.tipo} - ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception resta", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = " + izquierda + " - " + derecha + ";";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Resta = Resta;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Suma = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Suma extends Instruccion_1.Instruccion {
    constructor(operador, operadorIzq, operadorDer, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        this.operadorDer = operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.operador = operador;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            const der = this.operadorDer.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //--------------------------SUMA------------------------------
            if (this.operador === 0 /* MAS */) {
                //validaciones
                if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA IZQ", `${this.fila}`, `${this.columna}`);
                }
                if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA DER", `${this.fila}`, `${this.columna}`);
                }
                //-------ENTERO
                //ENTERO + ENTERO
                if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO + DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //ENTERO + BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBooleanq = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBooleanq = 0;
                    }
                    else {
                        valorBooleanq = 1;
                    }
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + valorBooleanq;
                }
                //ENTERO + CADENA
                else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                ////--------DECIMAL
                //DECIMAL + ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL + DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //DECIMAL + BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean11 = 0;
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBoolean11 = 0;
                    }
                    else {
                        valorBoolean11 = 1;
                    }
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + valorBoolean11;
                }
                //DECIMAL + CADENA
                else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //----BOOLEANO
                //BOOLEAN + ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBoolean22 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean22 = 0;
                    }
                    else {
                        valorBoolean22 = 1;
                    }
                    return valorBoolean22 + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //BOOLEAN + DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    var valorBoolean33 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean33 = 0;
                    }
                    else {
                        valorBoolean33 = 1;
                    }
                    return valorBoolean33 + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //BOOLEAN + BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    var valorBoolean1 = 0;
                    var valorBoolean2 = 0;
                    if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                        valorBoolean1 = 0;
                    }
                    else {
                        valorBoolean1 = 1;
                    }
                    if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                        valorBoolean2 = 0;
                    }
                    else {
                        valorBoolean2 = 1;
                    }
                    return valorBoolean1 + valorBoolean2;
                }
                //BOOLEAN + CADENA
                else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //------CARACTER
                //CARACTER + CARACTER
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CARACTER && this.operadorDer.tipo === tipo_1.TIPO.CARACTER) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //CARACTER + CADENA
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CARACTER && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //------CADENA
                //CADENA + ENTERO
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //CADENA + DECIMAL
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //CADENA + CADENA
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //CADENA + BOOLEAN
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                //CADENA + CARACTER
                else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.CARACTER) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.obtenerVal(this.operadorIzq.tipo, izq) + this.obtenerVal(this.operadorDer.tipo, der);
                }
                return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para suma ${this.operadorIzq.tipo} + ${this.operadorDer.tipo}  `, `${this.fila}`, `${this.columna}`);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter suma ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.operadorDer != null) || (this.operadorDer != undefined)) {
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            nodo.agregarHijo("+");
            nodo.agregarHijoNodo(this.operadorDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("+");
            nodo.agregarHijoNodo(this.operadorIzq.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor suma `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.traducir(entorno, arbol);
            const der = this.operadorDer.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.operadorDer != null || this.operadorDer != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA IZQ", `${this.fila}`, `${this.columna}`);
            }
            if (this.operadorDer.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA DER", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO + ENTERO
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.ENTERO;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO + DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO + BOOLEAN
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.ENTERO;
                var valorBooleanq = 0;
                if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                    valorBooleanq = 0;
                }
                else {
                    valorBooleanq = 1;
                }
                return this.setAtributosC3D(izq + "", valorBooleanq + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) +valorBooleanq;
            }
            //ENTERO + CADENA
            else if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL + ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL + DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL + BOOLEAN
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                var valorBoolean11 = 0;
                if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                    valorBoolean11 = 0;
                }
                else {
                    valorBoolean11 = 1;
                }
                return this.setAtributosC3D(izq + "", valorBoolean11 + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) +valorBoolean11;
            }
            //DECIMAL + CADENA
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //----BOOLEANO
            //BOOLEAN + ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.ENTERO;
                var valorBoolean22 = 0;
                if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                    valorBoolean22 = 0;
                }
                else {
                    valorBoolean22 = 1;
                }
                return this.setAtributosC3D(valorBoolean22 + "", der + "");
                //return valorBoolean22+this.obtenerVal(this.operadorDer.tipo,der);
            }
            //BOOLEAN + DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                var valorBoolean33 = 0;
                if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                    valorBoolean33 = 0;
                }
                else {
                    valorBoolean33 = 1;
                }
                return this.setAtributosC3D(valorBoolean33 + "", der + "");
                //return valorBoolean33+this.obtenerVal(this.operadorDer.tipo,der);
            }
            //BOOLEAN + BOOLEAN
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.ENTERO;
                var valorBoolean1 = 0;
                var valorBoolean2 = 0;
                if (this.obtenerVal(this.operadorIzq.tipo, izq) === false) {
                    valorBoolean1 = 0;
                }
                else {
                    valorBoolean1 = 1;
                }
                if (this.obtenerVal(this.operadorDer.tipo, der) === false) {
                    valorBoolean2 = 0;
                }
                else {
                    valorBoolean2 = 1;
                }
                return this.setAtributosC3D(valorBoolean1 + "", valorBoolean2 + "");
                //return valorBoolean1+valorBoolean2;
            }
            //BOOLEAN + CADENA
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //------CARACTER
            //CARACTER + CARACTER
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CARACTER && this.operadorDer.tipo === tipo_1.TIPO.CARACTER) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //CARACTER + CADENA
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CARACTER && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //------CADENA
            //CADENA + ENTERO
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //CADENA + DECIMAL
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //CADENA + CADENA
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.CADENA) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //CADENA + BOOLEAN
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
            //CADENA + CARACTER
            else if (this.operadorIzq.tipo === tipo_1.TIPO.CADENA && this.operadorDer.tipo === tipo_1.TIPO.CARACTER) {
                this.tipo = tipo_1.TIPO.CADENA;
                return this.setAtributosC3D(izq + "", der + "");
                //return this.obtenerVal(this.operadorIzq.tipo,izq) + this.obtenerVal(this.operadorDer.tipo,der);
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Suma", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = " + izquierda + " + " + derecha + ";";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Suma = Suma;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identificador = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const excepcion_1 = require("../table/excepcion");
const nodo_1 = require("../abs/nodo");
class Identificador extends Instruccion_1.Instruccion {
    constructor(id, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            //obtenemos el tipo
            let simbol = entorno.getSimboloJ(this.id);
            if (simbol == undefined) {
                return new excepcion_1.Excepcion('Semantico', `La variable no existe ${this.id} `, `${this.fila}`, `${this.columna}`);
            }
            //establecemos el tipo
            this.tipo = simbol === null || simbol === void 0 ? void 0 : simbol.tipo;
            return simbol === null || simbol === void 0 ? void 0 : simbol.valor;
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `Error al obtener valor de identificador `, `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ID");
        nodo.agregarHijo(this.id);
        return nodo;
    }
    traducir(entorno, arbol) {
        try {
            //obtenemos el tipo
            let simbol = entorno.getSimbolo(this.id);
            //establecemos el tipo
            this.tipo = simbol === null || simbol === void 0 ? void 0 : simbol.tipo;
            //return simbol?.valor;
            if (this.tipo == tipo_1.TIPO.ENTERO)
                this.tipo = tipo_1.TIPO.DECIMAL;
            //console.log("TIpo========",simbol?.tipo);
            return "stack[(int)" + (simbol === null || simbol === void 0 ? void 0 : simbol.posicion) + "]";
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `Error al obtener valor de identificador `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.Identificador = Identificador;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../table/excepcion":115,"../table/tipo":118}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.And = void 0;
const excepcion_1 = require("../../table/excepcion");
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class And extends Instruccion_1.Instruccion {
    /**
     * @param  {Primitivo} leftExpressio
     * @param  {Primitivo} rightExpression
     * @param  {number} linea
     * @param  {number} columna
     */
    constructor(leftExpressio, rightExpression, linea, columna) {
        super(linea, columna);
        this.rightExpression = rightExpression;
        this.leftExpressio = leftExpressio;
        this.tipo = tipo_1.TIPO.NULL;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        const exp1 = this.leftExpressio.interpretar(entorno, arbol);
        const exp2 = this.rightExpression.interpretar(entorno, arbol);
        //comprobacion de errores
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.leftExpressio.tipo === tipo_1.TIPO.BOOLEAN && this.rightExpression.tipo == tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return exp1 && exp2;
        }
        console.log("ERROR EN && ");
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("LOGICA");
        if ((this.rightExpression != null) || (this.rightExpression != undefined)) {
            nodo.agregarHijoNodo(this.leftExpressio.getNodo());
            nodo.agregarHijo(" AND");
            nodo.agregarHijoNodo(this.rightExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("AND");
            nodo.agregarHijoNodo(this.leftExpressio.getNodo());
            return nodo;
        }
    }
    traducir(entorno, arbol) {
        const exp1 = this.leftExpressio.traducir(entorno, arbol);
        const exp2 = this.rightExpression.traducir(entorno, arbol);
        //comprobacion de errores
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.leftExpressio.tipo === tipo_1.TIPO.BOOLEAN && this.rightExpression.tipo == tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            let temp = principal_1.Principal.temp;
            temp++;
            let t = "t" + temp;
            principal_1.Principal.historial += t + " = " + exp1 + " && " + exp2 + ";\n";
            principal_1.Principal.temp = temp;
            return t;
        }
        console.log("ERROR EN && ");
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
}
exports.And = And;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Not = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Not extends Instruccion_1.Instruccion {
    /**
     * @param  {Primitivo} expression
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(expression, fila, columna) {
        super(fila, columna);
        this.expression = expression;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        const expression1 = this.expression.interpretar(entorno, arbol);
        if (expression1 === undefined || expression1 == null)
            return new excepcion_1.Excepcion("Semantico", "No se puede negar, indefinido", super.fila + "", super.columna + "");
        if (expression1 instanceof excepcion_1.Excepcion)
            return expression1;
        if (this.expression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return !expression1;
        }
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("LOGICA");
        nodo.agregarHijo("NOT");
        nodo.agregarHijoNodo(this.expression.getNodo());
        return nodo;
    }
    traducir(entorno, arbol) {
        const expression1 = this.expression.traducir(entorno, arbol);
        if (expression1 === undefined || expression1 == null)
            return new excepcion_1.Excepcion("Semantico", "No se puede negar, indefinido", super.fila + "", super.columna + "");
        if (expression1 instanceof excepcion_1.Excepcion)
            return expression1;
        if (this.expression.tipo === tipo_1.TIPO.BOOLEAN) {
            let temp = principal_1.Principal.temp;
            temp++;
            let t = "t" + temp;
            let value = (expression1 == true) ? 0 : 1;
            principal_1.Principal.temp = temp;
            principal_1.Principal.historial += t + " = " + value + ";\n";
            return t;
        }
        console.log("ERROR EN !  not");
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
}
exports.Not = Not;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Or = void 0;
const excepcion_1 = require("../../table/excepcion");
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Or extends Instruccion_1.Instruccion {
    /**
     * @param  {Primitivo} leftExpressio
     * @param  {Primitivo} rightExpression
     * @param  {number} linea
     * @param  {number} columna
     */
    constructor(leftExpressio, rightExpression, linea, columna) {
        super(linea, columna);
        this.rightExpression = rightExpression;
        this.leftExpressio = leftExpressio;
        this.tipo = tipo_1.TIPO.NULL;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        const exp1 = this.leftExpressio.interpretar(entorno, arbol);
        const exp2 = this.rightExpression.interpretar(entorno, arbol);
        //comprobacion de errores
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.leftExpressio.tipo === tipo_1.TIPO.BOOLEAN && this.rightExpression.tipo == tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return exp1 || exp2;
        }
        console.log("ERROR EN ||");
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("LOGICA");
        if ((this.rightExpression != null) || (this.rightExpression != undefined)) {
            nodo.agregarHijoNodo(this.leftExpressio.getNodo());
            nodo.agregarHijo("OR");
            nodo.agregarHijoNodo(this.rightExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("OR");
            nodo.agregarHijoNodo(this.leftExpressio.getNodo());
            return nodo;
        }
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        const exp1 = this.leftExpressio.traducir(entorno, arbol);
        const exp2 = this.rightExpression.traducir(entorno, arbol);
        //comprobacion de errores
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.leftExpressio.tipo === tipo_1.TIPO.BOOLEAN && this.rightExpression.tipo == tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            let temp = principal_1.Principal.temp;
            temp++;
            let t = "t" + temp;
            principal_1.Principal.temp = temp;
            principal_1.Principal.historial += t + " = " + exp1 + " || " + exp2 + ";\n";
            return exp1 || exp2;
        }
        console.log("ERROR EN ||");
        return new excepcion_1.Excepcion("Semantico", "Se requiere un tipo Boolean ", super.fila + "", super.columna + "");
    }
}
exports.Or = Or;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Casteos = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const tiponativacadena_1 = require("./tiponativacadena");
const identificador_1 = require("../identificador");
const nodo_1 = require("../../abs/nodo");
class Casteos extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param identificador
     * @param fila
     * @param columna
     */
    constructor(id, tipo_casteo, fila, columna) {
        super(fila, columna);
        this.identificador = id;
        this.tipo_casteo = tipo_casteo;
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        try {
            const test1 = this.identificador.interpretar(entorno, arbol);
            if (test1 instanceof excepcion_1.Excepcion) {
                return test1;
            }
            //VERIFICA SI ES UN IDENTIFICADOR
            if (this.identificador instanceof identificador_1.Identificador) {
                //VERIFICA QUE LA VARIABLE O ID EXISTAN
                const variable = entorno.getSimbolo(this.identificador.id + "");
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador}`, `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE SEA TIPO CADENA
                if (variable.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULL", `${this.fila}`, `${this.columna}`);
                }
                if (variable.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en Casteo variable diferente a Cadena", `${this.fila}`, `${this.columna}`);
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.INTPARSE) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return Number(this.identificador.interpretar(entorno, arbol) + "");
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.DOUBLEPARSE) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Number(this.identificador.interpretar(entorno, arbol) + "") * (1.0);
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.BOOLEANPARSE) {
                    this.tipo = tipo_1.TIPO.BOOLEAN;
                    return Boolean(this.identificador.interpretar(entorno, arbol));
                }
            }
            else {
                //verifica que la expresion sea CADENA
                const test = this.identificador.interpretar(entorno, arbol);
                if (test instanceof excepcion_1.Excepcion) {
                    return test;
                }
                if (this.identificador.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en Casteo variable diferente a Cadena", `${this.fila}`, `${this.columna}`);
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.INTPARSE) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return Number(this.identificador.interpretar(entorno, arbol) + "");
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.DOUBLEPARSE) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Number(this.identificador.interpretar(entorno, arbol) + "") * (1.0);
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.BOOLEANPARSE) {
                    try {
                        this.tipo = tipo_1.TIPO.BOOLEAN;
                        return Boolean(Number(this.identificador.interpretar(entorno, arbol)));
                    }
                    catch (error) {
                        this.tipo = tipo_1.TIPO.BOOLEAN;
                        return Boolean(this.identificador.interpretar(entorno, arbol));
                    }
                    return Boolean(this.identificador.interpretar(entorno, arbol));
                }
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("CASTEO");
        if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.BOOLEANPARSE) {
            nodo.agregarHijo("BOOLEANPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
            nodo.agregarHijo("CARACTER_POSITION");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.DOUBLEPARSE) {
            nodo.agregarHijo("DOUBLEPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.INTPARSE) {
            nodo.agregarHijo("INTPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
            nodo.agregarHijo("LENGHT");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.REPETICION) {
            nodo.agregarHijo("REPETICION");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
            nodo.agregarHijo("SUBSTRING");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TODOUBLE) {
            nodo.agregarHijo("TODOUBLE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOINT) {
            nodo.agregarHijo("TOINT");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
            nodo.agregarHijo("TOLOWER");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOSTRING) {
            nodo.agregarHijo("TOSTRING");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
            nodo.agregarHijo("TOUPPER");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TYPEOF) {
            nodo.agregarHijo("TYPEOF");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.STRING) {
            nodo.agregarHijo("STRING");
        }
        nodo.agregarHijoNodo(this.identificador.getNodo());
        return nodo;
    }
    obtenerVal(tipo_casteo, val) {
        try {
            if (tipo_casteo === tipo_1.TIPO.ENTERO || tipo_casteo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo_casteo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo_casteo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.Casteos = Casteos;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118,"../identificador":34,"./tiponativacadena":48}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CasteosTo = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const tiponativacadena_1 = require("./tiponativacadena");
const identificador_1 = require("../identificador");
const nodo_1 = require("../../abs/nodo");
class CasteosTo extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param identificador
     * @param fila
     * @param columna
     */
    constructor(id, tipo_casteo, fila, columna) {
        super(fila, columna);
        this.identificador = id;
        this.tipo_casteo = tipo_casteo;
        this.fila = fila;
        this.columna = columna;
        this.tipo = 9;
    }
    interpretar(entorno, arbol) {
        try {
            //VERIFICA SI ES UN IDENTIFICADOR
            if (this.identificador instanceof identificador_1.Identificador) {
                //VERIFICA QUE LA VARIABLE O ID EXISTAN
                const variable = entorno.getSimbolo(this.identificador.id + "");
                const test = this.identificador.interpretar(entorno, arbol);
                if (test instanceof excepcion_1.Excepcion) {
                    return test;
                }
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador}`, `${this.fila}`, `${this.columna}`);
                }
                //TIPO TYPE_OF
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TYPEOF) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (variable.tipo == tipo_1.TIPO.CADENA) {
                        return 'string';
                    }
                    else if (variable.tipo == tipo_1.TIPO.ENTERO) {
                        return 'int';
                    }
                    else if (variable.tipo == tipo_1.TIPO.DECIMAL) {
                        return 'double';
                    }
                    else if (variable.tipo == tipo_1.TIPO.BOOLEAN) {
                        return 'boolean';
                    }
                    else {
                        return 'char';
                    }
                    //return Number(this.identificador.interpretar(entorno,arbol)+"")*(1.0);
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOSTRING) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return this.identificador.interpretar(entorno, arbol) + "";
                }
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador}`, `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE SEA TIPO CADENA
                if (variable.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULL", `${this.fila}`, `${this.columna}`);
                }
                if (variable.tipo != tipo_1.TIPO.ENTERO) {
                    if (variable.tipo != tipo_1.TIPO.DECIMAL) {
                        return new excepcion_1.Excepcion("Semantico", "Error de operacion en Casteo variable diferente a NUMERO.. ", `${this.fila}`, `${this.columna}`);
                    }
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOINT) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return Number(this.identificador.interpretar(entorno, arbol) + "");
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TODOUBLE) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Number(this.identificador.interpretar(entorno, arbol) + "") * (1.0);
                }
            }
            else {
                ///////////////////////////////////////////////////////
                ///////////////////////////////////////////////////////
                //verifica que la expresion sea CADENA
                const test = this.identificador.interpretar(entorno, arbol);
                if (test instanceof excepcion_1.Excepcion) {
                    return test;
                }
                //TYPEOF
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TYPEOF) {
                    //this.tipo=TIPO.CADENA;
                    //console.log(this.identificador.tipo+"    TEST  ");
                    if (this.identificador.tipo == tipo_1.TIPO.CADENA) {
                        console.log("ES CADENA ");
                        return 'string';
                    }
                    else if (this.identificador.tipo == tipo_1.TIPO.ENTERO) {
                        return 'int';
                    }
                    else if (this.identificador.tipo == tipo_1.TIPO.DECIMAL) {
                        return 'double';
                    }
                    else if (this.identificador.tipo == tipo_1.TIPO.BOOLEAN) {
                        return 'boolean';
                    }
                    else if (this.identificador.tipo == tipo_1.TIPO.ARREGLO) {
                        return 'arreglo';
                    }
                    else {
                        console.log(this.identificador.tipo);
                        return 'char';
                    }
                }
                //realiza el to String()
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOSTRING) {
                    this.tipo = tipo_1.TIPO.CADENA;
                    return String(this.identificador.interpretar(entorno, arbol) + "");
                }
                if (this.identificador.tipo != tipo_1.TIPO.ENTERO) {
                    if (this.identificador.tipo != tipo_1.TIPO.DECIMAL) {
                        return new excepcion_1.Excepcion("Semantico", "Error de operacion en Casteo variable diferente a NUMERO", `${this.fila}`, `${this.columna}`);
                    }
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOINT) {
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return Number(this.identificador.interpretar(entorno, arbol) + "");
                }
                if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TODOUBLE) {
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    return Number(this.identificador.interpretar(entorno, arbol) + "") * (1.0);
                }
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("CASTEO");
        if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.BOOLEANPARSE) {
            nodo.agregarHijo("BOOLEANPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
            nodo.agregarHijo("CARACTER_POSITION");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.DOUBLEPARSE) {
            nodo.agregarHijo("DOUBLEPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.INTPARSE) {
            nodo.agregarHijo("INTPARSE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
            nodo.agregarHijo("LENGHT");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.REPETICION) {
            nodo.agregarHijo("REPETICION");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
            nodo.agregarHijo("SUBSTRING");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TODOUBLE) {
            nodo.agregarHijo("TODOUBLE");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOINT) {
            nodo.agregarHijo("TOINT");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
            nodo.agregarHijo("TOLOWER");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOSTRING) {
            nodo.agregarHijo("TOSTRING");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
            nodo.agregarHijo("TOUPPER");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.TYPEOF) {
            nodo.agregarHijo("TYPEOF");
        }
        else if (this.tipo_casteo == tiponativacadena_1.TIPO_NATIVA_CADENA.STRING) {
            nodo.agregarHijo("STRING");
        }
        nodo.agregarHijoNodo(this.identificador.getNodo());
        return nodo;
    }
    obtenerVal(tipo_casteo, val) {
        try {
            if (tipo_casteo === tipo_1.TIPO.ENTERO || tipo_casteo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo_casteo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo_casteo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
}
exports.CasteosTo = CasteosTo;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/tipo":118,"../identificador":34,"./tiponativacadena":48}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coseno = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Coseno extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION Cos()
     * @param operador
     * @param operadorIzq
     * @param fila
     * @param columna
     */
    constructor(operadorIzq, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //--------------------------COSENO------------------------------
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.cos(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.cos(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.cos(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Cos()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Sen() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("COSENO");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor cos() `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq)) ;
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Cos()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Cos() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = cos(" + izquierda + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Coseno = Coseno;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Log = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Log extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param operadorIzq
     * @param fila
     * @param columna
     */
    constructor(operadorIzq, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.log10(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.log10(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.log10(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para TAN()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter TAN() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("LOG");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    ///////////////////////////////////////////C3D///////////////////////////////////////
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //SQRT(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq)) ;
            }
            ////--------DECIMAL
            //SQRT(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            //SQRT(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Log()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Log() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = log10(" + izquierda + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Log = Log;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativasString = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const tiponativacadena_1 = require("./tiponativacadena");
const primitivo_1 = require("../primitivo");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
const identificador_1 = require("../identificador");
class NativasString extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param identificador
     * @param fila
     * @param columna
     */
    constructor(id, tipo, inicio, final, fila, columna, lista_nativas) {
        super(fila, columna);
        this.identificador = id;
        this.tipo_operacion = tipo;
        this.inicio = inicio;
        this.final = final;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.CADENA;
        this.lista_nativas = lista_nativas;
    }
    interpretar(entorno, arbol) {
        try {
            if (this.identificador instanceof identificador_1.Identificador) {
                //VERIFICA QUE LA VARIABLE O ID EXISTAN
                const variable = entorno.getSimbolo(this.identificador.id);
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador}`, `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE SEA TIPO CADENA
                if (variable.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULL", `${this.fila}`, `${this.columna}`);
                }
                //VERIFICACION DE OPERACIONES NATIVAS EN ARREGLOS
                if (variable.arreglo) {
                    if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                        //codigo para length
                        this.tipo = tipo_1.TIPO.ENTERO;
                        if (this.lista_nativas == null || this.lista_nativas == undefined) {
                            return variable.valor.length;
                        }
                        else {
                            //variable
                            let dato = cadena.length;
                            //ciclo
                            this.lista_nativas.forEach((x) => {
                                //new NativasString(id,tipo,inicio,fin,linea,columna);
                                const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                                const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                                dato = temp.interpretar(entorno, arbol);
                            });
                            return dato;
                        }
                    }
                }
                if (variable.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable diferente a Cadena", `${this.fila}`, `${this.columna}`);
                }
                //DETERMINA SI ES LOWER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
                    var cadena = variable.getValor() + "";
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.toLowerCase();
                    }
                    else {
                        //variable
                        let dato = cadena.toLowerCase();
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES UPPER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
                    var cadena = variable.getValor() + "";
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.toUpperCase();
                    }
                    else {
                        //variable
                        let dato = cadena.toUpperCase();
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES LENGTH
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                    if (this.tipo_operacion.tipo == tipo_1.TIPO.ARREGLO) {
                    }
                    var cadena = variable.getValor() + "";
                    this.tipo = tipo_1.TIPO.ENTERO;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.length;
                    }
                    else {
                        //variable
                        let dato = cadena.length;
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES SUBSTRING
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    const b = this.final.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    if (b instanceof excepcion_1.Excepcion) {
                        return b;
                    }
                    var cadena = variable.getValor() + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0 &&
                        this.final.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en Substring", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.substring(aa, b);
                    }
                    else {
                        //variable
                        let dato = cadena.substring(aa, b);
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES CARACTER OF POSITION
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    var cadena = variable.getValor() + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en caracterOfPosition no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en caracterOfPosition", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en caracterOfPosition fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.charAt(aa);
                    }
                    else {
                        //variable
                        let dato = cadena.charAt(aa);
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
            }
            ///
            ///
            ///
            else {
                //console.log("ENTRA AQUI"+this.identificador);
                //VERIFICA QUE LA VARIABLE O ID EXISTAN
                const variable = this.identificador;
                //DETERMINA SI ES LOWER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
                    var cadena = variable + "";
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.toLowerCase();
                    }
                    else {
                        //variable
                        var dato = cadena.toLowerCase();
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES UPPER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
                    var cadena = variable + "";
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.toUpperCase();
                    }
                    else {
                        //variable
                        let dato = cadena.toUpperCase();
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES LENGTH
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                    if (this.tipo_operacion.tipo == tipo_1.TIPO.ARREGLO) {
                    }
                    //console.log(this.tipo_operacion.tipo);
                    var cadena = variable + "";
                    this.tipo = tipo_1.TIPO.ENTERO;
                    return cadena.length;
                }
                //DETERMINA SI ES SUBSTRING
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    const b = this.final.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    if (b instanceof excepcion_1.Excepcion) {
                        return b;
                    }
                    var cadena = variable + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0 &&
                        this.final.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en Substring", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.substring(aa, b);
                    }
                    else {
                        //variable
                        let dato = cadena.substring(aa, b);
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
                //DETERMINA SI ES CARACTER OF POSITION
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    var cadena = variable + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en caracterOfPosition no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en caracterOfPosition", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en caracterOfPosition fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    this.tipo = tipo_1.TIPO.CADENA;
                    if (this.lista_nativas == null || this.lista_nativas == undefined) {
                        return cadena.charAt(aa);
                    }
                    else {
                        //variable
                        let dato = cadena.charAt(aa);
                        //ciclo
                        this.lista_nativas.forEach((x) => {
                            //new NativasString(id,tipo,inicio,fin,linea,columna);
                            const primitivo = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, dato, this.fila, this.columna);
                            const temp = new NativasString(primitivo.interpretar(entorno, arbol), x.tipo_operacion, x.inicio, x.final, this.fila, this.columna, null);
                            dato = temp.interpretar(entorno, arbol);
                        });
                        return dato;
                    }
                }
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter .toLowercase() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("NATIVAS STRING");
        if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.BOOLEANPARSE) {
            nodo.agregarHijo("BOOLEANPARSE");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
            nodo.agregarHijo("CARACTER_POSITION");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.DOUBLEPARSE) {
            nodo.agregarHijo("DOUBLEPARSE");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.INTPARSE) {
            nodo.agregarHijo("INTPARSE");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
            nodo.agregarHijo("LENGHT");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.REPETICION) {
            nodo.agregarHijo("REPETICION");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
            nodo.agregarHijo("SUBSTRING");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TODOUBLE) {
            nodo.agregarHijo("TODOUBLE");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOINT) {
            nodo.agregarHijo("TOINT");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
            nodo.agregarHijo("TOLOWER");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOSTRING) {
            nodo.agregarHijo("TOSTRING");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
            nodo.agregarHijo("TOUPPER");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TYPEOF) {
            nodo.agregarHijo("TYPEOF");
        }
        else if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.STRING) {
            nodo.agregarHijo("STRING");
        }
        nodo.agregarHijoNodo(this.identificador.getNodo());
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    ///--------------------------------------TRADUCIR------------------------------
    ///--------------------------------------TRADUCIR------------------------------
    ///--------------------------------------TRADUCIR------------------------------
    traducir(entorno, arbol) {
        try {
            //VERIFICA QUE LA VARIABLE O ID EXISTAN
            if (this.identificador instanceof identificador_1.Identificador) {
                const variable = entorno.getSimbolo(this.identificador.id);
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador.id}`, `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE SEA TIPO CADENA
                if (variable.tipo == tipo_1.TIPO.NULL) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULL", `${this.fila}`, `${this.columna}`);
                }
                //VERIFICACION DE OPERACIONES NATIVAS EN ARREGLOS
                if (variable.arreglo) {
                    if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                        //codigo para length
                        //return variable.valor.length;
                    }
                }
                if (variable.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable diferente a Cadena", `${this.fila}`, `${this.columna}`);
                }
                //DETERMINA SI ES LOWER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
                    principal_1.Principal.addComentario("=========>ToLowerCase<============");
                    principal_1.Principal.historial += "P = " + variable.posicion + ";\n";
                    principal_1.Principal.historial += "toLower();\n";
                    NativasString.LOWER = true;
                    principal_1.Principal.addComentario("=========>Fin TO ToLowerCase<============");
                    return "P";
                }
                //DETERMINA SI ES UPPER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
                    //////traduccion
                    principal_1.Principal.addComentario("=========>toUpperCase<============");
                    principal_1.Principal.historial += "P = " + variable.posicion + ";\n";
                    principal_1.Principal.historial += "toUpper();\n";
                    NativasString.UPPER = true;
                    principal_1.Principal.addComentario("=========>Fin TO Uppercase<============");
                    return "P";
                }
                //DETERMINA SI ES LENGTH
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                    if (this.tipo_operacion.tipo == tipo_1.TIPO.ARREGLO) {
                    }
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    principal_1.Principal.addComentario("=========>Length<============");
                    NativasString.LEN = true;
                    principal_1.Principal.historial += "P = " + variable.posicion + ";\n";
                    principal_1.Principal.historial += "len();\n";
                    principal_1.Principal.addComentario("=========>Fin TO Length<============");
                    return "stack[(int)P]";
                }
                //DETERMINA SI ES SUBSTRING
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
                    const aa = this.inicio.traducir(entorno, arbol);
                    const b = this.final.traducir(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    if (b instanceof excepcion_1.Excepcion) {
                        return b;
                    }
                    var cadena = variable.getValor() + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.traducir(entorno, arbol) < 0 &&
                        this.final.traducir(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en Substring", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.traducir(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    return cadena.substring(aa, b);
                }
                //DETERMINA SI ES CARACTER OF POSITION
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
                    const aa = this.inicio.traducir(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    var cadena = variable.getValor() + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en caracterOfPosition no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.traducir(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en caracterOfPosition", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.traducir(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en caracterOfPosition fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    //return cadena.charAt(this.inicio.interpretar(entorno,arbol));
                    principal_1.Principal.addComentario("=========>CharAt<============");
                    let temp = principal_1.Principal.posicion;
                    temp++;
                    NativasString.CHAR = true;
                    let tempE = principal_1.Principal.temp;
                    tempE++;
                    let t = "t" + tempE + ";\n";
                    principal_1.Principal.temp = tempE;
                    //this.inicio.traducir(entorno,arbol)
                    t = this.inicio.traducir(entorno, arbol); //obtengo el indice
                    principal_1.Principal.historial += "stack[(int)" + (temp + 1) + "] = " + (t) + ";\n"; //posicion de donde se guarda el indice
                    principal_1.Principal.historial += "P = " + (temp + 1) + ";\n";
                    principal_1.Principal.historial += "charAt();\n";
                    this.tipo = tipo_1.TIPO.CARACTER;
                    principal_1.Principal.addComentario("=========>Fin char at<============");
                    return "stack[(int)P]";
                }
            }
            else {
                //console.log("ENTRA AQUI"+this.identificador);
                //VERIFICA QUE LA VARIABLE O ID EXISTAN
                const variable = this.identificador;
                //DETERMINA SI ES LOWER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOLOWER) {
                    var cadena = variable + "";
                    //xxxxxxxxxxxxxxxxxxxxxx
                    let transf = this.transform_cadena(cadena, arbol);
                    principal_1.Principal.addComentario("=========>ToLowerCase para Cadena<============" + cadena);
                    principal_1.Principal.historial += "P = " + principal_1.Principal.posicion + ";\n";
                    principal_1.Principal.historial += "toLower();\n";
                    NativasString.LOWER = true;
                    principal_1.Principal.addComentario("=========>Fin TO ToLowerCase para Cadena<============");
                    return transf; //"P";
                }
                //DETERMINA SI ES UPPER_CASE
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.TOUPPER) {
                    var cadena = variable + "";
                    principal_1.Principal.addComentario("=========>toUpperCase Para Una Cadena<============");
                    let transf = this.transform_cadena(cadena, arbol);
                    principal_1.Principal.historial += "P = " + principal_1.Principal.posicion + ";\n";
                    principal_1.Principal.historial += "toUpper();\n";
                    NativasString.UPPER = true;
                    principal_1.Principal.addComentario("=========>Fin TO Uppercase Para Cadena<============");
                    return "P";
                }
                //DETERMINA SI ES LENGTH
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.LENGHT) {
                    if (this.tipo_operacion.tipo == tipo_1.TIPO.ARREGLO) {
                    }
                    //console.log(this.tipo_operacion.tipo);
                    var cadena = variable + "";
                    this.tipo = tipo_1.TIPO.DECIMAL;
                    principal_1.Principal.addComentario("=========>Length Para Cadenas<============");
                    NativasString.LEN = true;
                    principal_1.Principal.historial += "P = " + principal_1.Principal.posicion + ";\n";
                    principal_1.Principal.historial += "len();\n";
                    principal_1.Principal.addComentario("=========>Fin TO Length Para Cadenas<============");
                    return "stack[(int)P]";
                }
                //DETERMINA SI ES SUBSTRING
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.SUBSTRING) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    const b = this.final.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    if (b instanceof excepcion_1.Excepcion) {
                        return b;
                    }
                    var cadena = variable + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0 &&
                        this.final.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en Substring", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.final.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en subString fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    return cadena.substring(aa, b);
                }
                //DETERMINA SI ES CARACTER OF POSITION
                if (this.tipo_operacion == tiponativacadena_1.TIPO_NATIVA_CADENA.CARACTER_POSITION) {
                    const aa = this.inicio.interpretar(entorno, arbol);
                    //verifica que no hayan errores en las operaciones de parametros SUBSTRING(a,b)
                    if (aa instanceof excepcion_1.Excepcion) {
                        return aa;
                    }
                    var cadena = variable + "";
                    if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro inicio en caracterOfPosition no es Entero", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) < 0) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro negativo en caracterOfPosition", `${this.fila}`, `${this.columna}`);
                    }
                    if (this.inicio.interpretar(entorno, arbol) > cadena.length) {
                        return new excepcion_1.Excepcion("Semantico", "Parametro fin en caracterOfPosition fuera de los limites", `${this.fila}`, `${this.columna}`);
                    }
                    //return cadena.charAt(this.inicio.interpretar(entorno, arbol));
                    principal_1.Principal.addComentario("=========>CharAt Para Cadena<============");
                    let temp = principal_1.Principal.posicion; //posicion actual
                    temp++;
                    NativasString.CHAR = true;
                    let tempE = principal_1.Principal.temp;
                    tempE++;
                    let t = "t" + tempE + ";\n";
                    principal_1.Principal.temp = tempE;
                    //this.inicio.traducir(entorno,arbol)
                    t = this.inicio.traducir(entorno, arbol); //obtengo el indice
                    principal_1.Principal.historial += "stack[(int)" + temp + "] = " + t + ";\n"; //posicion de donde se guarda el indice
                    principal_1.Principal.historial += "P = " + temp + ";\n";
                    principal_1.Principal.historial += "charAt();\n";
                    this.tipo = tipo_1.TIPO.CARACTER;
                    principal_1.Principal.addComentario("=========>Fin char at Para Cadena<============");
                    let tempLabel = principal_1.Principal.temp;
                    tempLabel++;
                    let tLabel = "t" + tempLabel;
                    tempLabel++;
                    let tLabel2 = "t" + tempLabel;
                    principal_1.Principal.historial += tLabel + " = stack[(int)P];\n ";
                    return tLabel;
                }
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter .toLowercase() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    transform_cadena(x, arbol) {
        principal_1.Principal.addComentario("Transformando Cadena");
        let temp = principal_1.Principal.temp; //nuevo temporal
        temp++;
        let t0 = "t" + temp;
        principal_1.Principal.addComentario("Agregando Cadena " + x + " en " + t0);
        principal_1.Principal.historial += t0 + " = H;\n"; //se almacena el puntero del heap que seencuentra en el tope del "monticulo"
        principal_1.Principal.temp = temp;
        //obtener codigo ASCII de cada caracter de la cadena
        //cadena en el heap
        for (let i = 0; i < x.length; i++) {
            let item = x.charCodeAt(i);
            principal_1.Principal.historial += "heap[(int)H] = " + item + " ;\n";
            principal_1.Principal.historial += "H = H + 1;\n";
            //console.log(item);
        }
        principal_1.Principal.historial += "heap[(int)H] = -1 ;\n";
        principal_1.Principal.historial += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        let cont = principal_1.Principal.temp;
        cont++;
        let t = "t" + cont;
        principal_1.Principal.historial += t + " = " + (principal_1.Principal.posicion + 1) + ";\n"; //posicion actual disponible
        //Principal.historial += t + "= " + t + " + " + 1 + ";\n";
        principal_1.Principal.historial += "stack[(int)" + t + "] = " + t0 + ";\n";
        principal_1.Principal.addComentario("Fin transformacion decadena, se devuelve el puntero");
        return t;
    }
}
exports.NativasString = NativasString;
NativasString.UPPER = false;
NativasString.LOWER = false;
NativasString.LEN = false;
NativasString.CHAR = false;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118,"../identificador":34,"../primitivo":49,"./tiponativacadena":48}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pow = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Pow extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param base
     * @param fila
     * @param columna
     */
    constructor(base, potencia, fila, columna) {
        super(fila, columna);
        this.base = base;
        this.potencia = potencia;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const base = this.base.interpretar(entorno, arbol);
            const potencia = this.potencia.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (base instanceof excepcion_1.Excepcion) {
                return base;
            }
            //validaciones
            if (this.base.tipo == tipo_1.TIPO.NULL || this.potencia.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULL", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //pow(ENTERO, ENTERO);
            if (this.base.tipo === tipo_1.TIPO.ENTERO && this.potencia.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.ENTERO;
                return Math.pow(this.obtenerVal(this.base.tipo, base), this.obtenerVal(this.potencia.tipo, potencia));
            }
            //pow(ENTERO, DECIMAL);
            else if (this.base.tipo === tipo_1.TIPO.ENTERO && this.potencia.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.pow(this.obtenerVal(this.base.tipo, base), this.obtenerVal(this.potencia.tipo, potencia));
            }
            ////--------DECIMAL
            //pow(DECIMAL, ENTERO);
            else if (this.base.tipo === tipo_1.TIPO.DECIMAL && this.potencia.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.pow(this.obtenerVal(this.base.tipo, base), this.obtenerVal(this.potencia.tipo, potencia));
            }
            //pow(DECIMAL, DECIMAL);
            else if (this.base.tipo === tipo_1.TIPO.DECIMAL && this.potencia.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.pow(this.obtenerVal(this.base.tipo, base), this.obtenerVal(this.potencia.tipo, potencia));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para pow( ${this.base.tipo} , ${this.potencia.tipo}) `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter pow() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ARITMETICA");
        if ((this.potencia != null) || (this.potencia != undefined)) {
            nodo.agregarHijoNodo(this.base.getNodo());
            nodo.agregarHijo("POW");
            nodo.agregarHijoNodo(this.potencia.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("POW");
            nodo.agregarHijoNodo(this.base.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.base.traducir(entorno, arbol);
            const der = this.potencia.traducir(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            if (this.potencia != null || this.potencia != undefined) {
                if (der instanceof excepcion_1.Excepcion) {
                    return der;
                }
            }
            //validaciones
            if (this.base.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            if (this.potencia.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //ENTERO ^^ ENTERO
            if (this.base.tipo === tipo_1.TIPO.ENTERO && this.potencia.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            //ENTERO ^ DECIMAL
            else if (this.base.tipo === tipo_1.TIPO.ENTERO && this.potencia.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            ////--------DECIMAL
            //DECIMAL ^ ENTERO
            else if (this.base.tipo === tipo_1.TIPO.DECIMAL && this.potencia.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            //DECIMAL ^ DECIMAL
            else if (this.base.tipo === tipo_1.TIPO.DECIMAL && this.potencia.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, der);
                //return this.obtenerVal(this.operadorIzq.tipo,izq) ^ this.obtenerVal(this.operadorDer.tipo,der);
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Modulo ${this.base.tipo} ^ ${this.potencia.tipo}  `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Pointer Exception Modulo", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        Pow.Pow = true;
        // Principal.temp = temp;
        // Principal.historial += t +" = pow("+izquierda+" , "+derecha+");" ;
        // Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        let tspos = principal_1.Principal.posicion;
        principal_1.Principal.historial += "P = " + tspos + ";\n";
        principal_1.Principal.historial += "stack[(int)" + tspos + "] = " + izquierda + ";\n";
        principal_1.Principal.historial += "stack[(int)" + (tspos + 1) + "] = " + derecha + ";\n";
        principal_1.Principal.historial += "potencia();\n";
        principal_1.Principal.historial += t + " =  stack[(int) P];\n";
        return t;
    }
}
exports.Pow = Pow;
Pow.Pow = false;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepeticionCadena = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const tipo_1 = require("../../table/tipo");
const identificador_1 = require("../identificador");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class RepeticionCadena extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param identificador
     * @param fila
     * @param columna
     */
    constructor(id, tipo, inicio, final, fila, columna) {
        super(fila, columna);
        this.identificador = id;
        this.tipo_operacion = tipo;
        this.inicio = inicio;
        this.final = final;
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        try {
            const iden = this.identificador.interpretar(entorno, arbol);
            //DETERMINA SI ES REPETICION
            if (this.identificador instanceof identificador_1.Identificador) {
                const simboll = entorno.getSimbolo(this.identificador.id + "");
                //verifica si existe
                if (simboll instanceof excepcion_1.Excepcion) {
                    return simboll;
                }
                if (simboll == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador.id}`, `${this.fila}`, `${this.columna}`);
                }
                else {
                    var texto = "";
                    for (let i = 0; i < this.inicio.interpretar(entorno, arbol); i++) {
                        texto += this.identificador.interpretar(entorno, arbol);
                    }
                    this.tipo = tipo_1.TIPO.CADENA;
                    return texto;
                }
            }
            //  SI ES UNA CADENA SIMPLE
            else {
                const start = this.inicio.interpretar(entorno, arbol);
                const id = this.identificador.interpretar(entorno, arbol);
                if (id instanceof excepcion_1.Excepcion) {
                    return id;
                }
                if (start instanceof excepcion_1.Excepcion) {
                    return start;
                }
                //VERIFICA QUE LAS REPETICIONES SEA UN ENTERO
                if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                    return new excepcion_1.Excepcion('Semantico', 'El parametro de repeticiones debe ser entero', `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE EL NUMERO SEA >=0
                if (this.inicio.interpretar(entorno, arbol) < 0) {
                    return new excepcion_1.Excepcion('Semantico', 'El numero de repeticiones debe ser >= 0', `${this.fila}`, `${this.columna}`);
                }
                if (this.identificador.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion('Semantico', 'El tipo de expresion debe ser cadena en repeticion ', `${this.fila}`, `${this.columna}`);
                }
                var cadena = "";
                for (let i = 0; i < this.inicio.interpretar(entorno, arbol); i++) {
                    cadena += this.identificador.interpretar(entorno, arbol);
                }
                this.tipo = tipo_1.TIPO.CADENA;
                return cadena;
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo repeticion string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter repeticion ^ cadena", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("REPEAT");
        if ((this.inicio != null) || (this.inicio != undefined)) {
            try {
                nodo.agregarHijoNodo(this.expresion.getNodo());
                nodo.agregarHijo("^");
                nodo.agregarHijoNodo(this.inicio.getNodo());
            }
            catch (e) {
            }
            return nodo;
        }
        else {
            nodo.agregarHijo("^");
            nodo.agregarHijoNodo(this.expresion.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            let iden = this.identificador.traducir(entorno, arbol);
            //DETERMINA SI ES REPETICION
            if (this.identificador instanceof identificador_1.Identificador) {
                const simboll = entorno.getSimbolo(this.identificador.id + "");
                //verifica si existe
                if (simboll instanceof excepcion_1.Excepcion) {
                    return simboll;
                }
                if (simboll == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.identificador.id}`, `${this.fila}`, `${this.columna}`);
                }
                else {
                    var texto = "";
                    //Principal.posicion
                    let temp = principal_1.Principal.temp;
                    temp++;
                    let t_cadena = "t" + temp;
                    temp++;
                    let t_cantidad = "t" + temp;
                    //this.inicio.interpretar(entorno,arbol)
                    let cantidad = this.inicio.interpretar(entorno, arbol);
                    if (cantidad instanceof excepcion_1.Excepcion)
                        return cantidad;
                    //posicion en la que se almacenara la posicion de la cadena
                    //Principal.historial += t_cantidad+ " = " +cantidad + ";\n";//almaceno la cantidad que se debe repetir
                    principal_1.Principal.addComentario("Posicion libre en el stack");
                    principal_1.Principal.historial += "P = " + (principal_1.Principal.posicion + 1) + ";\n"; //obtengo la posicion libre actual
                    principal_1.Principal.addComentario("Obtengo la posicion de la variable");
                    principal_1.Principal.historial += t_cadena + " = " + (simboll.posicion) + ";\n"; //obtengo la posicion de la cadena
                    principal_1.Principal.addComentario("Guardo  la posicion de la cadena en la posicion libre del stack");
                    principal_1.Principal.historial += "stack[(int) P] =" + t_cadena + ";\n "; //guarda la posicion de la cadena 
                    principal_1.Principal.addComentario("Almaceno la cantidad de veces que se debe repetir la cadena");
                    principal_1.Principal.historial += "stack[(int) (P+" + 1 + ")] = " + cantidad + ";\n";
                    principal_1.Principal.historial += "potencia_string();\n";
                    principal_1.Principal.historial += "P = " + (t_cadena) + ";\n";
                    RepeticionCadena.REPETICION = true;
                    this.tipo = tipo_1.TIPO.CADENA;
                    return "P";
                }
            }
            //  SI ES UNA CADENA SIMPLE
            else {
                const start = this.inicio.interpretar(entorno, arbol);
                const id = this.identificador.interpretar(entorno, arbol);
                if (id instanceof excepcion_1.Excepcion) {
                    return id;
                }
                if (start instanceof excepcion_1.Excepcion) {
                    return start;
                }
                //VERIFICA QUE LAS REPETICIONES SEA UN ENTERO
                if (this.inicio.tipo != tipo_1.TIPO.ENTERO) {
                    return new excepcion_1.Excepcion('Semantico', 'El parametro de repeticiones debe ser entero', `${this.fila}`, `${this.columna}`);
                }
                //VERIFICA QUE EL NUMERO SEA >=0
                if (this.inicio.interpretar(entorno, arbol) < 0) {
                    return new excepcion_1.Excepcion('Semantico', 'El numero de repeticiones debe ser >= 0', `${this.fila}`, `${this.columna}`);
                }
                if (this.identificador.tipo != tipo_1.TIPO.CADENA) {
                    return new excepcion_1.Excepcion('Semantico', 'El tipo de expresion debe ser cadena en repeticion ', `${this.fila}`, `${this.columna}`);
                }
                var cadena = "";
                //for(let i=0;i<this.inicio.interpretar(entorno,arbol);i++){
                cadena += this.identificador.traducir(entorno, arbol);
                //}
                let temp = principal_1.Principal.temp;
                temp++;
                let t_cadena = "t" + temp;
                temp++;
                let t_cantidad = "t" + temp;
                //this.inicio.interpretar(entorno,arbol)
                let cantidad = this.inicio.interpretar(entorno, arbol);
                principal_1.Principal.addComentario("Posicion libre en el stack");
                principal_1.Principal.historial += "P = " + (principal_1.Principal.posicion + 2) + ";\n"; //obtengo la posicion libre actual
                principal_1.Principal.addComentario("Obtengo la posicion de la variable");
                principal_1.Principal.historial += t_cadena + " = " + (cadena) + ";\n"; //obtengo la posicion de la cadena
                principal_1.Principal.addComentario("Guardo  la posicion de la cadena en la posicion libre del stack");
                principal_1.Principal.historial += "stack[(int) P] =" + t_cadena + ";\n "; //guarda la posicion de la cadena 
                principal_1.Principal.addComentario("Almaceno la cantidad de veces que se debe repetir la cadena");
                principal_1.Principal.historial += "stack[(int) (P+" + 1 + ")] = " + cantidad + ";\n";
                principal_1.Principal.historial += "potencia_string();\n";
                principal_1.Principal.historial += "P = " + (t_cadena) + ";\n";
                RepeticionCadena.REPETICION = true;
                this.tipo = tipo_1.TIPO.CADENA;
                this.tipo = tipo_1.TIPO.CADENA;
                return cadena;
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para metodo nativo repeticion string() `, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter repeticion ^ cadena", `${this.fila}`, `${this.columna}`);
        }
    }
    transform_cadena(x, arbol) {
        let return_string = "";
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        return_string = t + " = H;\n";
        principal_1.Principal.temp = temp;
        //obtener codigo ASCII de cada caracter de la cadena
        //cadena en el heap
        if (!x)
            x = "Undefined";
        for (let i = 0; i < x.length - 1; i++) {
            let item = x.charCodeAt(i);
            return_string += "heap[(int)H] = " + item + " ;\n";
            return_string += "H = H + 1;\n";
            //console.log(item);
        }
        return_string += "heap[(int)H] = -1 ;\n";
        return_string += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        return_string +=
            "t" + principal_1.Principal.temp + " = P + " + principal_1.Principal.posicion + ";\n";
        return t;
    }
}
exports.RepeticionCadena = RepeticionCadena;
RepeticionCadena.REPETICION = false;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118,"../identificador":34}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Seno = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Seno extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION SENO()
     * @param operador
     * @param operadorIzq
     * @param fila
     * @param columna
     */
    constructor(operadorIzq, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sin(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sin(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sin(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Sen()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Sen() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("SENO");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq)) ;
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Sen()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Sen() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = sin(" + izquierda + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Seno = Seno;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sqrt = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Sqrt extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param operadorIzq
     * @param fila
     * @param columna
     */
    constructor(operadorIzq, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sqrt(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sqrt(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.sqrt(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para TAN()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter TAN() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("SQRT");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    ///////////////////////////////////////////C3D///////////////////////////////////////
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //SQRT(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq)) ;
            }
            ////--------DECIMAL
            //SQRT(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            //SQRT(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Sqrt()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Sqrt() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = sqrt(" + izquierda + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Sqrt = Sqrt;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tangente = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Tangente extends Instruccion_1.Instruccion {
    /**
     * CONSTRUCTOR DE OPERACION TANGENTE()
     * @param operador
     * @param operadorIzq
     * @param fila
     * @param columna
     */
    constructor(operadorIzq, fila, columna) {
        super(fila, columna);
        this.operadorIzq = operadorIzq;
        //this.operadorDer=operadorDer;
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            //const der=this.operadorDer.interpretar(entorno,arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //sen(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.tan(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            ////--------DECIMAL
            //SEN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.tan(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            //SEN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return Math.tan(this.obtenerVal(this.operadorIzq.tipo, izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para TAN()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter TAN() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("TANGENTE");
        nodo.agregarHijo(this.operadorIzq.value + "");
        return nodo;
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en Sen() `, `${this.fila}`, `${this.columna}`);
        }
    }
    ///////////////////////////////////////////C3D///////////////////////////////////////
    traducir(entorno, arbol) {
        try {
            const izq = this.operadorIzq.interpretar(entorno, arbol);
            if (izq instanceof excepcion_1.Excepcion) {
                return izq;
            }
            //validaciones
            if (this.operadorIzq.tipo == tipo_1.TIPO.NULL) {
                return new excepcion_1.Excepcion("Semantico", "Error de operacion en variable NULA", `${this.fila}`, `${this.columna}`);
            }
            //-------ENTERO
            //TAN(ENTERO);
            if (this.operadorIzq.tipo === tipo_1.TIPO.ENTERO) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq)) ;
            }
            ////--------DECIMAL
            //TAN(DECIMAL)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.DECIMAL) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            //TAN(BOOLEAN)
            else if (this.operadorIzq.tipo === tipo_1.TIPO.BOOLEAN) {
                this.tipo = tipo_1.TIPO.DECIMAL;
                return this.setAtributosC3D(izq, "");
                //return Math.sin(this.obtenerVal(this.operadorIzq.tipo,izq));
            }
            return new excepcion_1.Excepcion("Semantico", `Tipo de datos invalido para Tan()  ${this.operadorIzq.tipo}`, `${this.fila}`, `${this.columna}`);
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", "QUETZAL Null Poiter Tan() tipo dato incorrecto ", `${this.fila}`, `${this.columna}`);
        }
    }
    setAtributosC3D(izquierda, derecha) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = tan(" + izquierda + ");";
        principal_1.Principal.historial += "\n";
        this.tipo = tipo_1.TIPO.DECIMAL;
        return t;
    }
}
exports.Tangente = Tangente;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIPO_NATIVA_CADENA = void 0;
var TIPO_NATIVA_CADENA;
(function (TIPO_NATIVA_CADENA) {
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TOLOWER"] = 0] = "TOLOWER";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TOUPPER"] = 1] = "TOUPPER";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["LENGHT"] = 2] = "LENGHT";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["SUBSTRING"] = 3] = "SUBSTRING";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["CARACTER_POSITION"] = 4] = "CARACTER_POSITION";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["REPETICION"] = 5] = "REPETICION";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["INTPARSE"] = 6] = "INTPARSE";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["DOUBLEPARSE"] = 7] = "DOUBLEPARSE";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["BOOLEANPARSE"] = 8] = "BOOLEANPARSE";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TOINT"] = 9] = "TOINT";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TOSTRING"] = 10] = "TOSTRING";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TODOUBLE"] = 11] = "TODOUBLE";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["STRING"] = 12] = "STRING";
    TIPO_NATIVA_CADENA[TIPO_NATIVA_CADENA["TYPEOF"] = 13] = "TYPEOF";
})(TIPO_NATIVA_CADENA = exports.TIPO_NATIVA_CADENA || (exports.TIPO_NATIVA_CADENA = {}));

},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Primitivo = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const nodo_1 = require("../abs/nodo");
const util_1 = require("util");
const principal_1 = require("../principal");
class Primitivo extends Instruccion_1.Instruccion {
    /**
     * @param  {TIPO} tipo
     * @param  {any} value
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(tipo, value, fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.tipo = tipo;
        this.value = value;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     */
    interpretar(entorno, arbol) {
        //console.log(this.value);
        if (this.tipo == tipo_1.TIPO.ENTERO || this.tipo == tipo_1.TIPO.DECIMAL) {
            return this.value;
        }
        if (this.tipo == tipo_1.TIPO.CADENA) {
            return this.value.replace('\\n', '\n');
        }
        return this.value;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("PRIMITIVO");
        nodo.agregarHijo(this.value);
        return nodo;
    }
    traducir(entorno, arbol) {
        // let temp:string = "t"
        // let temp += super.temp;
        let codigo;
        if ((0, util_1.isNumber)(this.value))
            this.tipo = tipo_1.TIPO.DECIMAL;
        codigo = this.value;
        if (this.tipo == tipo_1.TIPO.BOOLEAN)
            return (this.value) ? 1 : 0;
        if (this.tipo == tipo_1.TIPO.CADENA) {
            codigo = this.transform_cadena(this.value);
        }
        return codigo;
    }
    /**
     * @param  {string} x
     * @param  {Arbol} arbol
     * @returns string
     * cuando se tratan de constantes se usa la posicion actual libre como referencia
     * se devuelve el temporal que tiene la referencia hacia el heap
     * todas las cadenas se pasan al heap
     */
    transform_cadena(x) {
        let return_string = "";
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        return_string = t + " = H;\n"; //Asigno la referencia del heap al temporal
        principal_1.Principal.temp = temp;
        principal_1.Principal.addComentario("Pasando cadena al heap , '" + x + "'");
        if (!x)
            x = "Undefined";
        for (let i = 0; i < x.length; i++) {
            let item = x.charCodeAt(i);
            return_string += "heap[(int)H] = " + item + " ;\n";
            return_string += "H = H + 1;\n";
            //console.log(item);
        }
        return_string += "heap[(int)H] = -1 ;\n";
        return_string += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        let temp2 = principal_1.Principal.posicion + 1 + "";
        return_string += "stack[(int)" + (temp2) + "] = " + t + ";\n";
        principal_1.Principal.historial += return_string;
        principal_1.Principal.addComentario("Fin de pasar cadena al heap");
        //"t" + Principal.temp + " = P + " + Principal.posicion + ";\n";
        return temp2;
    }
}
exports.Primitivo = Primitivo;
// def traducir(self,ent,arbol):
//         resultado3D = Resultado3D()
//         resultado3D.codigo3D = ""
//         if isinstance(self.valor, str):
//             resultado3D.tipo = Tipo.CHAR
//         elif isinstance(self.valor, int):
//             resultado3D.tipo = Tipo.ENTERO
//         elif isinstance(self.valor, float):
//             resultado3D.tipo = Tipo.FLOAT
//         if(resultado3D.tipo == Tipo.CHAR):
//             resultado3D.temporal = Temporal("\""+self.valor+"\"")
//         else:
//             resultado3D.temporal = Temporal(str(self.valor))
//         return resultado3D

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/tipo":118,"util":110}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Diff = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Diff extends Instruccion_1.Instruccion {
    constructor(expIzq, expDer, fila, columna) {
        super(fila, columna);
        this.expDer = expDer;
        this.expIzq = expIzq;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        const exp1 = this.expIzq.interpretar(entorno, arbol);
        const exp2 = this.expDer.interpretar(entorno, arbol);
        //verificar si son struct o arrayg
        //Validacion item por item solo si se esta comparando arreglos
        if (exp1.tipo == tipo_1.TIPO.ARREGLO && exp2.tipo == tipo_1.TIPO.ARREGLO) {
            //Si no tienen la misma cantidad de items no son iguales
            if (exp1.getSize() != exp2.getSize()) {
                this.tipo = tipo_1.TIPO.BOOLEAN;
                return true;
            }
            //Si tienen la misma longitud realizo un recorrido para comparar los items - Esta implementacion funciona solo para los valores nativos
            for (let i = 0; i < exp1.getSize(); i++) {
                if (exp1.getValue(i) != exp2.getValue(i)) {
                    this.tipo = tipo_1.TIPO.BOOLEAN;
                    return true;
                }
            }
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return false;
        }
        this.tipo = tipo_1.TIPO.BOOLEAN;
        return this.obtenerVal(this.expIzq.tipo, exp1) != this.obtenerVal(this.expDer.tipo, exp2);
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if ((this.expDer != null) || (this.expDer != undefined)) {
            nodo.agregarHijoNodo(this.expIzq.getNodo());
            nodo.agregarHijo("DIFERENTE");
            nodo.agregarHijoNodo(this.expDer.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("DIFERENTE");
            nodo.agregarHijoNodo(this.expIzq.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(entorno, arbol) {
        const exp1 = this.expIzq.traducir(entorno, arbol);
        const exp2 = this.expDer.traducir(entorno, arbol);
        //verificar si son struct o arrayg
        //Validacion item por item solo si se esta comparando arreglos
        if (exp1.tipo == tipo_1.TIPO.ARREGLO && exp2.tipo == tipo_1.TIPO.ARREGLO) {
            //Si no tienen la misma cantidad de items no son iguales
            if (exp1.getSize() != exp2.getSize()) {
                this.tipo = tipo_1.TIPO.BOOLEAN;
                return true;
            }
            //Si tienen la misma longitud realizo un recorrido para comparar los items - Esta implementacion funciona solo para los valores nativos
            for (let i = 0; i < exp1.getSize(); i++) {
                if (exp1.getValue(i) != exp2.getValue(i)) {
                    this.tipo = tipo_1.TIPO.BOOLEAN;
                    return true;
                }
            }
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return false;
        }
        this.tipo = tipo_1.TIPO.BOOLEAN;
        this.obtenerVal(this.expIzq.tipo, exp1) != this.obtenerVal(this.expDer.tipo, exp2);
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + "= " + exp1 + " != " + exp2 + ";\n";
        return t;
    }
}
exports.Diff = Diff;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgualIgual = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class IgualIgual extends Instruccion_1.Instruccion {
    constructor(leftExpression, rightExpression, fila, columna) {
        super(fila, columna);
        this.rightExpression = rightExpression;
        this.leftExpression = leftExpression;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        const exp1 = this.leftExpression.interpretar(entorno, arbol);
        const exp2 = this.rightExpression.interpretar(entorno, arbol);
        //Validacion item por item solo si se esta comparando arreglos
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (exp1.tipo == tipo_1.TIPO.ARREGLO && exp2.tipo == tipo_1.TIPO.ARREGLO) {
            //Si no tienen la misma cantidad de items no son iguales
            if (exp1.getSize() != exp2.getSize())
                return false;
            //Si tienen la misma longitud realizo un recorrido para comparar los items - Esta implementacion funciona solo para los valores nativos
            for (let i = 0; i < exp1.getSize(); i++) {
                if (exp1.getValue(i) != exp2.getValue(i)) {
                    this.tipo = tipo_1.TIPO.BOOLEAN;
                    return false;
                }
            }
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return true;
        }
        //console.log("falta comparar el struct")
        this.tipo = tipo_1.TIPO.BOOLEAN;
        return this.obtenerVal(this.leftExpression.tipo, exp1) == this.obtenerVal(this.rightExpression.tipo, exp2);
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if ((this.rightExpression != null) || (this.rightExpression != undefined)) {
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            nodo.agregarHijo("==");
            nodo.agregarHijoNodo(this.rightExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("==");
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            return nodo;
        }
    }
    traducir(entorno, arbol) {
        const exp1 = this.leftExpression.traducir(entorno, arbol);
        const exp2 = this.rightExpression.traducir(entorno, arbol);
        //Validacion item por item solo si se esta comparando arreglos
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (exp1.tipo == tipo_1.TIPO.ARREGLO && exp2.tipo == tipo_1.TIPO.ARREGLO) {
            //Si no tienen la misma cantidad de items no son iguales
            if (exp1.getSize() != exp2.getSize())
                return false;
            //Si tienen la misma longitud realizo un recorrido para comparar los items - Esta implementacion funciona solo para los valores nativos
            for (let i = 0; i < exp1.getSize(); i++) {
                if (exp1.getValue(i) != exp2.getValue(i)) {
                    this.tipo = tipo_1.TIPO.BOOLEAN;
                    return false;
                }
            }
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return true;
        }
        //console.log("falta comparar el struct")
        this.tipo = tipo_1.TIPO.BOOLEAN;
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + " = " + exp1 + " == " + exp2 + ";\n";
        return t;
    }
}
exports.IgualIgual = IgualIgual;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mayor = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Mayor extends Instruccion_1.Instruccion {
    constructor(leftExpression, rigthExpression, linea, columna) {
        super(linea, columna);
        this.leftExpression = leftExpression;
        this.rigthExpression = rigthExpression;
        this.tipo = tipo_1.TIPO.NULL;
        Object.assign(this, { leftExpression, rigthExpression });
    }
    interpretar(e, arbol) {
        const exp1 = this.leftExpression.interpretar(e, arbol);
        const exp2 = this.rigthExpression.interpretar(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MAYOR
        //ENTERO > ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return (this.obtenerVal(this.leftExpression.tipo, exp1) >
                this.obtenerVal(this.rigthExpression.tipo, exp2));
        }
        //ENTERO > DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return (this.obtenerVal(this.leftExpression.tipo, exp1) >
                this.obtenerVal(this.rigthExpression.tipo, exp2));
        }
        //DECIMAL > ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return (this.obtenerVal(this.leftExpression.tipo, exp1) >
                this.obtenerVal(this.rigthExpression.tipo, exp2));
        }
        //DECIMAL > DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return (this.obtenerVal(this.leftExpression.tipo, exp1) >
                this.obtenerVal(this.rigthExpression.tipo, exp2));
        }
        //BOOLEAN > BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return (this.obtenerVal(this.leftExpression.tipo, exp1) >
                this.obtenerVal(this.rigthExpression.tipo, exp2));
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if (this.rigthExpression != null || this.rigthExpression != undefined) {
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            nodo.agregarHijo(">");
            nodo.agregarHijoNodo(this.rigthExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo(">");
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(e, arbol) {
        const exp1 = this.leftExpression.traducir(e, arbol);
        const exp2 = this.rigthExpression.traducir(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MAYOR
        //ENTERO > ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //ENTERO > DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL > ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL > DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //BOOLEAN > BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
    }
    return_tem(izq, der) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + "=" + izq + ">" + der + " ;\n";
        return t;
    }
}
exports.Mayor = Mayor;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MayorIgual = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class MayorIgual extends Instruccion_1.Instruccion {
    constructor(leftExpression, rigthExpression, linea, columna) {
        super(linea, columna);
        this.leftExpression = leftExpression;
        this.rigthExpression = rigthExpression;
        Object.assign(this, { leftExpression, rigthExpression });
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(e, arbol) {
        const exp1 = this.leftExpression.interpretar(e, arbol);
        const exp2 = this.rigthExpression.interpretar(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MAYOR IGUAL
        //ENTERO >= ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) >= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //ENTERO >= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) >= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL >= ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) >= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL >= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) >= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //BOOLEAN >= BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) >= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if (this.rigthExpression != null || this.rigthExpression != undefined) {
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            nodo.agregarHijo(">=");
            nodo.agregarHijoNodo(this.rigthExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo(">=");
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(e, arbol) {
        const exp1 = this.leftExpression.traducir(e, arbol);
        const exp2 = this.rigthExpression.traducir(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MAYOR IGUAL
        //ENTERO >= ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //ENTERO >= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL >= ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL >= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //BOOLEAN >= BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
    }
    return_tem(izq, der) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + "=" + izq + "<" + der + " ;\n";
        return t;
    }
}
exports.MayorIgual = MayorIgual;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Menor = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Menor extends Instruccion_1.Instruccion {
    constructor(leftExpression, rigthExpression, linea, columna) {
        super(linea, columna);
        this.leftExpression = leftExpression;
        this.rigthExpression = rigthExpression;
        this.tipo = tipo_1.TIPO.NULL;
        Object.assign(this, { leftExpression, rigthExpression });
    }
    interpretar(e, arbol) {
        const exp1 = this.leftExpression.interpretar(e, arbol);
        const exp2 = this.rigthExpression.interpretar(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MENOR QUE
        //ENTERO < ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) < this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //ENTERO < DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) < this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL < ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) < this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL < DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) < this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //BOOLEAN < BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) < this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
    }
    traducir(e, arbol) {
        const exp1 = this.leftExpression.traducir(e, arbol);
        const exp2 = this.rigthExpression.traducir(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO ||
            this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL ||
            this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MENOR QUE
        //ENTERO < ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //ENTERO < DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL < ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL < DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL &&
            this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //BOOLEAN < BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN &&
            this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if (this.rigthExpression != null || this.rigthExpression != undefined) {
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            nodo.agregarHijo("<");
            nodo.agregarHijoNodo(this.rigthExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("<");
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    return_tem(izq, der) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + "=" + izq + "<" + der + " ;\n";
        return t;
    }
}
exports.Menor = Menor;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenorIgual = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class MenorIgual extends Instruccion_1.Instruccion {
    constructor(leftExpression, rigthExpression, linea, columna) {
        super(linea, columna);
        this.leftExpression = leftExpression;
        this.rigthExpression = rigthExpression;
        this.tipo = tipo_1.TIPO.NULL;
        Object.assign(this, { leftExpression, rigthExpression });
    }
    interpretar(e, arbol) {
        const exp1 = this.leftExpression.interpretar(e, arbol);
        const exp2 = this.rigthExpression.interpretar(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO || this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO || this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL || this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MENOR IGUAL
        //ENTERO <= ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO && this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) <= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //ENTERO <= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO && this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) <= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL <= ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL && this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) <= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //DECIMAL <= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL && this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) <= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
        //BOOLEAN <= BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN && this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.obtenerVal(this.leftExpression.tipo, exp1) <= this.obtenerVal(this.rigthExpression.tipo, exp2);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("RELACIONAL");
        if ((this.rigthExpression != null) || (this.rigthExpression != undefined)) {
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            nodo.agregarHijo("<=");
            nodo.agregarHijoNodo(this.rigthExpression.getNodo());
            return nodo;
        }
        else {
            nodo.agregarHijo("<=");
            nodo.agregarHijoNodo(this.leftExpression.getNodo());
            return nodo;
        }
    }
    obtenerVal(tipo, val) {
        try {
            if (tipo === tipo_1.TIPO.ENTERO || tipo === tipo_1.TIPO.DECIMAL) {
                return Number(val);
            }
            else if (tipo === tipo_1.TIPO.BOOLEAN) {
                if (val.toLowerCase() === "true") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (tipo === tipo_1.TIPO.CADENA) {
                return val;
            }
            else {
                return val;
            }
        }
        catch (error) {
            return new excepcion_1.Excepcion("Semantico", `No se pudo obtener el valor en division`, `${this.fila}`, `${this.columna}`);
        }
    }
    traducir(e, arbol) {
        const exp1 = this.leftExpression.traducir(e, arbol);
        const exp2 = this.rigthExpression.traducir(e, arbol);
        if (exp1 instanceof excepcion_1.Excepcion)
            return exp1;
        if (exp2 instanceof excepcion_1.Excepcion)
            return exp2;
        if (this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO || this.rigthExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.ARREGLO || this.leftExpression.tipo == tipo_1.TIPO.ARREGLO)
            return new excepcion_1.Excepcion("Semantico", "no se pueden comparar objetos ", super.fila + "", super.columna + "");
        if (this.leftExpression.tipo == tipo_1.TIPO.NULL || this.rigthExpression.tipo == tipo_1.TIPO.NULL)
            return new excepcion_1.Excepcion("Semantico", "variable NULL no se puede comparar ", super.fila + "", super.columna + "");
        //MENOR IGUAL
        //ENTERO <= ENTERO
        if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO && this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //ENTERO <= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.ENTERO && this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL <= ENTERO
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL && this.rigthExpression.tipo === tipo_1.TIPO.ENTERO) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //DECIMAL <= DECIMAL
        else if (this.leftExpression.tipo === tipo_1.TIPO.DECIMAL && this.rigthExpression.tipo === tipo_1.TIPO.DECIMAL) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
        //BOOLEAN <= BOOLEAN
        else if (this.leftExpression.tipo === tipo_1.TIPO.BOOLEAN && this.rigthExpression.tipo === tipo_1.TIPO.BOOLEAN) {
            this.tipo = tipo_1.TIPO.BOOLEAN;
            return this.return_tem(exp1, exp2);
        }
    }
    return_tem(izq, der) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.temp = temp;
        principal_1.Principal.historial += t + "=" + izq + "<=" + der + " ;\n";
        return t;
    }
}
exports.MenorIgual = MenorIgual;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112,"../../table/excepcion":115,"../../table/tipo":118}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Acceso_Struct = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tipo_1 = require("../../table/tipo");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const nodo_1 = require("../../abs/nodo");
const acceso_1 = require("../array/acceso");
class Acceso_Struct extends Instruccion_1.Instruccion {
    constructor(id, ids, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.ids = ids;
        this.exist = false;
        this.tipo = tipo_1.TIPO.NULL;
    }
    interpretar(entorno, arbol) {
        let sim_struct = entorno.getSimbolo(this.id);
        if (!sim_struct)
            return new excepcion_1.Excepcion("Semantico", "No se encontro " + this.id, this.fila + "", this.columna + "");
        if (!(sim_struct instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Error Interno", "v8 is update", this.fila + "", this.columna + "");
        if ((sim_struct === null || sim_struct === void 0 ? void 0 : sim_struct.tipo) != tipo_1.TIPO.STRUCT)
            return new excepcion_1.Excepcion("Semantico", "Se requiere un Struct para " + this.id, this.fila + "", this.columna + "");
        let contador = this.ids.length;
        let temp = sim_struct; //guardo la estructura en un temporal
        // console.log("temp", temp)
        let value_return;
        //let value_return =new Excepcion("Semantico",this.ids[this.ids.length-1]+" no se encontro en "+this.id,this.fila+"",this.columna+"");
        this.ids.forEach((x) => {
            if (temp.valor instanceof Map) {
                if (temp.valor.has(x) && contador == 1) {
                    let simbolo = Object.setPrototypeOf(temp.valor.get(x), simbolo_1.Simbolo.prototype);
                    if (simbolo instanceof simbolo_1.Simbolo) {
                        value_return = temp.valor.get(x); //simbolo
                    }
                }
                else if (x instanceof acceso_1.Acceso) {
                    let id_arr = x.id;
                    let lst_exp = x.list_expresiones;
                    if (!temp.valor.has(id_arr)) {
                        return new excepcion_1.Excepcion("Semantico", "Struct no tiene " + id_arr, super.fila + "", super.columna + "");
                    }
                    // if(!((temp.valor.get(id_arr) instanceof Array))){
                    //   return new Excepcion("Semantico", id_arr+" No es un arreglo",super.fila+"",super.columna+"");
                    // }
                    let temp_arr = temp.valor.get(id_arr).valor;
                    let contador = lst_exp.length;
                    //if (contador != 1) temp_arr = 
                    lst_exp.forEach((xx) => {
                        let index = xx.interpretar(entorno, arbol);
                        if (index instanceof excepcion_1.Excepcion)
                            return index;
                        contador--;
                        if (contador == 0) {
                            if (temp_arr instanceof Array) {
                                if (index < 0 || index > temp_arr.length)
                                    return value_return = new excepcion_1.Excepcion("Semantico", "no existe el indice indicado para el arreglo " + this.id, "" + super.fila, "" + super.columna);
                                return value_return = JSON.parse(JSON.stringify(temp_arr[parseInt(index)]));
                            }
                            //this.tipo = exist.tipo;
                            return value_return = JSON.parse(JSON.stringify(temp_arr[parseInt(index)]));
                        }
                        else {
                            temp_arr = (temp_arr)[index];
                        }
                    });
                }
                return value_return; //value_return =  temp.valor.get(x).valor;
                //temp = temp.valor.get(x);
            }
            contador -= 1;
            //return new Excepcion("Semantico",x+" no se encontro en "+this.id,this.fila+"",this.columna+"");
        });
        return value_return;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ACCESO STRUCT");
        nodo.agregarHijo(this.id);
        const acceso = new nodo_1.NodoAST("IDS");
        if (this.ids != null || this.ids != undefined) {
            this.ids.forEach((instr) => {
                acceso.agregarHijo(instr);
            });
            nodo.agregarHijoNodo(acceso);
        }
        return nodo;
    }
}
exports.Acceso_Struct = Acceso_Struct;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116,"../../table/tipo":118,"../array/acceso":6}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asignacion_Struct = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Asignacion_Struct extends Instruccion_1.Instruccion {
    constructor(acceso, exp, fila, columna) {
        super(fila, columna);
        this.acceso = acceso;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let value_acceso = this.acceso.interpretar(entorno, arbol);
        if (value_acceso instanceof excepcion_1.Excepcion) {
            arbol.excepciones.push(value_acceso);
            return value_acceso;
        }
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (value_exp == undefined)
            return new excepcion_1.Excepcion("Semantico", "Se requiere de un valor para la asignacion en un struct", "" + this.fila, "" + this.columna);
        if (!(this.exp.tipo == value_acceso.tipo))
            return new excepcion_1.Excepcion("Semantico", "tipos diferentes en asignacion, struct: " + value_acceso.tipo, "" + this.fila, "" + this.columna);
        value_acceso.valor = value_exp;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ASIGNACION STRUCT");
        nodo.agregarHijo(this.acceso.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Asignacion_Struct = Asignacion_Struct;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asignacion_Struct_Exp = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const nodo_1 = require("../../abs/nodo");
class Asignacion_Struct_Exp extends Instruccion_1.Instruccion {
    constructor(acceso, exp, fila, columna) {
        super(fila, columna);
        this.acceso = acceso;
        this.exp = exp;
    }
    interpretar(entorno, arbol) {
        let value_acceso = this.acceso.interpretar(entorno, arbol);
        if (value_acceso instanceof excepcion_1.Excepcion) {
            arbol.excepciones.push(value_acceso);
            return value_acceso;
        }
        let value_exp = this.exp.interpretar(entorno, arbol);
        if (value_exp instanceof excepcion_1.Excepcion)
            return value_exp;
        if (value_exp == undefined)
            return new excepcion_1.Excepcion("Semantico", "Se requiere de un valor para la asignacion en un struct", "" + this.fila, "" + this.columna);
        if (!(this.exp.tipo == value_acceso.tipo))
            return new excepcion_1.Excepcion("Semantico", "tipos diferentes en asignacion, struct: " + value_acceso.tipo, "" + this.fila, "" + this.columna);
        value_acceso.valor = value_exp;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ASIGNACION STRUCT");
        nodo.agregarHijo(this.acceso.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
}
exports.Asignacion_Struct_Exp = Asignacion_Struct_Exp;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asignacion_VAR_STRUCT = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
class Asignacion_VAR_STRUCT extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {Acceso_Struct} acceso
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(id, acceso, fila, columna) {
        super(fila, columna);
        this.id = id;
        this.acceso = acceso;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     */
    interpretar(entorno, arbol) {
        let value = this.id.interpretar(entorno, arbol); //entorno.getSimbolo(this.id);
        if (value instanceof excepcion_1.Excepcion)
            return value;
        if (!value)
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, this.fila + "", this.columna + "");
        let acceso_value = this.acceso.interpretar(entorno, arbol);
        if (acceso_value instanceof excepcion_1.Excepcion)
            return acceso_value;
        if (!(acceso_value instanceof simbolo_1.Simbolo))
            return new excepcion_1.Excepcion("Semantico", "error en el valor de struct ", this.fila + "", this.columna + "");
        if ((this.id.tipo == tipo_1.TIPO.ENTERO || this.id.tipo == tipo_1.TIPO.DECIMAL) && (acceso_value.tipo == tipo_1.TIPO.ENTERO || acceso_value.tipo == tipo_1.TIPO.DECIMAL)) {
            acceso_value.valor = Number(value);
        }
        else if (acceso_value.tipo != this.id.tipo)
            return new excepcion_1.Excepcion("Semantico", "error en el valor de struct ", this.fila + "", this.columna + "");
        // console.log(acceso_value);
        //value.valor = acceso_value.valor;
        acceso_value.valor = value;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ASIGNACION VAR STRUCT");
        nodo.agregarHijo(this.acceso.id);
        nodo.agregarHijoNodo(this.id.getNodo());
        return nodo;
    }
}
exports.Asignacion_VAR_STRUCT = Asignacion_VAR_STRUCT;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116,"../../table/tipo":118}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Atributo = void 0;
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
class Atributo {
    constructor(id, tipo, arreglo, fila, columna) {
        this.id = id;
        this.tipo = tipo;
        this.fila = fila;
        this.columna = columna;
        //this.valor = valor;
        this.arreglo = arreglo;
        //this.struct = struct;
        this.constante = false;
        this.valor = null;
        this.struct = (tipo == tipo_1.TIPO.STRUCT) ? true : false;
    }
    toString() {
        return "hola";
        // let value:string  = this.valor;
        // if(this.struct){
        //     value = "";
        //     value = this.name_struct + "( ";
        //     console.log()
        //       if (this.valor instanceof Map) {
        //         //sim.valor.map((x)=> console.log(x));
        //         this.valor.forEach((x) => {
        //             //if(x instanceof Simbolo)
        //             value += x.id+ " = "+x.valor+", ";//x.toString()//x();
        //         });
        //         value = value.slice(0, value.length - 2);
        //         value += " )";
        //       }
        //     //else if(this.valor instanceof )
        // }
        // return value;
    }
    interpretar(entorno, arbol) {
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ATRIBUTO");
        nodo.agregarHijo(this.id);
        return nodo;
    }
}
exports.Atributo = Atributo;

},{"../../abs/nodo":2,"../../table/tipo":118}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dec_Struct = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tablasimbolos_1 = require("../../table/tablasimbolos");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
class Dec_Struct extends Instruccion_1.Instruccion {
    constructor(template_struct, id, id_struct, values_atributos, fila, columna) {
        super(fila, columna);
        this.template_struct = template_struct;
        this.id = id;
        this.values_atributos = values_atributos;
        this.id_struct = id_struct;
        this.list_simbolos = new Map();
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     */
    interpretar(entorno, arbol) {
        if (this.id_struct != this.template_struct)
            return new excepcion_1.Excepcion("Semantico", "Nombre de Struct y constructor no coinciden", this.fila + "", this.columna + "");
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        //verifico que el struct exista
        if (!arbol.structs.has(this.template_struct))
            return new excepcion_1.Excepcion("Semantico", "Struct: " + this.template_struct + ", no existe ", this.fila + "", this.columna + "");
        //getsimbolo para verificar  si existe una variable con el mismo id
        let create_struct = entorno.consultar_en_tabla_actual(this.id);
        //console.log(!create_struct);
        if (create_struct)
            return new excepcion_1.Excepcion("Semantico", "Existe una variable con " +
                this.id +
                ", no se pueden duplicar variables ", this.fila + "", this.columna + "");
        //obtengo el struct
        let template = arbol.structs.get(this.template_struct);
        //console.log("template",template);
        //console.log(template);
        // //comparo que las listas sean del mismo tama;o
        // //para saber si los parametros son en misma cantidad que los
        // //atributos en el struct
        if (this.values_atributos.length != (template === null || template === void 0 ? void 0 : template.lista_atributos.length))
            return new excepcion_1.Excepcion("Semantico", "se esperaba una cantidad diferente de atributos para el Struct " +
                this.template_struct, "" + this.fila, "" + this.columna);
        //hago una copia de los atributos del struct
        //let lst_simbolos:Map<string,Simbolo> = new Map();
        //  lst_simbolos = JSON.parse(JSON.stringify(template?.lista_simbolo));
        //    console.log("lst_simbolos",lst_simbolos);
        let contador = 0;
        template === null || template === void 0 ? void 0 : template.lista_atributos.forEach((x) => {
            let result = this.values_atributos[contador].interpretar(entorno, arbol);
            if (this.values_atributos[contador].tipo != x.tipo)
                return new excepcion_1.Excepcion("Semantico", "El tipo de parametro no coince con el del struct", this.fila + "", this.columna + "");
            if (result instanceof excepcion_1.Excepcion)
                return result;
            let sim = JSON.parse(JSON.stringify(x));
            if (x.struct) {
                sim.name_struct = sim.valor;
                sim.struct = true;
            }
            sim.valor = result;
            contador++;
            this.list_simbolos.set(sim.id, sim);
        });
        let simbolo = new simbolo_1.Simbolo(this.id, tipo_1.TIPO.STRUCT, this.fila, this.columna, this.list_simbolos, false, true);
        simbolo.name_struct = template.id;
        entorno.addSimbolo(simbolo);
        //console.log("this", this);
        // //recorro la lista de valores para que se asigen a
        // //los valores del struct
        // this.values_atributos.forEach((x) => {
        //   let value = x.interpretar(entorno, arbol);
        //   if (!value)
        //     return new Excepcion(
        //       "Semantico",
        //       "Se requiere de un valor",
        //       this.fila + "",
        //       this.columna + ""
        //     );
        //   if (value instanceof Excepcion) return value;
        //     //comparo los tipos del atributo
        //   if (template?.lista_atributos[contador].tipo != x.tipo)
        //     return new Excepcion(
        //       "Semantico",
        //       "Existen atributos con tipos diferentes",
        //       this.fila + "",
        //       this.columna + ""
        //     );
        //   console.log(simbolo);
        //     let sim: Simbolo = new Simbolo(
        //       this.list_atributos[contador].id,
        //       this.list_atributos[contador].tipo,
        //       super.fila,
        //       super.columna,
        //       value,
        //       x.arra,
        //       x.struct
        //     );
        //     entorno_local.addSimbolo(sim);
        //   });
        //   entorno.addSimbolo
        // });
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("INSTANCIA STRUCT");
        nodo.agregarHijo(this.id);
        nodo.agregarHijo(this.id_struct);
        const atributos = new nodo_1.NodoAST("ATRIBUTOS");
        if (this.values_atributos != null || this.values_atributos != undefined) {
            this.values_atributos.forEach((element) => {
                atributos.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(atributos);
        }
        return nodo;
    }
}
exports.Dec_Struct = Dec_Struct;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/excepcion":115,"../../table/simbolo":116,"../../table/tablasimbolos":117,"../../table/tipo":118}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Struct = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const tablasimbolos_1 = require("../../table/tablasimbolos");
const excepcion_1 = require("../../table/excepcion");
const simbolo_1 = require("../../table/simbolo");
const Type_1 = require("../../table/Type");
const tipo_1 = require("../../table/tipo");
const nodo_1 = require("../../abs/nodo");
class Struct extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id nombre del struct
     * @param  {Atributo[]} lista_atributos
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(id, lista_atributos, fila, columna) {
        super(fila, columna);
        this.id = id;
        // this.lista_atributos = lista_atributos;
        this.lista_atributos = lista_atributos;
        //Object.assign(this, {lista_atributos});
        this.lista_simbolo = new Map();
        let contador = 0;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        const entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        if (!arbol.structs.has(this.id)) {
            this.lista_atributos.forEach((atributo) => {
                //Validación objeto
                //Validacion de id unico
                let variable = entorno_local.getSimbolo(atributo.id);
                const reasignable = true;
                if (variable) {
                    return new excepcion_1.Excepcion("Semantico", "atributo repetido", super.fila + "", super.columna + ""); //Errores.getInstance().push(new Error({tipo: 'semantico', linea: this.linea, descripcion: `El id: ${id} esta repetido en el type`}));
                }
                //Si se puede asignar
                const valor = this.getValue(atributo.tipo);
                //{reasignable, id, valor}
                variable = new simbolo_1.Simbolo(atributo.id, atributo.tipo, atributo.fila, atributo.columna, valor, this.arra, this.struct);
                //id: string, tipo: TIPO, fila: number, columna: number, valor: any, arreglo: boolean, struct: boolean
                //entorno.setSi(variable);
                this.lista_simbolo.set(atributo.id, variable);
                entorno_local.addSimbolo(variable);
            });
            //JSON.parse(JSON.stringify(this))
            arbol.structs.set(this.id, this);
            return new Type_1.Type(this.id, entorno_local.tabla);
        }
        return new excepcion_1.Excepcion("Semantico", "Existe un Struct con " + this.id, super.fila + "", super.columna + "");
    }
    getValue(tipo) {
        switch (tipo) {
            case tipo_1.TIPO.BOOLEAN:
                return false;
            case tipo_1.TIPO.ENTERO:
                return 0;
            case tipo_1.TIPO.DECIMAL:
                return 0.0;
            case tipo_1.TIPO.CARACTER:
                return "";
            case tipo_1.TIPO.CADENA:
                return "";
            case tipo_1.TIPO.ARREGLO:
            case tipo_1.TIPO.STRUCT:
                return undefined;
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("STRUCT");
        nodo.agregarHijo(this.id);
        if (this.lista_atributos != null || this.lista_atributos != undefined) {
            const lista_atributos = new nodo_1.NodoAST("LISTA ATRIBUTOS");
            this.lista_atributos.forEach((element) => {
                try {
                    lista_atributos.agregarHijoNodo(element.getNodo());
                }
                catch (e) {
                }
            });
            nodo.agregarHijoNodo(lista_atributos);
        }
        return nodo;
    }
}
exports.Struct = Struct;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../table/Type":113,"../../table/excepcion":115,"../../table/simbolo":116,"../../table/tablasimbolos":117,"../../table/tipo":118}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ternario = void 0;
const Instruccion_1 = require("../../abs/Instruccion");
const nodo_1 = require("../../abs/nodo");
const principal_1 = require("../../principal");
class Ternario extends Instruccion_1.Instruccion {
    /**
     * @param  {Instruccion} condicion
     * @param  {Instruccion} exp_true
     * @param  {Instruccion} exp_false
     * @param  {number} fila
     * @param  {number} columna
     * @returns number
     */
    constructor(condicion, exp_true, exp_false, fila, columna) {
        super(fila, columna);
        this.condicion = condicion;
        this.exp_true = exp_true;
        this.exp_false = exp_false;
        Object.assign(this, { condicion, exp_true, exp_false });
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     */
    interpretar(e, arbol) {
        return this.condicion.interpretar(e, arbol)
            ? this.exp_true.interpretar(e, arbol)
            : this.exp_false.interpretar(e, arbol);
    }
    traducir(e, arbol) {
        let x = this.condicion.traducir(e, arbol);
        let val1 = this.exp_true.traducir(e, arbol);
        let val2 = this.exp_false.traducir(e, arbol);
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp;
        principal_1.Principal.addComentario(" Expresion Ternaria ");
        let lab = principal_1.Principal.etiqueta;
        lab++;
        let l_verdadero = "L" + lab;
        lab++;
        let l_falso = "L" + lab;
        lab++;
        let l_salida = "L" + lab;
        principal_1.Principal.historial += "if (" + x + ") goto " + l_verdadero + ";\n";
        principal_1.Principal.historial += "goto " + l_falso + ";\n";
        principal_1.Principal.historial += l_verdadero + ":\n";
        principal_1.Principal.historial += t + " = " + val1 + ";\n";
        principal_1.Principal.historial += "goto " + l_salida + ";\n";
        principal_1.Principal.historial += l_falso + ":\n";
        principal_1.Principal.historial += t + " = " + val2 + ";\n";
        principal_1.Principal.historial += "goto " + l_salida + ";\n";
        principal_1.Principal.historial += l_salida + ":";
        principal_1.Principal.temp = temp;
        principal_1.Principal.etiqueta = lab;
        return t;
        // goto L0;
        // L0:
        // t0 = 1;
        // goto L2;
        // L1:
        // t0 = 2;
        // L2:
        // stack[(int)0] = t0;
        return "tenario en desarrollo";
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("TERNARIO");
        nodo.agregarHijo(this.condicion.getNodo());
        return nodo;
    }
}
exports.Ternario = Ternario;

},{"../../abs/Instruccion":1,"../../abs/nodo":2,"../../principal":112}],64:[function(require,module,exports){
const Traducir = require("./traduccion.js");
const Principal = require("./principal.js");

let consola = "";
const principall = "";
let dotGlobal = "";
if (typeof window !== 'undefined') {
    window.parseExternal = function(code) {
        const prin = new Principal.Principal();

        //ANALIZA EL CODIGO RECIBIDO
        prin.ejecutar(code);
        //ESTABLACE EL VALOR DE LA CONSOLA A consola
        consola = prin.getConsola();
        //obtiene codigo html para mostrar tabla de errores
        let codeTableError = prin.getErrores();
        let tablaSimboloss = prin.graficarTS();
        //grafica el AST DEL codigo ingresado
        let dotAst = prin.graficarAST();
        //obtiene el reporte de la gramatica
        let grammarReport = prin.getReporteGramatical();
        console.log(codeTableError);
        document.getElementById("tablaerror").innerHTML = " ";
        $('#tablaerror').append(codeTableError);

        document.getElementById("tablasimbolos").innerHTML = " ";
        $('#tablasimbolos').append(tablaSimboloss);

        document.getElementById("gramatica").innerHTML = " ";
        $('#gramatica').append(grammarReport);

        document.getElementById("ast").innerHTML = " ";
        dotGlobal = dotAst;
        //$('#ast').append(codigoAST);






    }
}


//funciona para obtener el valor de la consola
if (typeof window !== 'undefined') {
    window.actualizarConsola = function() {

        return consola;

    }
}

//Funcion que devuelve el codigo Dot para AST
if (typeof window !== 'undefined') {
    window.getDotAST = function() {

        return dotGlobal;

    }
}

if (typeof window !== 'undefined') {
    window.parseTraducir = function(code) {
        const traslate = new Traducir.Traducir();
        //ANALIZA EL CODIGO RECIBIDO

        consola = traslate.traducir(code);

    }
}
},{"./principal.js":112,"./traduccion.js":119}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Return = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const nodo_1 = require("../abs/nodo");
class Return extends Instruccion_1.Instruccion {
    /**
     * @param  {boolean} has_value
     * @param  {number} fila
     * @param  {number} columna
     * @param  {Instruccion} value?
     */
    constructor(has_value, fila, columna, value) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.value = value;
        this.has_value = has_value;
        this.tipo = tipo_1.TIPO.VOID;
        Object.assign(this, { has_value, value });
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     */
    interpretar(e, arbol) {
        if (this.has_value && this.value != null) {
            this.return_value = this.value.interpretar(e, arbol);
            this.tipo = this.value.tipo;
            return this;
        }
        else {
            return this;
        }
    }
    getNodo() {
        var _a;
        const nodo = new nodo_1.NodoAST("RETURN");
        if (this.has_value) {
            nodo.agregarHijoNodo((_a = this.value) === null || _a === void 0 ? void 0 : _a.getNodo());
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        //si viene un valor en el return
        if (this.has_value) {
            this.value.traducir(entorno, arbol);
        }
        else {
        }
    }
}
exports.Return = Return;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../table/tipo":118}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TSelemento = void 0;
const Instruccion_1 = require("../abs/Instruccion");
class TSelemento extends Instruccion_1.Instruccion {
    constructor(id, tipo, valor, fila, columna, entorno) {
        super(fila, columna);
        this.id = id;
        this.valor = valor;
        this.tipo = tipo;
        this.fila = fila;
        this.columna = columna;
        this.entorno = entorno;
    }
    interpretar(entorno, arbol) {
        throw new Error("Method not implemented.");
    }
    getNodo() {
        throw new Error("Method not implemented.");
    }
    traducir(entorno, arbol) {
        throw new Error("Method not implemented.");
    }
}
exports.TSelemento = TSelemento;

},{"../abs/Instruccion":1}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TSreporte = void 0;
class TSreporte {
    constructor() {
        this.listaElementos = new Array();
    }
}
exports.TSreporte = TSreporte;

},{}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asignacion = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const excepcion_1 = require("../table/excepcion");
const tipo_1 = require("../table/tipo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class Asignacion extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {Instruccion} exp
     * @param  {number} linea
     * @param  {number} columna
     */
    constructor(id, exp, linea, columna) {
        super(linea, columna);
        this.id = id;
        this.exp = exp;
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(e, arbol) {
        const variable = e.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        if ((this.exp == undefined || this.exp == null) && variable.arreglo) {
            variable.valor = [];
            e.actualizarSimboloEnTabla(variable);
            return;
        }
        else {
            let valor = this.exp.interpretar(e, arbol);
            let value = JSON.parse(JSON.stringify(valor));
            if (valor instanceof Array) {
                if (variable.valor instanceof Array) {
                    variable.valor = value;
                    e.actualizarSimboloEnTabla(variable);
                    return;
                }
                return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
            }
            //let value = JSON.parse(JSON.stringify(valor));
            if ((variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL) &&
                (this.exp.tipo == tipo_1.TIPO.ENTERO || this.exp.tipo == tipo_1.TIPO.DECIMAL)) {
                variable.valor = value;
            }
            else if (this.exp.tipo != variable.tipo) {
                //console.log(this.exp.tipo+" -> "+variable.tipo);
                return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
            }
            variable.valor = value;
            variable.tipo = this.exp.tipo;
            e.actualizarSimboloEnTabla(variable);
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ASIGNACION");
        nodo.agregarHijo(this.id + " ID ");
        try {
            nodo.agregarHijoNodo(this.exp.getNodo());
        }
        catch (error) {
        }
        return nodo;
    }
    // getNodo() {
    //   const nodo = new NodoAST("ASIGNACION");
    //   nodo.agregarHijo(this.id + " ID ");
    //   nodo.agregarHijoNodo(this.exp.getNodo());
    //   return nodo;
    // }
    traducir(e, arbol) {
        const variable = e.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        let valor = this.exp.traducir(e, arbol);
        if (valor instanceof Array) {
            if (variable.valor instanceof Array) {
                principal_1.Principal.historial += "/*Asingacion entre arreglos*/";
                principal_1.Principal.historial +=
                    "stack[(int) " + variable.posicion + "] =" + valor + ";\n";
                return;
            }
            return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
        }
        //let value = JSON.parse(JSON.stringify(valor));
        if ((variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL) &&
            (this.exp.tipo == tipo_1.TIPO.ENTERO || this.exp.tipo == tipo_1.TIPO.DECIMAL)) {
            principal_1.Principal.historial += "/*Asignacion de Variables*/\n";
            principal_1.Principal.historial +=
                "stack[(int)" + variable.posicion + "] =" + valor + ";\n";
        }
        else if (this.exp.tipo != variable.tipo) {
            return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
        }
        principal_1.Principal.historial += "/*Asignacion de Variables*/\n";
        principal_1.Principal.historial +=
            "stack[(int)" + variable.posicion + "] =" + valor + ";\n";
    }
}
exports.Asignacion = Asignacion;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tipo":118}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asignacion_Mas = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const excepcion_1 = require("../table/excepcion");
const tipo_1 = require("../table/tipo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class Asignacion_Mas extends Instruccion_1.Instruccion {
    /**
     * @param  {string} id
     * @param  {Instruccion} exp
     * @param  {number} linea
     * @param  {number} columna
     */
    constructor(id, exp, aumentar, linea, columna) {
        super(linea, columna);
        this.id = id;
        this.exp = exp;
        this.aumentar = aumentar;
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(e, arbol) {
        const variable = e.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        let valor = this.exp.interpretar(e, arbol);
        let value = JSON.parse(JSON.stringify(valor));
        if (valor instanceof Array) {
            // if(variable.valor instanceof Array){
            //   variable.valor = value;
            //   e.actualizarSimboloEnTabla(variable);
            //   return ;
            // }
            return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
        }
        //let value = JSON.parse(JSON.stringify(valor));
        if (this.exp.tipo != variable.tipo)
            return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
        if ((this.exp.tipo == tipo_1.TIPO.ENTERO || this.exp.tipo == tipo_1.TIPO.DECIMAL) &&
            (variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL)) {
            if (this.aumentar)
                variable.valor = Number(value) + Number(variable.valor);
            else
                variable.valor = Number(variable.valor) - Number(value);
            e.actualizarSimboloEnTabla(variable);
            return;
        }
        return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("ASIGNACION");
        nodo.agregarHijo(this.id + " ");
        nodo.agregarHijoNodo(this.exp.getNodo());
    }
    traducir(entorno, arbol) {
        let variable = entorno.getSimbolo(this.id);
        if (!variable) {
            return new excepcion_1.Excepcion("Semantico", "No existe la variable " + this.id, super.fila + "", super.columna + "");
        }
        //verifico si es una constante
        if (variable.constante) {
            return new excepcion_1.Excepcion("Semantico", "No se puede cambiar de valor a una constante " + this.id, super.fila + "", super.columna + "");
        }
        let valor = this.exp.traducir(entorno, arbol);
        let value = JSON.parse(JSON.stringify(valor));
        if (valor instanceof Array) {
            // if(variable.valor instanceof Array){
            //   variable.valor = value;
            //   e.actualizarSimboloEnTabla(variable);
            //   return ;
            // }
            return new excepcion_1.Excepcion("Semantico", "Se esperaba almacenar un Arreglo dentro de un arreglo " + this.id, super.fila + "", super.columna + "");
        }
        //let value = JSON.parse(JSON.stringify(valor));
        if (this.exp.tipo != variable.tipo)
            return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
        if ((this.exp.tipo == tipo_1.TIPO.ENTERO || this.exp.tipo == tipo_1.TIPO.DECIMAL) &&
            (variable.tipo == tipo_1.TIPO.ENTERO || variable.tipo == tipo_1.TIPO.DECIMAL)) {
            if (this.aumentar) {
                principal_1.Principal.historial += "/*Asignacion de variable: var += exp;*/\n";
                principal_1.Principal.historial += "stack[(int)" + variable.posicion + "] = stack[(int)" + variable.posicion + "] + " + valor + ";\n";
            }
            else {
                principal_1.Principal.historial += "/*Asignacion de variable: var -= exp;*/";
                principal_1.Principal.historial += "stack[(int)" + variable.posicion + "] = stack[(int)" + variable.posicion + "] - " + valor + ";\n";
            }
            return "";
        }
        return new excepcion_1.Excepcion("Semantico", "Tipos diferentes " + this.id, super.fila + "", super.columna + "");
    }
}
exports.Asignacion_Mas = Asignacion_Mas;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tipo":118}],70:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Break = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
class Break extends Instruccion_1.Instruccion {
    constructor(fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        return new Break(this.fila, this.columna);
        //return this;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("BREAK");
        return nodo;
    }
    traducir(entorno, arbol) {
        return new Break(this.fila, this.columna);
    }
}
exports.Break = Break;

},{"../abs/Instruccion":1,"../abs/nodo":2}],71:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Case = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const break_1 = require("./break");
const continue_1 = require("./continue");
const Return_1 = require("./Return");
class Case extends Instruccion_1.Instruccion {
    constructor(condicion, instrucciones, fila, columna) {
        super(fila, columna);
        this.condicion = condicion;
        this.instrucciones = instrucciones;
        this.fila = fila;
        this.columna = columna;
        this.ins = condicion;
    }
    interpretar(entorno, arbol) {
        const ab = "";
        //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        this.instrucciones.forEach((element) => {
            //ejecuta las instrucciones
            element.interpretar(nuevaTabla, arbol);
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                this.ins == element;
                //agregar reporte de consola
                //arbol.updateConsola(element.toString();)
            }
            if (element instanceof break_1.Break) {
                this.ins = element;
                return element;
            }
            if (element instanceof Return_1.Return) {
                this.ins == element;
                return element;
            }
        });
        //soy un crack
        return this.ins;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("CASE");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            instruccionesNodo.agregarHijo(element.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
    traducir(entorno, arbol) {
        const ab = "";
        //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        let lcont = principal_1.Principal.etiqueta;
        lcont++;
        let l = "L" + lcont;
        principal_1.Principal.historial += l + ":";
        this.instrucciones.forEach((element) => {
            //ejecuta las instrucciones
            element.traducir(nuevaTabla, arbol);
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                this.ins == element;
                //agregar reporte de consola
                //arbol.updateConsola(element.toString();)
            }
            if (element instanceof break_1.Break) {
                this.ins = element;
                return element;
            }
            if (element instanceof Return_1.Return) {
                this.ins == element;
                return element;
            }
        });
        principal_1.Principal.etiqueta = lcont; //Revisar el contador de etiquetas
        //soy un crack
        return this.ins;
    }
    traducir2(entorno, arbol) {
        this.ins = this;
        const condition = this.condicion.traducir(entorno, arbol);
        principal_1.Principal.historial += "\t";
        if (condition instanceof excepcion_1.Excepcion) {
            return condition;
        }
        principal_1.Principal.addComentario("------------>CASE<----------------");
        //verifica que la condicion sea TRUE
        //  if(condition){
        //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        //EJECUTA LAS INSTRUCCIONES
        this.instrucciones.forEach((element) => {
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                arbol.updateConsolaError(element.toString());
                console.log(element.toString());
            }
            else {
                const result = element.traducir(nuevaTabla, arbol);
                if (result instanceof excepcion_1.Excepcion) {
                    arbol.excepciones.push(result);
                    arbol.updateConsolaError(result.toString());
                }
                if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                    this.ins = result;
                    return result;
                }
                if (result instanceof Return_1.Return) {
                    this.ins = result;
                    //console.log(result.value?.traducir(nuevaTabla,arbol)+"VALUE RETURN");
                    return result;
                }
            }
        });
        return this.ins;
    }
}
exports.Case = Case;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"./Return":65,"./break":70,"./continue":72}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Continue = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
class Continue extends Instruccion_1.Instruccion {
    constructor(fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        return new Continue(this.fila, this.columna);
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("CONTINUE");
        return nodo;
    }
    traducir(entorno, arbol) {
        return new Continue(this.fila, this.columna);
    }
}
exports.Continue = Continue;

},{"../abs/Instruccion":1,"../abs/nodo":2}],73:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.D_Id = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const excepcion_1 = require("../table/excepcion");
const tipo_1 = require("../table/tipo");
const simbolo_1 = require("../table/simbolo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class D_Id extends Instruccion_1.Instruccion {
    /**
     * @param  {TIPO} tipo
     * @param  {string} id
     * @param  {boolean} constante
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(tipo, id, constante, fila, columna) {
        super(fila, columna);
        this.tipo = tipo;
        this.id = id;
        this.constante = constante;
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(e, arbol) {
        //Validacion de variable existente
        let variable = e.consultar_en_tabla_actual(this.id);
        if (variable)
            return new excepcion_1.Excepcion("Semantico", " no se pueden declarar variables con el mismo nombre" + this.id, super.fila + "", super.columna + "");
        //Creacion de variable en el entorno
        let valor = this.getValue(this.tipo);
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, valor, false, false);
        e.addSimbolo(simbolo); //valor: any, arreglo: boolean, struct: boolean
    }
    /**
     * @param  {TIPO} tipo
     */
    getValue(tipo) {
        switch (tipo) {
            case tipo_1.TIPO.BOOLEAN:
                return false;
            case tipo_1.TIPO.ENTERO:
                return 0;
            case tipo_1.TIPO.DECIMAL:
                return 0.0;
            case tipo_1.TIPO.CARACTER:
                return "";
            case tipo_1.TIPO.CADENA:
                return "";
            case tipo_1.TIPO.ARREGLO:
            case tipo_1.TIPO.STRUCT:
                return undefined;
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DECLARACION");
        if (this.tipo == tipo_1.TIPO.ARREGLO) {
            nodo.agregarHijo("ARREGLO");
        }
        else if (this.tipo == tipo_1.TIPO.BOOLEAN) {
            nodo.agregarHijo("BOOLEAN");
        }
        else if (this.tipo == tipo_1.TIPO.CADENA) {
            nodo.agregarHijo("CADENA");
        }
        else if (this.tipo == tipo_1.TIPO.CARACTER) {
            nodo.agregarHijo("CARACTER");
        }
        else if (this.tipo == tipo_1.TIPO.DECIMAL) {
            nodo.agregarHijo("DECIMAL");
        }
        else if (this.tipo == tipo_1.TIPO.ENTERO) {
            nodo.agregarHijo("ENTERO");
        }
        else if (this.tipo == tipo_1.TIPO.NULL) {
            nodo.agregarHijo("NULL");
        }
        else if (this.tipo == tipo_1.TIPO.STRUCT) {
            nodo.agregarHijo("STRUCT");
        }
        else if (this.tipo == tipo_1.TIPO.VOID) {
            nodo.agregarHijo("VOID");
        }
        nodo.agregarHijo(this.id);
        //nodo.agregarHijoNodo(this.);
        return nodo;
    }
    traducir(e, arbol) {
        //Validacion de variable existente
        let variable = e.getSimbolo(this.id); //e.getVariable(this.id);
        if (variable)
            return new excepcion_1.Excepcion("Semantico", " no se pueden declarar variables con el mismo nombre" + this.id, super.fila + "", super.columna + "");
        //Creacion de variable en el entorno
        let valor = this.getValue(this.tipo);
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, valor, false, false);
        e.addSimbolo(simbolo); //valor: any, arreglo: boolean, struct: boolean
        let cadena = "/*Declaracion de Variales*/\n" +
            "stack[(int)" + simbolo.posicion + "] = " + simbolo.valor + ";\n";
        principal_1.Principal.historial += cadena;
    }
    transform_cadena(x, arbol) {
        let return_string = "";
        return_string = "t" + principal_1.Principal.temp + " = H;\n";
        //obtener codigo ASCII de cada caracter de la cadena
        //cadena en el heap
        for (let i = 0; i < x.length; i++) {
            let item = x.charCodeAt(i);
            return_string += "heap[(int)H] = " + item + " ;\n";
            return_string += "H = H + 1;\n";
            //console.log(item);
        }
        return_string += "heap[(int)H] = -1 ;\n";
        return_string += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        principal_1.Principal.posicion++;
        return_string +=
            "t" + principal_1.Principal.posicion + " = P + " + principal_1.Principal.posicion + ";\n";
        return return_string;
    }
}
exports.D_Id = D_Id;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/simbolo":116,"../table/tipo":118}],74:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.D_IdExp = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const excepcion_1 = require("../table/excepcion");
const tipo_1 = require("../table/tipo");
const simbolo_1 = require("../table/simbolo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class D_IdExp extends Instruccion_1.Instruccion {
    /**
     * @param  {TIPO} tipo
     * @param  {string} id
     * @param  {Instruccion} exp
     * @param  {boolean} constante
     * @param  {number} fila
     * @param  {number} columna
     */
    constructor(tipo, id, exp, constante, fila, columna) {
        super(fila, columna);
        this.tipo = tipo;
        this.id = id;
        this.exp = exp;
        this.constante = constante;
    }
    /**
     * @param  {TablaSimbolos} e
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(e, arbol) {
        //Validacion de variable existente
        let variable = e.consultar_en_tabla_actual(this.id); //e.getVariable(this.id);
        if (variable)
            return new excepcion_1.Excepcion("Semantico", " no se pueden declarar variables con el mismo nombre" + this.id, super.fila + "", super.columna + "");
        //Creacion de variable en el entorno
        let valor = this.exp.interpretar(e, arbol);
        if (this.exp.tipo == tipo_1.TIPO.ARREGLO || this.exp.tipo == tipo_1.TIPO.STRUCT)
            valor = JSON.parse(JSON.stringify(valor));
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, valor, false, false);
        e.addSimbolo(simbolo); //valor: any, arreglo: boolean, struct: boolean
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DECLARACION");
        if (this.tipo == tipo_1.TIPO.ARREGLO) {
            nodo.agregarHijo("ARREGLO");
        }
        else if (this.tipo == tipo_1.TIPO.BOOLEAN) {
            nodo.agregarHijo("BOOLEAN");
        }
        else if (this.tipo == tipo_1.TIPO.CADENA) {
            nodo.agregarHijo("CADENA");
        }
        else if (this.tipo == tipo_1.TIPO.CARACTER) {
            nodo.agregarHijo("CARACTER");
        }
        else if (this.tipo == tipo_1.TIPO.DECIMAL) {
            nodo.agregarHijo("DECIMAL");
        }
        else if (this.tipo == tipo_1.TIPO.ENTERO) {
            nodo.agregarHijo("ENTERO");
        }
        else if (this.tipo == tipo_1.TIPO.NULL) {
            nodo.agregarHijo("NULL");
        }
        else if (this.tipo == tipo_1.TIPO.STRUCT) {
            nodo.agregarHijo("STRUCT");
        }
        else if (this.tipo == tipo_1.TIPO.VOID) {
            nodo.agregarHijo("VOID");
        }
        nodo.agregarHijo(this.id);
        nodo.agregarHijoNodo(this.exp.getNodo());
        return nodo;
    }
    traducir(e, arbol) {
        //Validacion de variable existente
        let variable = e.getSimbolo(this.id); //e.getVariable(this.id);
        if (variable)
            return new excepcion_1.Excepcion("Semantico", " no se pueden declarar variables con el mismo nombre" + this.id, super.fila + "", super.columna + "");
        //Creacion de variable en el entorno
        let valor = this.exp.traducir(e, arbol);
        if (this.exp.tipo == tipo_1.TIPO.ARREGLO || this.exp.tipo == tipo_1.TIPO.STRUCT) {
            principal_1.Principal.historial +=
                "/*           Crear metodo que copie un arreglo          */\n";
            valor = JSON.parse(JSON.stringify(valor));
        }
        let simbolo = new simbolo_1.Simbolo(this.id, this.tipo, super.fila, super.columna, valor, false, false);
        e.addSimbolo(simbolo); //valor: any, arreglo: boolean, struct: boolean
        if (tipo_1.TIPO.CADENA == simbolo.tipo) {
            let puntero = this.transform_cadena(valor, arbol);
            principal_1.Principal.historial +=
                "stack[(int)" + simbolo.posicion + "] = " + puntero + ";\n ";
            return puntero;
        }
        principal_1.Principal.historial +=
            "stack[(int)" + simbolo.posicion + "] = " + valor + ";\n ";
    }
    transform_cadena(x, arbol) {
        principal_1.Principal.addComentario("Creando variable de tipo string");
        let temp = principal_1.Principal.temp;
        temp++;
        let t0 = "t" + temp;
        principal_1.Principal.historial += t0 + " = H;\n";
        principal_1.Principal.temp = temp;
        //obtener codigo ASCII de cada caracter de la cadena
        //cadena en el heap
        for (let i = 0; i < x.length; i++) {
            let item = x.charCodeAt(i);
            principal_1.Principal.historial += "heap[(int)H] = " + item + " ;\n";
            principal_1.Principal.historial += "H = H + 1;\n";
            //console.log(item);
        }
        principal_1.Principal.historial += "heap[(int)H] = -1 ;\n";
        principal_1.Principal.historial += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        principal_1.Principal.temp++;
        let t = "t" + principal_1.Principal.temp;
        //Principal.historial += t + " = P + " + Principal.posicion + ";\n";
        //Principal.historial += t + "= " + t + " + " + 1 + ";\n";
        //Principal.historial += "stack[(int)" + t + "] = " + t0 + ";\n";
        return t0;
    }
}
exports.D_IdExp = D_IdExp;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/simbolo":116,"../table/tipo":118}],75:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Default = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const break_1 = require("./break");
const Return_1 = require("./Return");
class Default extends Instruccion_1.Instruccion {
    constructor(instrucciones, fila, columna) {
        super(fila, columna);
        this.instrucciones = instrucciones;
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        this.instrucciones.forEach((element) => {
            //ejecuta las instrucciones
            element.interpretar(nuevaTabla, arbol);
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                //agregar reporte de consola
                //arbol.updateConsola(element.toString();)
            }
            if (element instanceof break_1.Break) {
                return true;
            }
            if (element instanceof Return_1.Return) {
                return element;
            }
        });
        return this;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DEFAULT");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            instruccionesNodo.agregarHijo(element.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
    traducir(entorno, arbol) {
        const ab = "";
        //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        let lcont = principal_1.Principal.etiqueta;
        lcont++;
        let l = "L" + lcont;
        principal_1.Principal.historial += l + ":";
        this.instrucciones.forEach((element) => {
            //ejecuta las instrucciones
            element.traducir(nuevaTabla, arbol);
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                this.ins == element;
                //agregar reporte de consola
                //arbol.updateConsola(element.toString();)
            }
            if (element instanceof break_1.Break) {
                this.ins = element;
                return element;
            }
            if (element instanceof Return_1.Return) {
                this.ins == element;
                return element;
            }
        });
        principal_1.Principal.etiqueta = lcont; //Revisar el contador de etiquetas
        //soy un crack
        return this.ins;
    }
}
exports.Default = Default;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"./Return":65,"./break":70}],76:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoWhile = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const tipo_1 = require("../table/tipo");
const break_1 = require("./break");
const continue_1 = require("./continue");
const Return_1 = require("./Return");
class DoWhile extends Instruccion_1.Instruccion {
    // FOR( DECLARACION; CONDICION; ACTUALIZACION )
    constructor(condicion, instrucciones, fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.condicion = condicion;
        this.instrucciones = instrucciones;
        this.hayContinue = false;
    }
    /**
     * METODO INTERPRETAR CICLO FOR
     * @param entorno
     * @param arbol
     */
    interpretar(entorno, arbol) {
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        //ejecuta las instrucciones que estan dentro del DO_WHILE
        this.instrucciones.forEach((element) => {
            const result = element.interpretar(nuevaTabla, arbol);
            if (result instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(result);
                arbol.updateConsolaError(result.toString());
            }
            //VERIFICA SI VIENE UN CONTINUE
            if (result instanceof continue_1.Continue) {
                this.hayContinue = true;
                //break;
                return;
            }
            if (result instanceof break_1.Break) {
                return result;
            }
            if (result instanceof Return_1.Return) {
                return result;
            }
        });
        while (true) {
            //NUEVO ENTONO DENTRO DEL CICLO
            const nuevaTabla2 = new tablasimbolos_1.TablaSimbolos(nuevaTabla);
            try {
                const condicionn = this.condicion.interpretar(nuevaTabla2, arbol);
                if (condicionn instanceof excepcion_1.Excepcion) {
                    return condicionn;
                }
            }
            catch (error) {
                return this.condicion;
            }
            //VERIFICA QUE LA CONDICION SEA TIPO BOOLEAN
            if (this.condicion.tipo == tipo_1.TIPO.BOOLEAN) {
                //VERIFICA QUE LA CONDICION SE CUMPLA sea TRUE
                if (this.condicion.interpretar(nuevaTabla2, arbol) == true) {
                    //ejecuta las instrucciones que estan dentro del DO_WHILE
                    this.instrucciones.forEach((element) => {
                        const result = element.interpretar(nuevaTabla2, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                        }
                        //VERIFICA SI VIENE UN CONTINUE
                        if (result instanceof continue_1.Continue) {
                            this.hayContinue = true;
                            //break;
                            return;
                        }
                        if (result instanceof break_1.Break) {
                            return;
                        }
                        if (result instanceof Return_1.Return) {
                            return result;
                        }
                    });
                }
                else {
                    break;
                }
            }
            else {
                //break;
                return new excepcion_1.Excepcion("Semantico", 'Tipo de condicion no boleana en While', `${this.fila}`, `${this.columna}`);
            }
            //SI HAY UN CONTINUE
            if (this.hayContinue) {
                this.hayContinue = false;
                console.log("CONTINUE DENTRO DEL WHILE");
                continue;
            }
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("WHILE");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            instruccionesNodo.agregarHijoNodo(element.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
    traducir(entorno, arbol) {
        //obtenemos la etiqueta actual
        let lcont = principal_1.Principal.etiqueta;
        lcont++;
        principal_1.Principal.addComentario("DO-WHILE");
        principal_1.Principal.historial += "L" + lcont + ":\n";
        let etiquetaWhile = lcont;
        lcont++;
        //se la asignamos a FOR
        let l = "L" + (lcont);
        lcont++;
        let lsalida = lcont;
        //ejecuta la condicion
        const value_case = this.condicion.traducir(entorno, arbol);
        if (value_case instanceof excepcion_1.Excepcion) {
            return value_case;
        }
        principal_1.Principal.historial += "if( " + value_case + ") goto " + l + ";\n"
            + "goto L" + lsalida + ";\n";
        principal_1.Principal.historial += l + ":\n";
        this.instrucciones.forEach((x) => {
            const value = x.traducir(entorno, arbol);
            if (value instanceof excepcion_1.Excepcion) {
                return value;
            }
        });
        principal_1.Principal.historial += "goto L" + etiquetaWhile + ";\n";
        principal_1.Principal.historial += "L" + lsalida + ":";
        principal_1.Principal.etiqueta = lsalida;
    }
}
exports.DoWhile = DoWhile;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./break":70,"./continue":72}],77:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.For = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const tipo_1 = require("../table/tipo");
const break_1 = require("./break");
const continue_1 = require("./continue");
const Return_1 = require("./Return");
class For extends Instruccion_1.Instruccion {
    // FOR( DECLARACION; CONDICION; ACTUALIZACION )
    constructor(declaracion, condicion, actualizacion, instrucciones, fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.declaracion = declaracion;
        this.condicion = condicion;
        this.actualizacion = actualizacion;
        this.instrucciones = instrucciones;
        this.hayContinue = false;
        this.hayBreak = false;
    }
    /**
     * METODO INTERPRETAR CICLO FOR
     * @param entorno
     * @param arbol
     */
    interpretar(entorno, arbol) {
        const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
        const declaracion = this.declaracion.interpretar(nuevaTabla, arbol);
        if (declaracion instanceof excepcion_1.Excepcion) {
            return declaracion;
        }
        while (true) {
            this.hayContinue = false;
            //NUEVO ENTONO DENTRO DEL CICLO
            const nuevaTabla2 = new tablasimbolos_1.TablaSimbolos(nuevaTabla);
            try {
                const condicionn = this.condicion.interpretar(nuevaTabla2, arbol);
                if (condicionn instanceof excepcion_1.Excepcion) {
                    return condicionn;
                }
            }
            catch (error) {
                return this.condicion;
            }
            //VERIFICA QUE LA CONDICION SE CUMPLA
            if (this.condicion.tipo == tipo_1.TIPO.BOOLEAN) {
                if (this.condicion.interpretar(nuevaTabla2, arbol) == true) {
                    //ejecuta las instrucciones que estan dentro del FOR
                    this.instrucciones.forEach((element) => {
                        const result = element.interpretar(nuevaTabla2, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                            console.log(result.toString());
                        }
                        //VERIFICA SI VIENE UN CONTINUE
                        if (result instanceof continue_1.Continue) {
                            this.hayContinue = true;
                            const actualiza = this.actualizacion.interpretar(nuevaTabla2, arbol);
                            if (actualiza instanceof excepcion_1.Excepcion) {
                                return actualiza;
                            }
                            //break;
                            return;
                        }
                        if (result instanceof break_1.Break) {
                            this.hayBreak = true;
                            return;
                        }
                        if (result instanceof Return_1.Return) {
                            return result;
                        }
                    });
                }
                else {
                    break;
                }
            }
            else {
                //break;
                return new excepcion_1.Excepcion("Semantico", 'Tipo de condicion no boleana en For', `${this.fila}`, `${this.columna}`);
            }
            //SI HAY UN CONTINUE
            if (this.hayContinue) {
                this.hayContinue = false;
                console.log("CONTINUE DENTRO DEL FOR");
                continue;
            }
            if (this.hayBreak) {
                break;
            }
            //ACTUALIZA LA VARIABLE DE ITERACION
            const actual = this.actualizacion.interpretar(nuevaTabla2, arbol);
            if (actual instanceof excepcion_1.Excepcion) {
                return actual;
            }
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("FOR");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            instruccionesNodo.agregarHijoNodo(element.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
    traducir(entorno, arbol) {
        //realizamos la declaracion  o asignacion
        const asgina = this.declaracion.traducir(entorno, arbol);
        if (asgina instanceof excepcion_1.Excepcion) {
            return asgina;
        }
        //obtenemos la etiqueta actual
        let lcont = principal_1.Principal.etiqueta;
        lcont++;
        principal_1.Principal.addComentario("FOR");
        principal_1.Principal.historial += "L" + lcont + ":\n";
        let etiquetaFor = lcont;
        lcont++;
        //se la asignamos a FOR
        let l = "L" + (lcont);
        lcont++;
        let Lasgina = lcont;
        lcont++;
        let lsalida = lcont;
        //ejecuta la condicion
        const value_case = this.condicion.traducir(entorno, arbol);
        if (value_case instanceof excepcion_1.Excepcion) {
            return value_case;
        }
        principal_1.Principal.historial += "if( " + value_case + ") goto " + l + ";\n"
            + "goto L" + lsalida + ";\n";
        principal_1.Principal.historial += l + ":\n";
        this.instrucciones.forEach((x) => {
            if (x instanceof continue_1.Continue) {
                principal_1.Principal.historial += "goto L" + Lasgina + ";\n";
                return;
            }
            const value = x.traducir(entorno, arbol);
            if (value instanceof excepcion_1.Excepcion) {
                return value;
            }
        });
        principal_1.Principal.historial += "L" + Lasgina + ":";
        //REALIZA INCREMENTO
        const incremental = this.actualizacion.traducir(entorno, arbol);
        if (incremental instanceof excepcion_1.Excepcion) {
            return incremental;
        }
        principal_1.Principal.historial += "goto L" + etiquetaFor + ";\n";
        principal_1.Principal.historial += "L" + lsalida + ":";
        principal_1.Principal.etiqueta = lsalida;
    }
}
exports.For = For;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./break":70,"./continue":72}],78:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForEach = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const identificador_1 = require("../expresiones/identificador");
const primitivo_1 = require("../expresiones/primitivo");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const tipo_1 = require("../table/tipo");
const asignacion_1 = require("./asignacion");
const break_1 = require("./break");
const continue_1 = require("./continue");
const declaracion_id_1 = require("./declaracion_id");
const Return_1 = require("./Return");
class ForEach extends Instruccion_1.Instruccion {
    //for letra in cadena{
    //instrucciones ...
    //}
    constructor(temporal, condicion, instrucciones, fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.temporal = temporal;
        this.condicion = condicion;
        this.instrucciones = instrucciones;
        this.hayContinue = false;
        this.hayBreak = false;
    }
    /**
     * METODO INTERPRETAR CICLO FOR
     * @param entorno
     * @param arbol
     */
    interpretar(entorno, arbol) {
        //verifica si es un array
        if (this.condicion instanceof Array) {
            console.log("LA CONDICION EN EACH ES ARRAY");
            //declara la variable temporal
            const declaracion_temp = new declaracion_id_1.D_Id(tipo_1.TIPO.ENTERO, this.temporal, false, this.fila, this.columna);
            const declaracion_tmp = declaracion_temp.interpretar(entorno, arbol);
            if (declaracion_tmp instanceof excepcion_1.Excepcion) {
                return declaracion_tmp;
            }
            //recorremos el aaray
            this.condicion.forEach((x) => {
                const nueva_tabla = new tablasimbolos_1.TablaSimbolos(entorno);
                //asignamos el valor de caga posicion al temporal
                //creamos el objeto primitivo del valor en la posicion i
                const valor = new primitivo_1.Primitivo(tipo_1.TIPO.ENTERO, x.interpretar(nueva_tabla, arbol) - 1, this.fila, this.columna);
                //asignacion del valor a la variable temporal
                const asignacion_temp = new asignacion_1.Asignacion(this.temporal, valor, this.fila, this.columna);
                asignacion_temp.interpretar(nueva_tabla, arbol);
                //realizamos las instrucciones
                this.instrucciones.forEach((element) => {
                    const result = element.interpretar(nueva_tabla, arbol);
                    if (result instanceof excepcion_1.Excepcion) {
                        arbol.excepciones.push(result);
                        arbol.updateConsolaError(result.toString());
                    }
                    if (result instanceof break_1.Break) {
                        this.hayBreak = true;
                        return result;
                    }
                    if (result instanceof Return_1.Return) {
                        return result;
                    }
                    //VERIFICA SI VIENE UN CONTINUE
                    if (result instanceof continue_1.Continue) {
                        this.hayContinue = true;
                        return result;
                    }
                });
            });
        }
        else {
            console.log("/********/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*");
            //verifica que la condicion no sea una Excepcion
            const condition = this.condicion.interpretar(entorno, arbol);
            if (condition instanceof excepcion_1.Excepcion) {
                return condition;
            }
            //verifica que sea un identificador
            if (this.condicion instanceof identificador_1.Identificador) {
                //verifica que exista el IDENTIFICADOR
                const variable = entorno.getSimbolo(this.condicion.id + "");
                if (variable == null) {
                    return new excepcion_1.Excepcion("Semantico", "No existe la variable " + `${this.condicion}`, `${this.fila}`, `${this.columna}`);
                }
                //declara la variable temporal
                const declaracion_temp = new declaracion_id_1.D_Id(variable.tipo, this.temporal, false, this.fila, this.columna);
                const declaracion_tmp = declaracion_temp.interpretar(entorno, arbol);
                if (declaracion_tmp instanceof excepcion_1.Excepcion) {
                    return declaracion_tmp;
                }
                //--------------------------------verifica si es un ARREGLO-----------------------------
                if (variable.arreglo) {
                    var cantidad = this.condicion.interpretar(entorno, arbol);
                    //console.log("CANTIDAD "+cantidad);
                    if (cantidad instanceof excepcion_1.Excepcion) {
                        return cantidad;
                    }
                    for (let i = 0; i < cantidad.length; i++) {
                        const nueva_tablaa = new tablasimbolos_1.TablaSimbolos(entorno);
                        // //declaracion
                        // const declaracion_temp=new D_Id(variable.tipo,this.temporal,false,this.fila,this.columna);
                        // const declaracion_tmp=declaracion_temp.interpretar(entorno,arbol);
                        // if(declaracion_tmp instanceof Excepcion){
                        //     return declaracion_tmp;
                        // }
                        //creamos el objeto primitivo del valor en la posicion i
                        const valor = new primitivo_1.Primitivo(variable.tipo, cantidad[i], this.fila, this.columna);
                        //asignacion del valor a la variable temporal
                        const asignacion_temp = new asignacion_1.Asignacion(this.temporal, valor, this.fila, this.columna);
                        const asig = asignacion_temp.interpretar(nueva_tablaa, arbol);
                        if (asig instanceof excepcion_1.Excepcion) {
                            return asig;
                        }
                        //ejecucion de las instrucciones
                        //ejecuta las instrucciones que estan dentro del FOR
                        this.instrucciones.forEach((element) => {
                            const result = element.interpretar(nueva_tablaa, arbol);
                            if (result instanceof excepcion_1.Excepcion) {
                                arbol.excepciones.push(result);
                                arbol.updateConsolaError(result.toString());
                            }
                            if (result instanceof break_1.Break) {
                                this.hayBreak = true;
                                return result;
                            }
                            if (result instanceof Return_1.Return) {
                                return result;
                            }
                            //VERIFICA SI VIENE UN CONTINUE
                            if (result instanceof continue_1.Continue) {
                                this.hayContinue = true;
                                return result;
                            }
                        });
                        //verifica si viene un continue en ForEach   
                        if (this.hayContinue) {
                            //i++;
                            this.hayContinue = false;
                            continue;
                        }
                        if (this.hayBreak) {
                            this.hayBreak = false;
                            break;
                        }
                    }
                }
                //--------------------caso contrario es una variable tradicional-----------------------
                //--------------------caso contrario es una variable tradicional-----------------------
                //--------------------caso contrario es una variable tradicional-----------------------
                //--------------------caso contrario es una variable tradicional-----------------------
                else {
                    var cantidad = this.condicion.interpretar(entorno, arbol);
                    if (cantidad instanceof excepcion_1.Excepcion) {
                        return cantidad;
                    }
                    for (let i = 0; i < cantidad.length; i++) {
                        const nueva_tabla = new tablasimbolos_1.TablaSimbolos(entorno);
                        //creamos el objeto primitivo del valor en la posicion i
                        const valor = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, cantidad.charAt(i), this.fila, this.columna);
                        //asignacion del valor a la variable temporal
                        const asignacion_temp = new asignacion_1.Asignacion(this.temporal, valor, this.fila, this.columna);
                        asignacion_temp.interpretar(nueva_tabla, arbol);
                        //ejecucion de las instrucciones
                        //ejecuta las instrucciones que estan dentro del FOR
                        this.instrucciones.forEach((element) => {
                            const result = element.interpretar(nueva_tabla, arbol);
                            if (result instanceof excepcion_1.Excepcion) {
                                arbol.excepciones.push(result);
                                arbol.updateConsolaError(result.toString());
                            }
                            if (result instanceof break_1.Break) {
                                this.hayBreak = true;
                                return result;
                            }
                            if (result instanceof Return_1.Return) {
                                return result;
                            }
                            //VERIFICA SI VIENE UN CONTINUE
                            if (result instanceof continue_1.Continue) {
                                this.hayContinue = true;
                                return result;
                            }
                        });
                        //verifica si viene un continue en ForEach   
                        if (this.hayContinue) {
                            //i++;
                            this.hayContinue = false;
                            continue;
                        }
                        if (this.hayBreak) {
                            this.hayBreak = false;
                            break;
                        }
                    }
                }
            }
            else {
                //verifica qsi es un arreglo
                //new Arreglo ($1,$3,$6,$1,$3,@1.first_line,@1.first_column)
                //declara la variable temporal
                const declaracion_temp = new declaracion_id_1.D_Id(tipo_1.TIPO.CADENA, this.temporal, false, this.fila, this.columna);
                const declaracion_tmp = declaracion_temp.interpretar(entorno, arbol);
                if (declaracion_tmp instanceof excepcion_1.Excepcion) {
                    return declaracion_tmp;
                }
                console.log("ENTRA AQUI");
                var cantidad = this.condicion.interpretar(entorno, arbol);
                if (cantidad instanceof excepcion_1.Excepcion) {
                    return cantidad;
                }
                for (let i = 0; i < cantidad.length; i++) {
                    const nueva_tabla = new tablasimbolos_1.TablaSimbolos(entorno);
                    //creamos el objeto primitivo del valor en la posicion i
                    const valor = new primitivo_1.Primitivo(tipo_1.TIPO.CADENA, cantidad.charAt(i), this.fila, this.columna);
                    //asignacion del valor a la variable temporal
                    const asignacion_temp = new asignacion_1.Asignacion(this.temporal, valor, this.fila, this.columna);
                    asignacion_temp.interpretar(nueva_tabla, arbol);
                    //ejecucion de las instrucciones
                    //ejecuta las instrucciones que estan dentro del FOR
                    this.instrucciones.forEach((element) => {
                        const result = element.interpretar(nueva_tabla, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                        }
                        if (result instanceof break_1.Break) {
                            this.hayBreak = true;
                            return result;
                        }
                        if (result instanceof Return_1.Return) {
                            return result;
                        }
                        //VERIFICA SI VIENE UN CONTINUE
                        if (result instanceof continue_1.Continue) {
                            this.hayContinue = true;
                            return result;
                        }
                    });
                    //verifica si viene un continue en ForEach   
                    if (this.hayContinue) {
                        //i++;
                        this.hayContinue = false;
                        continue;
                    }
                    if (this.hayBreak) {
                        this.hayBreak = false;
                        break;
                    }
                }
            }
            //SI ES Una CADENA NORMAL
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("FOR EACH");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            instruccionesNodo.agregarHijoNodo(element.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
}
exports.ForEach = ForEach;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../expresiones/identificador":34,"../expresiones/primitivo":49,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./asignacion":68,"./break":70,"./continue":72,"./declaracion_id":73}],79:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Funcion = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const tablasimbolos_1 = require("../table/tablasimbolos");
const excepcion_1 = require("../table/excepcion");
const break_1 = require("./break");
const Return_1 = require("./Return");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class Funcion extends Instruccion_1.Instruccion {
    constructor(id, instrucciones, tipo_return = tipo_1.TIPO.VOID, fila, columna, lista_parametros) {
        super(fila, columna);
        this.id = id;
        this.instrucciones = instrucciones;
        this.tipo = tipo_return;
        this.lista_parametros = lista_parametros;
        this.tipo_return = tipo_return;
        Object.assign(this, { id, instrucciones, tipo_return, lista_parametros });
    }
    interpretar(entorno, arbol) {
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        let return_value;
        this.instrucciones.forEach((instruccion) => {
            let value = instruccion.interpretar(entorno_local, arbol);
            if (value instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(value);
                arbol.consola = arbol.consola + value;
            }
            if (value instanceof break_1.Break) {
                arbol.excepciones.push(new excepcion_1.Excepcion("Semantico", "Sentencia break fuera de ciclo ", super.fila + "", super.columna + ""));
                arbol.consola = arbol.consola + value;
            }
            if (value instanceof Return_1.Return) {
                //this.tipo = value
                if (this.tipo == value.value.tipo) {
                    //return  return_value = instruccion.return_value;
                    //console.log(value.value?.interpretar(entorno,arbol)+" VALOR KK");
                    return (return_value = value.return_value);
                }
            }
        });
        return return_value;
    }
    hasReturn() {
        return this.tipo_return != tipo_1.TIPO.VOID;
    }
    hasParametros() {
        return this.lista_parametros != null;
    }
    getParametrosSize() {
        if (this.lista_parametros)
            return this.hasParametros() ? this.lista_parametros.length : 0;
        return undefined;
    }
    toString() {
        const parametros = this.lista_parametros != null ? this.lista_parametros.length : 0;
        let salida = `Funcion: ${this.id} - Parametros: ${parametros} - Return Asignado: ${this.hasReturn() ? "Si" : "No"}`;
        return salida;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("FUNCION");
        nodo.agregarHijo(this.id);
        const parametros = new nodo_1.NodoAST("PARAMETROS");
        if (this.lista_parametros != null) {
            this.lista_parametros.forEach((instr) => {
                const parametro = new nodo_1.NodoAST("PARAMETROS");
                parametro.agregarHijo(instr.tipo + "");
                parametro.agregarHijo(instr.id + "");
                parametros.agregarHijoNodo(parametro);
            });
            nodo.agregarHijoNodo(parametros);
        }
        const instrucciones = new nodo_1.NodoAST("INSTRUCCIONES");
        if (this.instrucciones != null) {
            this.instrucciones.forEach((instr) => {
                instrucciones.agregarHijoNodo(instr.getNodo());
            });
            nodo.agregarHijoNodo(instrucciones);
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        let return_value;
        principal_1.Principal.addComentario("  Traduciendo Funcion  " + this.id);
        principal_1.Principal.historial += "void " + this.id + "(){\n";
        let temp = principal_1.Principal.temp;
        temp++;
        let t = "t" + temp + ";\n"; //puntero de parametros
        this.instrucciones.forEach((instruccion) => {
            let value = instruccion.traducir(entorno_local, arbol);
            if (value instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(value);
                arbol.consola = arbol.consola + value;
            }
            if (value instanceof break_1.Break) {
                arbol.excepciones.push(new excepcion_1.Excepcion("Semantico", "Sentencia break fuera de ciclo ", super.fila + "", super.columna + ""));
                arbol.consola = arbol.consola + value;
            }
            if (value instanceof Return_1.Return) {
                //this.tipo = value
                if (this.tipo == value.value.tipo) {
                    //return  return_value = instruccion.return_value;
                    //console.log(value.value?.traducir(entorno,arbol)+" VALOR KK");
                    principal_1.Principal.addComentario("se encontro Return Cambiando Puntero");
                    return (return_value = value.return_value);
                }
            }
        });
        principal_1.Principal.historial += "return ;";
        //""return"" return_value;
        principal_1.Principal.historial += "\n}\n";
    }
}
exports.Funcion = Funcion;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./break":70}],80:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graficar = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const tipo_1 = require("../table/tipo");
const TSelemento_1 = require("./TSelemento");
const TSreporte_1 = require("./TSreporte");
class Graficar extends Instruccion_1.Instruccion {
    constructor(fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
    }
    interpretar(entorno, arbol) {
        const reporte = new TSreporte_1.TSreporte();
        //agrega la TS GLOBAL
        arbol.TSglobal.tabla.forEach((x) => {
            let elemento = new TSelemento_1.TSelemento(x.id + "", this.getTipoDato(x.tipo), x.valor + "", x.fila, x.columna);
            reporte.listaElementos.push(elemento);
        });
        //agrega la TS LOCAL        
        entorno.tabla.forEach((x) => {
            let elemento = new TSelemento_1.TSelemento(x.id + "", this.getTipoDato(x.tipo), x.valor + "", x.fila, x.columna);
            reporte.listaElementos.push(elemento);
        });
        arbol.graficarts.push(reporte);
    }
    getTipoDato(tipo) {
        if (tipo == tipo_1.TIPO.ARREGLO) {
            return "ARREGLO";
        }
        else if (tipo == tipo_1.TIPO.BOOLEAN) {
            return "BOOLEAN";
        }
        else if (tipo == tipo_1.TIPO.CADENA) {
            return "CADENA";
        }
        else if (tipo == tipo_1.TIPO.CARACTER) {
            return "CARACTER";
        }
        else if (tipo == tipo_1.TIPO.DECIMAL) {
            return "DECIMAL";
        }
        else if (tipo == tipo_1.TIPO.ENTERO) {
            return "ENTERO";
        }
        else if (tipo == tipo_1.TIPO.NULL) {
            return "NULL";
        }
        else if (tipo == tipo_1.TIPO.STRUCT) {
            return "STRUCT";
        }
        else if (tipo == tipo_1.TIPO.VOID) {
            return "VOID";
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("Graficar_TS");
        return nodo;
    }
    traducir(entorno, arbol) {
        return new Graficar(this.fila, this.columna);
    }
}
exports.Graficar = Graficar;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../table/tipo":118,"./TSelemento":66,"./TSreporte":67}],81:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.If = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const tipo_1 = require("../table/tipo");
const break_1 = require("./break");
const continue_1 = require("./continue");
const Return_1 = require("./Return");
const principal_1 = require("../principal");
class If extends Instruccion_1.Instruccion {
    constructor(condicion, instruccionesIf, instruccionesElse, ElseIf, fila, columna) {
        super(fila, columna);
        this.condicion = condicion;
        this.instruccionesIf = instruccionesIf;
        this.instruccionesElse = instruccionesElse;
        this.ElseIf = ElseIf;
        this.fila = fila;
        this.columna = columna;
        this.ins = condicion;
    }
    interpretar(entorno, arbol) {
        this.ins = this;
        //console.log(this.condicion.interpretar(entorno,arbol));
        const condition = this.condicion.interpretar(entorno, arbol);
        if (condition instanceof excepcion_1.Excepcion) {
            return condition;
        }
        //verifica que la condicion sea boolean
        if (this.condicion.tipo == tipo_1.TIPO.BOOLEAN) {
            //verifica que la condicion sea TRUE
            if (condition) {
                //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
                const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
                //EJECUTA LAS INSTRUCCIONES
                this.instruccionesIf.forEach((element) => {
                    if (element instanceof excepcion_1.Excepcion) {
                        arbol.excepciones.push(element);
                        arbol.updateConsolaError(element.toString());
                        console.log(element.toString());
                    }
                    else {
                        const result = element.interpretar(nuevaTabla, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                        }
                        if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                            this.ins = result;
                            return result;
                        }
                        if (result instanceof Return_1.Return) {
                            this.ins = result;
                            //console.log(result.value?.interpretar(nuevaTabla,arbol)+"VALUE RETURN");
                            return result;
                        }
                    }
                });
            }
            //SI ES FALSA
            else {
                //console.log("la condicion tiene que entrar a else")
                if (this.instruccionesElse != null || this.instruccionesElse != undefined) {
                    //crea un nuevo entorno
                    const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
                    //ejecuta instrucciones else
                    this.instruccionesElse.forEach((element2) => {
                        if (element2 instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(element2);
                            arbol.updateConsolaError(element2.toString());
                            console.log(element2.toString());
                        }
                        else {
                            const result = element2.interpretar(nuevaTabla, arbol);
                            if (result instanceof excepcion_1.Excepcion) {
                                ///
                                ///
                                arbol.excepciones.push(result);
                                arbol.updateConsolaError(result.toString());
                            }
                            if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                                this.ins = result;
                                return result;
                            }
                            if (result instanceof Return_1.Return) {
                                this.ins = result;
                                //console.log(result.value?.interpretar(nuevaTabla,arbol)+"VALUE RETURN");
                                return result;
                            }
                        }
                    });
                }
                //INSTRUCCIONES ELSE IF
                else if (this.ElseIf != null || this.ElseIf != undefined) {
                    //ejecuta instrucciones else
                    const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
                    this.ElseIf.forEach((element2) => {
                        if (element2 instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(element2);
                            arbol.updateConsolaError(element2.toString());
                            console.log(element2.toString());
                        }
                        else {
                            const result = element2.interpretar(nuevaTabla, arbol);
                            if (result instanceof excepcion_1.Excepcion) {
                                ///
                                ///
                                arbol.excepciones.push(result);
                                arbol.updateConsolaError(result.toString());
                            }
                            if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                                this.ins = result;
                                return result;
                            }
                            if (result instanceof Return_1.Return) {
                                this.ins = result;
                                //console.log(result.value?.interpretar(nuevaTabla,arbol)+"VALUE RETURN");
                                return result;
                            }
                        }
                    });
                }
            }
        }
        else {
            console.log('TIPO DATO NO BOOLEANO');
            return new excepcion_1.Excepcion("Semantico", "Tipo de dato no Booleano en IF", `${this.fila}`, `${this.columna}`);
        }
        return this.ins;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("IF");
        const instruccionesIf = new nodo_1.NodoAST("INSTRUCCION IF");
        this.instruccionesIf.forEach((instr) => {
            instruccionesIf.agregarHijoNodo(instr.getNodo());
        });
        nodo.agregarHijoNodo(instruccionesIf);
        if (this.instruccionesElse != null || this.instruccionesElse != undefined) {
            const instruccionesElse = new nodo_1.NodoAST("INSTRUCCIONES ELSE");
            this.instruccionesElse.forEach((instr) => {
                if (instr instanceof excepcion_1.Excepcion) { }
                else {
                    instruccionesElse.agregarHijoNodo(instr.getNodo());
                }
            });
            nodo.agregarHijoNodo(instruccionesElse);
        }
        else if (this.ElseIf != null || this.ElseIf != undefined) {
            const elseIf = new nodo_1.NodoAST("INSTRUCCIONES ELSE IF");
            this.ElseIf.forEach((instr) => {
                elseIf.agregarHijoNodo(instr.getNodo());
            });
            nodo.agregarHijoNodo(elseIf);
        }
        return nodo;
    }
    /**if===> */
    traducir(entorno, arbol) {
        this.ins = this;
        const condition = this.condicion.traducir(entorno, arbol);
        principal_1.Principal.historial += "\t";
        if (condition instanceof excepcion_1.Excepcion) {
            return condition;
        }
        //verifica que la condicion sea boolean
        if (this.condicion.tipo == tipo_1.TIPO.BOOLEAN) {
            //declaracion de etiquetas y temporales
            let tem = principal_1.Principal.temp;
            tem++;
            let t = "t" + tem; //temporal donde se almacenara el resultado de la condicion
            t = condition;
            let lcont = principal_1.Principal.etiqueta;
            lcont++;
            let l_veradero = "L" + lcont;
            lcont++;
            let l_falso = "L" + lcont;
            lcont++;
            let l_salida = "L" + lcont;
            principal_1.Principal.etiqueta = lcont;
            principal_1.Principal.addComentario("------------>If<----------------");
            principal_1.Principal.historial += "if(" + t + ") goto " + l_veradero + ";\n" +
                "goto " + l_falso + ";\n";
            //console.log(this.condicion.traducir(entorno,arbol));
            principal_1.Principal.historial += l_veradero + ":\n";
            //verifica que la condicion sea TRUE
            //  if(condition){
            //CREA UN ENTORNO PARA LAS INSTRUCCIONES DENTRO DEL IF
            const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
            //EJECUTA LAS INSTRUCCIONES
            this.instruccionesIf.forEach((element) => {
                if (element instanceof excepcion_1.Excepcion) {
                    arbol.excepciones.push(element);
                    arbol.updateConsolaError(element.toString());
                    console.log(element.toString());
                }
                else {
                    const result = element.traducir(nuevaTabla, arbol);
                    if (result instanceof excepcion_1.Excepcion) {
                        arbol.excepciones.push(result);
                        arbol.updateConsolaError(result.toString());
                    }
                    if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                        this.ins = result;
                        return result;
                    }
                    if (result instanceof Return_1.Return) {
                        this.ins = result;
                        //console.log(result.value?.traducir(nuevaTabla,arbol)+"VALUE RETURN");
                        return result;
                    }
                }
            });
            //  }
            //SI ES FALSA
            // else{
            principal_1.Principal.historial += "goto " + l_salida + ";\n";
            principal_1.Principal.addComentario("Else ");
            principal_1.Principal.historial += l_falso + ":\n";
            //console.log("la condicion tiene que entrar a else")
            if (this.instruccionesElse != null || this.instruccionesElse != undefined) {
                //crea un nuevo entorno
                const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
                //ejecuta instrucciones else
                this.instruccionesElse.forEach((element2) => {
                    if (element2 instanceof excepcion_1.Excepcion) {
                        arbol.excepciones.push(element2);
                        arbol.updateConsolaError(element2.toString());
                        console.log(element2.toString());
                    }
                    else {
                        const result = element2.traducir(nuevaTabla, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            ///
                            ///
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                        }
                        if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                            this.ins = result;
                            return result;
                        }
                        if (result instanceof Return_1.Return) {
                            this.ins = result;
                            //console.log(result.value?.traducir(nuevaTabla,arbol)+"VALUE RETURN");
                            return result;
                        }
                    }
                });
            }
            //INSTRUCCIONES ELSE IF
            else if (this.ElseIf != null || this.ElseIf != undefined) {
                //ejecuta instrucciones else
                const nuevaTabla = new tablasimbolos_1.TablaSimbolos(entorno);
                this.ElseIf.forEach((element2) => {
                    if (element2 instanceof excepcion_1.Excepcion) {
                        arbol.excepciones.push(element2);
                        arbol.updateConsolaError(element2.toString());
                        console.log(element2.toString());
                    }
                    else {
                        const result = element2.traducir(nuevaTabla, arbol);
                        if (result instanceof excepcion_1.Excepcion) {
                            ///
                            ///
                            arbol.excepciones.push(result);
                            arbol.updateConsolaError(result.toString());
                        }
                        if (result instanceof break_1.Break || result instanceof continue_1.Continue) {
                            this.ins = result;
                            return result;
                        }
                        if (result instanceof Return_1.Return) {
                            this.ins = result;
                            //console.log(result.value?.traducir(nuevaTabla,arbol)+"VALUE RETURN");
                            return result;
                        }
                    }
                });
            }
            //}
            principal_1.Principal.addComentario("Etiqeta de salida");
            principal_1.Principal.historial += l_salida + ":";
        }
        else {
            console.log('TIPO DATO NO BOOLEANO');
            return new excepcion_1.Excepcion("Semantico", "Tipo de dato no Booleano en IF", `${this.fila}`, `${this.columna}`);
        }
        return this.ins;
    }
}
exports.If = If;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./break":70,"./continue":72}],82:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.List_Declaracion = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const simbolo_1 = require("../table/simbolo");
const excepcion_1 = require("../table/excepcion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class List_Declaracion extends Instruccion_1.Instruccion {
    constructor(tipo, list_id, fila, columna) {
        super(fila, columna);
        this.tipo = tipo;
        this.list_id = list_id;
    }
    interpretar(entorno, arbolL) {
        let bandera = true;
        this.list_id.forEach((x) => {
            if (x instanceof excepcion_1.Excepcion) {
                bandera = false;
                //console.log(x);
            }
            if (bandera) {
                let sim = entorno.consultar_en_tabla_actual(x);
                if (sim)
                    return new excepcion_1.Excepcion("Semantico", x + " ya se encuentra definida", this.fila + "", "" + this.columna);
                let simbolo = new simbolo_1.Simbolo(x, this.tipo, this.fila, this.columna, this.getValue(this.tipo), false, false);
                entorno.addSimbolo(simbolo);
            }
            else {
                console.log(x);
                //console.log("ENTRA EN ELSE");
                bandera = true;
            }
        });
    }
    getValue(tipo) {
        switch (tipo) {
            case tipo_1.TIPO.BOOLEAN:
                return false;
            case tipo_1.TIPO.ENTERO:
                return 0;
            case tipo_1.TIPO.DECIMAL:
                return 0.0;
            case tipo_1.TIPO.CARACTER:
                return "";
            case tipo_1.TIPO.CADENA:
                return "";
            case tipo_1.TIPO.ARREGLO:
            case tipo_1.TIPO.STRUCT:
                return undefined;
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("DECLARACION");
        this.list_id.forEach((instr) => {
            nodo.agregarHijo(this.tipo + "");
            nodo.agregarHijo(instr + "");
        });
        return nodo;
    }
    traducir(entorno, arbol) {
        this.list_id.forEach((x) => {
            let sim = entorno.getSimbolo(x);
            if (sim)
                return new excepcion_1.Excepcion("Semantico", x + " ya se encuentra definida", this.fila + "", "" + this.columna);
            let simbolo = new simbolo_1.Simbolo(x, this.tipo, this.fila, this.columna, this.getValue(this.tipo), false, false);
            entorno.addSimbolo(simbolo);
            principal_1.Principal.historial += "/*Declaracion de un Listado de Id, con el mismo Tipo*/\n";
            principal_1.Principal.historial += "stack[(int) " + simbolo.posicion + "] = " + simbolo.valor + " ;\n";
        });
    }
}
exports.List_Declaracion = List_Declaracion;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/simbolo":116,"../table/tipo":118}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Llamada = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const excepcion_1 = require("../table/excepcion");
const simbolo_1 = require("../table/simbolo");
const tipo_1 = require("../table/tipo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
class Llamada extends Instruccion_1.Instruccion {
    // clase para llamar funciones
    // con o sin parametros
    constructor(id, fila, columna, lista_parmetros) {
        super(fila, columna);
        this.id = id;
        this.lista_parametros = lista_parmetros;
        this.tipo = tipo_1.TIPO.NULL;
    }
    //para llamar una funcion
    //debo primero verificar que la funcion exista     ..................listo
    //debo comparar la cantidad de parametros          ..................listo
    //comparar que el tipo de parametro coincida con los de la funcion...
    //ejecutar
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        var _a, _b;
        let llamar_funcion = arbol.getFunctionByName(this.id);
        if (!llamar_funcion)
            return new excepcion_1.Excepcion("Semantico", "No se encontro una funcion con el nombre " + this.id, this.fila + "", this.columna + "");
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        if (llamar_funcion.getParametrosSize()) //verifico que no sea undefined
            if (llamar_funcion.getParametrosSize() == ((_a = this.lista_parametros) === null || _a === void 0 ? void 0 : _a.length)) { //verifico que tengan el mismo tamano
                let contador = 0;
                (_b = this.lista_parametros) === null || _b === void 0 ? void 0 : _b.forEach((x) => {
                    let result_parametros = x.interpretar(entorno, arbol);
                    if (result_parametros instanceof excepcion_1.Excepcion)
                        return result_parametros;
                    if (result_parametros instanceof Array && llamar_funcion.lista_parametros[contador]['tipo'] == tipo_1.TIPO.ARREGLO) {
                        //value_return = JSON.parse(JSON.stringify(re));
                        let ident = llamar_funcion.lista_parametros[contador]['id'] + "";
                        let simbolo = new simbolo_1.Simbolo(ident, x.tipo, super.fila, super.columna, result_parametros, true, false);
                        entorno_local.addSimbolo(simbolo);
                    }
                    else if (llamar_funcion.lista_parametros[contador]['tipo'] == x.tipo || (llamar_funcion.lista_parametros[contador]["tipo"] == tipo_1.TIPO.ENTERO && x.tipo == tipo_1.TIPO.DECIMAL)) {
                        let ident = llamar_funcion.lista_parametros[contador]['id'] + "";
                        let simbolo = new simbolo_1.Simbolo(ident, x.tipo, super.fila, super.columna, result_parametros, false, false);
                        //agregar la verificacion de arrays y struct
                        entorno_local.addSimbolo(simbolo);
                    }
                    else {
                        return new excepcion_1.Excepcion("Semantico", "Tipo de dato diferente en Parametros de la llamada.", super.fila + "", super.columna + "");
                    }
                    contador++;
                });
            }
            else {
                return new excepcion_1.Excepcion("Semantico", "hay una diferencia en la cantidad de parametros esperados.", super.fila + "", super.columna + "");
            }
        let exec_funcion = llamar_funcion.interpretar(entorno_local, arbol);
        if (exec_funcion instanceof excepcion_1.Excepcion)
            return exec_funcion;
        this.tipo = llamar_funcion.tipo;
        return exec_funcion;
    }
    getNodo() {
        var _a;
        const nodo = new nodo_1.NodoAST("LLAMADA FUNCION");
        nodo.agregarHijo(this.id + " ");
        const parametros = new nodo_1.NodoAST("PARAMETROS");
        if (this.lista_parametros != null || this.lista_parametros != undefined) {
            (_a = this.lista_parametros) === null || _a === void 0 ? void 0 : _a.forEach(element => {
                parametros.agregarHijoNodo(element.getNodo());
            });
            nodo.agregarHijoNodo(parametros);
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        var _a, _b;
        let llamar_funcion = arbol.getFunctionByName(this.id);
        if (!llamar_funcion)
            return new excepcion_1.Excepcion("Semantico", "No se encontro una funcion con el nombre " + this.id, this.fila + "", this.columna + "");
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        if (llamar_funcion.getParametrosSize()) //verifico que no sea undefined
            if (llamar_funcion.getParametrosSize() == ((_a = this.lista_parametros) === null || _a === void 0 ? void 0 : _a.length)) { //verifico que tengan el mismo tamano
                let contador = 0;
                //posicion relativa dentro del stack
                let pos_relative = principal_1.Principal.temp;
                principal_1.Principal.historial += "\tP = " + principal_1.Principal.temp + ";\n";
                (_b = this.lista_parametros) === null || _b === void 0 ? void 0 : _b.forEach((x) => {
                    let result_parametros = x.interpretar(entorno, arbol);
                    pos_relative++;
                    let t = "\tt" + pos_relative + ";\n";
                    if (result_parametros instanceof excepcion_1.Excepcion)
                        return result_parametros;
                    if (result_parametros instanceof Array && llamar_funcion.lista_parametros[contador]['tipo'] == tipo_1.TIPO.ARREGLO) {
                        //value_return = JSON.parse(JSON.stringify(re));
                        let ident = llamar_funcion.lista_parametros[contador]['id'] + "";
                        let simbolo = new simbolo_1.Simbolo(ident, x.tipo, super.fila, super.columna, result_parametros, true, false);
                        entorno_local.addSimbolo(simbolo);
                    }
                    else if (llamar_funcion.lista_parametros[contador]['tipo'] == x.tipo || (llamar_funcion.lista_parametros[contador]["tipo"] == tipo_1.TIPO.ENTERO && x.tipo == tipo_1.TIPO.DECIMAL)) {
                        let ident = llamar_funcion.lista_parametros[contador]['id'] + "";
                        let simbolo = new simbolo_1.Simbolo(ident, x.tipo, super.fila, super.columna, result_parametros, false, false);
                        //agregar la verificacion de arrays y struct
                        entorno_local.addSimbolo(simbolo);
                    }
                    else {
                        return new excepcion_1.Excepcion("Semantico", "Tipo de dato diferente en Parametros de la llamada.", super.fila + "", super.columna + "");
                    }
                    contador++;
                });
            }
            else {
                return new excepcion_1.Excepcion("Semantico", "hay una diferencia en la cantidad de parametros esperados.", super.fila + "", super.columna + "");
            }
        let exec_funcion = llamar_funcion.interpretar(entorno_local, arbol);
        if (exec_funcion instanceof excepcion_1.Excepcion)
            return exec_funcion;
        this.tipo = llamar_funcion.tipo;
        return exec_funcion;
    }
}
exports.Llamada = Llamada;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/simbolo":116,"../table/tablasimbolos":117,"../table/tipo":118}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Main = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const break_1 = require("./break");
const principal_1 = require("../principal");
class Main extends Instruccion_1.Instruccion {
    constructor(instrucciones, fila, columna) {
        super(fila, columna);
        this.instrucciones = instrucciones;
    }
    interpretar(entorno, arbol) {
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        this.instrucciones.forEach((element) => {
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                arbol.updateConsolaError(element.toString());
                console.log(element.toString());
            }
            else {
                let value = element.interpretar(entorno_local, arbol);
                if (value instanceof excepcion_1.Excepcion) {
                    arbol.excepciones.push(value);
                    arbol.updateConsolaError(value.toString());
                    console.log(value);
                }
                if (value instanceof break_1.Break) {
                    let excepcion = new excepcion_1.Excepcion("Semantico", "Sentencia Break fuera de ciclo", this.fila + "", this.columna + "");
                    arbol.excepciones.push(excepcion);
                    arbol.updateConsolaError(excepcion.toString());
                }
            }
        });
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("MAIN");
        const instruccioness = new nodo_1.NodoAST("INSTRUCCIONES");
        //if(t){
        this.instrucciones.forEach((instr) => {
            if (instr instanceof excepcion_1.Excepcion) {
            }
            else {
                instruccioness.agregarHijoNodo(instr.getNodo());
            }
        });
        nodo.agregarHijoNodo(instruccioness);
        //}
        return nodo;
    }
    traducir(entorno, arbol) {
        let entorno_local = new tablasimbolos_1.TablaSimbolos(entorno);
        principal_1.Principal.addComentario("Metodo Main");
        principal_1.Principal.historial += "int main(){\n";
        principal_1.Principal.historial += "\tP = 0;\n";
        principal_1.Principal.historial += "\tH = 0;\n";
        this.instrucciones.forEach((element) => {
            principal_1.Principal.historial += "\t";
            if (element instanceof excepcion_1.Excepcion) {
                arbol.excepciones.push(element);
                arbol.updateConsolaError(element.toString());
            }
            else {
                let value = element.traducir(entorno_local, arbol);
                if (value instanceof excepcion_1.Excepcion) {
                    arbol.excepciones.push(value);
                    arbol.updateConsolaError(value.toString());
                    console.log(value);
                }
                if (value instanceof break_1.Break) {
                    let excepcion = new excepcion_1.Excepcion("Semantico", "Sentencia Break fuera de ciclo", this.fila + "", this.columna + "");
                    arbol.excepciones.push(excepcion);
                    arbol.updateConsolaError(excepcion.toString());
                }
            }
        });
        principal_1.Principal.historial += "return 0 ;\n";
        principal_1.Principal.historial += "}\n";
    }
}
exports.Main = Main;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"./break":70}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Print = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const tipo_1 = require("../table/tipo");
const excepcion_1 = require("../table/excepcion");
const identificador_1 = require("../expresiones/identificador");
const primitivo_1 = require("../expresiones/primitivo");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const Parser = require("../analizador/variable");
class Print extends Instruccion_1.Instruccion {
    /**
     * @param  {number} fila
     * @param  {number} columna
     * @param  {Instruccion[]} value?
     */
    constructor(fila, columna, value, newLine) {
        super(fila, columna);
        this.newLine = false;
        this.fila = fila;
        this.columna = columna;
        this.value = value;
        this.newLine = newLine;
    }
    /**
     * @param  {TablaSimbolos} entorno
     * @param  {Arbol} arbol
     * @returns any
     */
    interpretar(entorno, arbol) {
        //verifica que exista un valor para imprimir
        if (this.value != undefined) {
            //ejecuta las instrucciones para imprimir
            this.value.forEach((exp_print) => {
                //interpreta las expresiones
                let valorTemporal = "";
                let value = exp_print.interpretar(entorno, arbol);
                if (value instanceof excepcion_1.Excepcion) {
                    console.log(value);
                    return value;
                }
                //verifica que el valor resultante de la interpretacion exista
                if (value != undefined) {
                    //verifica que la expresion sea un identificador
                    if (exp_print instanceof identificador_1.Identificador) {
                        let simbol = entorno.getSimbolo(exp_print.id);
                        value = simbol.toString();
                    }
                    //caso contrario es una cadena
                    else {
                        let dolar = "$";
                        //verifica que la expresion incluya el $
                        if (value.toString().includes(dolar)) {
                            //console.log(" VALUE to.string"+value.toString());
                            //verifica que sea un primitivo de tipo cadena "asdfsdfs ${}" para verificar que venga incrustado codigo
                            if (exp_print instanceof primitivo_1.Primitivo) {
                                if (exp_print.tipo == tipo_1.TIPO.CADENA) {
                                    //analiza la cadena
                                    const instruccioness = Parser.parse(value.toString());
                                    //verifica que la lista contenga instrucciones
                                    instruccioness.forEach(element => {
                                        let tmp = element.interpretar(entorno, arbol);
                                        if (tmp instanceof excepcion_1.Excepcion) {
                                            arbol.excepciones.push(tmp);
                                            arbol.updateConsolaError(tmp + "");
                                            tmp = "";
                                            console.log("ERROR");
                                        }
                                        valorTemporal += tmp + "";
                                    });
                                    //console.log(instruccioness);
                                }
                            }
                            value = valorTemporal.toString().replace('\\n', '\n');
                        }
                        else {
                            value = value.toString().replace('\\n', '\n');
                        }
                    }
                }
                else {
                    value = "Indefinido";
                }
                //console.log("ESTO VIENE "+value+"      aallllvvvv ");
                arbol.consola += value + ((this.newLine) ? "\n" : "");
                console.log(value);
            });
        }
    }
    print_struct(exp) {
        let formato = exp.name_struct + " ( ";
        if (exp.valor instanceof Map) {
            exp.valor.forEach((element) => {
                console.log(element);
            });
        }
        return formato;
    }
    getNodo() {
        var _a;
        const nodo = new nodo_1.NodoAST("IMPRIMIR");
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.forEach((x) => {
            nodo.agregarHijoNodo(x.getNodo());
        });
        //un nodo
        return nodo;
    }
    traducir(entorno, arbol) {
        var _a;
        let cadena = "";
        let value_cadena = "";
        //me sirve para agregarle las comillas a la cadena
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.forEach((x) => {
            let tr = x.traducir(entorno, arbol); //t[0]
            if (x instanceof identificador_1.Identificador) {
                Print.print = true;
                principal_1.Principal.addComentario("Imprimiendo una expresion cadena tr" + tr);
                principal_1.Principal.historial += "P = " + tr + ";\n";
                principal_1.Principal.historial += "printString();\n";
                //Principal.historial += "printf(\"%s\",\"\");\n"
            }
            else if (tipo_1.TIPO.CADENA == x.tipo) {
                Print.print = true;
                cadena += this.transform_cadena(x.value, arbol);
                cadena += "printString();";
            }
            else if (tipo_1.TIPO.ENTERO == x.tipo) {
                cadena += 'printf("%d",' + tr + ");\n";
            }
            else if (tipo_1.TIPO.BOOLEAN == x.tipo) {
                cadena += 'printf("%f",' + tr + ");\n";
            }
            else if (tipo_1.TIPO.DECIMAL == x.tipo) {
                principal_1.Principal.addComentario("Imprimiendo Decimal");
                cadena += 'printf("%f",' + tr + ");\n";
            }
            else if (tipo_1.TIPO.CARACTER == x.tipo) {
                cadena += 'printf("%c",' + "(int)(" + tr + "));\n";
            }
            /*
            encerrar en un if para ver si requiere saltos de linea
             */
            cadena += (this.newLine) ? 'printf("\\n");\n' : "\n";
            //if (TIPO.ENTERO == x.tipo) cadena += 'printf("%f"+stack['+x.posicion+']);';
            //cadena += " %f";
            // value_cadena += isCadena ? ', "' + x.value + '"' : "," + x.value;
            // isCadena = false;
        });
        principal_1.Principal.historial += cadena;
        return "";
    }
    //TRANSFORMA CADENA A CODIGO ASCII DE CADA CARACTER QUE CONTENGA
    transform_cadena(x, arbol) {
        let return_string = "";
        return_string = "t" + principal_1.Principal.temp + " = H;\n";
        //obtener codigo ASCII de cada caracter de la cadena
        //cadena en el heap
        if (!x)
            x = "c";
        for (let i = 0; i < x.length - 1; i++) {
            let item = x.charCodeAt(i);
            return_string += "heap[(int)H] = " + item + " ;\n";
            return_string += "H = H + 1;\n";
            //console.log(item);
        }
        return_string += "heap[(int)H] = -1 ;\n";
        return_string += "H = H + 1;\n";
        //referencia de la cadena desde el stack
        //Principal.posicion;
        return_string +=
            "t" + principal_1.Principal.temp + " = P + " + principal_1.Principal.posicion + ";\n";
        return return_string;
    }
}
exports.Print = Print;
Print.print = false;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../analizador/variable":5,"../expresiones/identificador":34,"../expresiones/primitivo":49,"../principal":112,"../table/excepcion":115,"../table/tipo":118}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Switch = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const break_1 = require("./break");
class Switch extends Instruccion_1.Instruccion {
    constructor(condicion, lst_case, defaultt, fila, columna) {
        super(fila, columna);
        this.condicion = condicion;
        this.lst_case = lst_case;
        this.defaultt = defaultt;
        this.fila = fila;
        this.columna = columna;
        this.flag_break = false;
    }
    interpretar(entorno, arbol) {
        //verifica si la lista de casos es nula
        if (this.lst_case == null) {
            //console.log("LISTA CASE LLEGA NULL");
            //SI DEFAULT no es nulo, lo ejecuta.
            if (!this.defaultt != null) {
                this.defaultt.interpretar(entorno, arbol);
            }
        }
        else {
            //console.log("LISTA CASE LLEGA LLENA");
            //SI LA LISTA DE CASOS CONTIENE ALGUNO
            const resul = null;
            this.lst_case.forEach((casee) => {
                //interpreta la condicion del CASE
                //console.log(casee.condicion +" JAMES");
                const value_case = casee.condicion.interpretar(entorno, arbol);
                if (value_case instanceof excepcion_1.Excepcion) {
                    return value_case;
                }
                //obtiene el valor del SWITCH
                const value_expresion = this.condicion.interpretar(entorno, arbol);
                //verifica que el valor de la condicion SWITCH no se una excepcion
                if (value_expresion instanceof excepcion_1.Excepcion) {
                    return value_expresion;
                }
                if (value_expresion + "" === value_case + "") {
                    //si el valor de la condicion SWITCH COINDICE CON LA CONDICION CASE
                    // ENTONCES LO EJECUTA
                    const resultt = casee.interpretar(entorno, arbol);
                    if (resultt instanceof excepcion_1.Excepcion) {
                        return resultt;
                    }
                    if (resultt instanceof break_1.Break) {
                        this.flag_break = true;
                        return resultt; // break
                    }
                }
            });
            // si this.flag_break  == true --> el caso evaluado trae break
            if (!this.flag_break) {
                if (this.defaultt != null || this.defaultt != undefined) {
                    this.defaultt.interpretar(entorno, arbol);
                }
            }
        }
        return this;
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("SWITCH");
        const lst_cases = new nodo_1.NodoAST("LISTA_CASE");
        this.lst_case.forEach((element) => {
            lst_cases.agregarHijoNodo(element.getNodo());
        });
        nodo.agregarHijoNodo(lst_cases);
        if (this.defaultt != null || this.defaultt != undefined) {
            const defaultt = new nodo_1.NodoAST("DEFAULT");
            defaultt.agregarHijoNodo(this.defaultt.getNodo());
            nodo.agregarHijoNodo(defaultt);
        }
        return nodo;
    }
    traducir(entorno, arbol) {
        //verifica si la lista de casos es nula
        if (this.lst_case == null) {
            //console.log("LISTA CASE LLEGA NULL");
            //SI DEFAULT no es nulo, lo ejecuta.
            if (!this.defaultt != null) {
                this.defaultt.traducir(entorno, arbol);
                // Principal.historial += "L"+lsalida+":"  
                // Principal.etiqueta = lsalida;  
            }
        }
        else {
            //console.log("LISTA CASE LLEGA LLENA");
            //SI LA LISTA DE CASOS CONTIENE ALGUNO
            const resul = null;
            const value_expresion = this.condicion.traducir(entorno, arbol);
            //verifica que el valor de la condicion SWITCH no se una excepcion
            if (value_expresion instanceof excepcion_1.Excepcion) {
                return value_expresion;
            }
            let lcont = principal_1.Principal.etiqueta;
            let lsalida = lcont + this.lst_case.length + 1;
            this.lst_case.forEach((casee) => {
                //interpreta la condicion del CASE
                //console.log(casee.condicion +" JAMES");
                const value_case = casee.condicion.traducir(entorno, arbol);
                if (value_case instanceof excepcion_1.Excepcion) {
                    return value_case;
                }
                //obtiene el valor del SWITCH
                lcont++;
                let l = "L" + lcont;
                principal_1.Principal.historial += "if( " + value_case + "==" + value_expresion + ") goto " + l + ";\n"
                    + "goto L" + lsalida + ";\n";
            });
            //esto es lo que tenes que traducir a una etiqueta de salida
            if (this.defaultt != null || this.defaultt != undefined) {
                this.defaultt.traducir(entorno, arbol);
            }
            this.lst_case.forEach((casee) => {
                const caseee = casee.traducir(entorno, arbol);
                if (caseee instanceof break_1.Break) {
                    //Principal.addComentario("Etiqeta de salida");
                    principal_1.Principal.historial += "goto L" + lsalida + ";\n";
                }
            });
            // si this.flag_break  == true --> el caso evaluado trae break
            //Principal.addComentario("Etiqeta de salida");
            principal_1.Principal.historial += "L" + lsalida + ":";
            principal_1.Principal.etiqueta = lsalida;
        }
        return this;
    }
}
exports.Switch = Switch;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"./break":70}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.While = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
const principal_1 = require("../principal");
const excepcion_1 = require("../table/excepcion");
const tablasimbolos_1 = require("../table/tablasimbolos");
const tipo_1 = require("../table/tipo");
const break_1 = require("./break");
const continue_1 = require("./continue");
const Return_1 = require("./Return");
class While extends Instruccion_1.Instruccion {
    // FOR( DECLARACION; CONDICION; ACTUALIZACION )
    constructor(condicion, instrucciones, fila, columna) {
        super(fila, columna);
        this.fila = fila;
        this.columna = columna;
        this.condicion = condicion;
        this.instrucciones = instrucciones;
        this.hayContinue = false;
    }
    /**
     * METODO INTERPRETAR CICLO FOR
     * @param entorno
     * @param arbol
     */
    interpretar(entorno, arbol) {
        while (true) {
            const condicionn = this.condicion.interpretar(entorno, arbol);
            if (condicionn instanceof excepcion_1.Excepcion) {
                return condicionn;
            }
            //VERIFICA QUE LA CONDICION SEA TIPO BOOLEAN
            if (this.condicion.tipo == tipo_1.TIPO.BOOLEAN) {
                //VERIFICA QUE LA CONDICION SE CUMPLA sea TRUE
                if (condicionn == true) {
                    //NUEVO ENTONO DENTRO DEL CICLO
                    const nuevaTabla2 = new tablasimbolos_1.TablaSimbolos(entorno);
                    //ejecuta las instrucciones que estan dentro del WHILE
                    this.instrucciones.forEach((element) => {
                        if (element instanceof excepcion_1.Excepcion) {
                            arbol.excepciones.push(element);
                            arbol.updateConsolaError(element.toString());
                            console.log(element.toString());
                        }
                        else {
                            const result = element.interpretar(nuevaTabla2, arbol);
                            if (result instanceof excepcion_1.Excepcion) {
                                arbol.excepciones.push(result);
                                arbol.updateConsolaError(result.toString());
                            }
                            //VERIFICA SI VIENE UN CONTINUE
                            if (result instanceof continue_1.Continue) {
                                this.hayContinue = true;
                                //break;
                                return;
                            }
                            if (result instanceof break_1.Break) {
                                return;
                            }
                            if (result instanceof Return_1.Return) {
                                return result;
                            }
                        }
                    });
                }
                else {
                    break;
                }
            }
            else {
                //break;
                return new excepcion_1.Excepcion("Semantico", 'Tipo de condicion no boleana en While', `${this.fila}`, `${this.columna}`);
            }
            //SI HAY UN CONTINUE
            if (this.hayContinue) {
                this.hayContinue = false;
                console.log("CONTINUE DENTRO DEL WHILE");
                continue;
            }
        }
    }
    getNodo() {
        const nodo = new nodo_1.NodoAST("WHILE");
        const instruccionesNodo = new nodo_1.NodoAST("INSTRUCCIONES");
        this.instrucciones.forEach((element) => {
            if (element instanceof excepcion_1.Excepcion) { }
            else {
                instruccionesNodo.agregarHijoNodo(element.getNodo());
            }
        });
        nodo.agregarHijoNodo(instruccionesNodo);
        return nodo;
    }
    traducir(entorno, arbol) {
        //obtenemos la etiqueta actual
        let lcont = principal_1.Principal.etiqueta;
        lcont++;
        principal_1.Principal.addComentario("WHILE");
        principal_1.Principal.historial += "L" + lcont + ":\n";
        let etiquetaWhile = lcont;
        lcont++;
        //se la asignamos a while
        let l = "L" + (lcont);
        lcont++;
        let lsalida = lcont;
        const value_case = this.condicion.traducir(entorno, arbol);
        if (value_case instanceof excepcion_1.Excepcion) {
            return value_case;
        }
        principal_1.Principal.historial += "if( " + value_case + ") goto " + l + ";\n"
            + "goto L" + lsalida + ";\n";
        principal_1.Principal.historial += l + ":\n";
        this.instrucciones.forEach((x) => {
            const value = x.traducir(entorno, arbol);
            if (value instanceof excepcion_1.Excepcion) {
                return value;
            }
        });
        principal_1.Principal.historial += "goto L" + etiquetaWhile + ";\n";
        principal_1.Principal.historial += "L" + lsalida + ":";
        principal_1.Principal.etiqueta = lsalida;
    }
}
exports.While = While;

},{"../abs/Instruccion":1,"../abs/nodo":2,"../principal":112,"../table/excepcion":115,"../table/tablasimbolos":117,"../table/tipo":118,"./Return":65,"./break":70,"./continue":72}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nativas = void 0;
const principal_1 = require("./principal");
class Nativas {
    constructor() { }
    print_function(arbol) {
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let label0 = "L" + etiqueta;
        etiqueta++;
        let label1 = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let print_line = "/*  Imprimir secuencia de caracteres  */\n" +
            "void printString() {\n" +
            "\t" + t1 + "= P;\n" +
            "\t" + t2 + " = stack[(int)" + t1 + "];\n" +
            "\t" + label1 + ":\n" +
            "\t" + t3 + " = heap[(int)" + t2 + "];\n" +
            "\tif(" + t3 + " == -1) goto " + label0 + ";\n" +
            "\tprintf(\"%c\", (char)" + t3 + ");\n" +
            "\t" + t2 + " = " + t2 + "+1;\n" +
            "\tgoto " + label1 + ";\n" +
            "\t" + label0 + ":\n" +
            "\treturn;\n" +
            "}\n";
        return print_line;
    }
    toUpper() {
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let l0 = "L" + etiqueta;
        etiqueta++;
        let l1 = "L" + etiqueta;
        etiqueta++;
        let l2 = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let toUpper = "void toUpper() {\n"
            + "\t" + t1 + " = H;\n" //1
            + "\t" + t2 + " = P+1;\n" //p2->3
            + "\t" + t2 + " = stack[(int)" + t2 + "];\n"
            + "\t" + l0 + ":\n"
            + "\t" + t3 + " = heap[(int)" + t2 + "];\n"
            + "\t" + "if(" + t3 + " == -1) goto " + l2 + ";\n"
            + "\t" + "if(" + t3 + " < 97) goto " + l1 + ";\n"
            + "\t" + "if(" + t3 + " > 122) goto " + l1 + ";\n"
            + "\t" + t3 + " = " + t3 + "-32;\n"
            + "\t" + l1 + ":\n"
            + "\t" + "heap[(int)H] = " + t3 + ";\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + t2 + " = " + t2 + "+1;\n"
            + "\t" + "goto " + l0 + ";\n"
            + "\t" + l2 + ":\n"
            + "\t" + "heap[(int)H] = -1;\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + "stack[(int)P] = " + t1 + ";\n"
            + "\t" + "return;\n"
            + "}";
        return toUpper;
    }
    getLength() {
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        temp++;
        let t4 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let L0 = "L" + etiqueta;
        etiqueta++;
        let L1 = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let len = "void len() {\n"
            + "\t" + t1 + " = 0;\n"
            + "\t" + t2 + " = P;\n"
            + "\t" + t3 + " = stack[(int)" + t2 + "];\n"
            + "\t" + t4 + " = heap[(int)" + t3 + "];\n"
            + "\t" + L1 + ":\n"
            + "\t" + "if(" + t4 + " == -1) goto " + L0 + ";\n"
            + "\t" + t3 + " = " + t3 + "+1;"
            + "\t" + t4 + " = heap[(int)" + t3 + "];\n"
            + "\t" + t1 + " = " + t1 + "+1;\n"
            + "\t" + "goto " + L1 + ";\n"
            + "\t" + L0 + ":\n"
            + "\t" + "stack[(int)P] =" + t1 + ";\n"
            + "\t" + "return;\n"
            + "}\n";
        return len;
    }
    toLower() {
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let l0 = "L" + etiqueta;
        etiqueta++;
        let l1 = "L" + etiqueta;
        etiqueta++;
        let l2 = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let toUpper = "void toLower() {\n"
            + "\t" + t1 + " = H;\n" //1
            + "\t" + t2 + " = P+1;\n" //p2->3
            + "\t" + t2 + " = stack[(int)" + t2 + "];\n"
            + "\t" + l0 + ":\n"
            + "\t" + t3 + " = heap[(int)" + t2 + "];\n"
            + "\t" + "if(" + t3 + " == -1) goto " + l2 + ";\n"
            + "\t" + "if(" + t3 + " < 65) goto " + l1 + ";\n"
            + "\t" + "if(" + t3 + " > 90) goto " + l1 + ";\n"
            + "\t" + t3 + " = " + t3 + "+32;\n"
            + "\t" + l1 + ":\n"
            + "\t" + "heap[(int)H] = " + t3 + ";\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + t2 + " = " + t2 + "+1;\n"
            + "\t" + "goto " + l0 + ";\n"
            + "\t" + l2 + ":\n"
            + "\t" + "heap[(int)H] = -1;\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + "stack[(int)P] = " + t1 + ";\n"
            + "\t" + "return;\n"
            + "}";
        return toUpper + "";
    }
    charAt() {
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        temp++;
        let t4 = "t" + temp;
        temp++;
        let t5 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let l0 = "L" + etiqueta;
        etiqueta++;
        let l1 = "L" + etiqueta;
        etiqueta++;
        let l2 = "L" + etiqueta;
        etiqueta++;
        let l3 = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let charAtS = "void charAt() {\n"
            + "\t" + t1 + " = H;\n"
            + "\t" + t3 + " = P;\n"
            + "\t" + t2 + " = stack[(int)" + t3 + "];\n"
            + "\t" + t3 + " = " + t3 + "-1;\n"
            + "\t" + t3 + " = stack[(int)" + t3 + "];\n"
            + "\t" + t4 + " = 0;"
            + "\t" + l0 + ":\n"
            + "\t" + t5 + " = heap[(int)" + t3 + "];\n"
            + "\t" + "if(" + t5 + " == -1) goto " + l1 + ";\n"
            + "\t" + "if(" + t4 + " == " + t2 + ") goto " + l2 + ";\n"
            + "\t" + t3 + " = " + t3 + "+1;\n"
            + "\t" + t4 + " = " + t4 + "+1;\n"
            + "\t" + "goto " + l0 + ";\n"
            + "\t" + l1 + ":\n"
            + "\t" + "heap[(int)H] = -1;\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + "goto " + l3 + ";\n"
            + "\t" + l2 + ":  \n"
            + "\t" + t5 + " = heap[(int)" + t3 + "];\n"
            + "\t" + "heap[(int)H] = " + t5 + ";\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + "heap[(int)H] = -1;\n"
            + "\t" + "H = H + 1;\n"
            + "\t" + l3 + ":\n"
            + "\t" + "stack[(int)P] = " + t5 + ";\n"
            + "\t" + "return;\n"
            + "\t" + "}\n";
        return charAtS;
    }
    potencia_string() {
        principal_1.Principal.addComentario("Iniciando con Potencia");
        let temp = principal_1.Principal.temp;
        temp++;
        let t1 = "t" + temp;
        temp++;
        let t2 = "t" + temp;
        temp++;
        let t3 = "t" + temp;
        temp++;
        let tcantidad = "t" + temp;
        temp++;
        let tref = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let label0 = "L" + etiqueta;
        etiqueta++;
        let label1 = "L" + etiqueta;
        etiqueta++;
        let label_discount = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let print_line = "/*------- POTENCIA STRING ------*/\n" +
            //Principal.addComentario("creo que debo tambien almacenar el valor de H para reasignarlo, para evitar que se llene rapido");                               
            "void potencia_string() {\n" +
            "\t" + t1 + "= P-1; //referencia a la cadena \n" + //referencia a la cadena                    //puntero disponible
            "\t" + tcantidad + "= stack[(int)(P+1)];//Numero de veces que se van a repetir\n" + //cantidad de veces que se debera repetir la cadena
            "\t" + t2 + " = stack[(int)" + t1 + "];// posicion del heap donde inicia la cadena\n" + //le asigno el primer caracteer 
            "\t" + tref + " = P+2;\n //encuentro la nueva posicion libre en la que se almacenara el resultado de la potencia\n" +
            "\tstack[(int)" + tref + "] = H;\n\n" + //guardo la referencia en donde se almacenara la cadena repetida
            "\t" + label1 + ":\n" + //etiqueta para un loop
            "\t" + t3 + " = heap[(int)" + t2 + "];\n" + //le doy el caracter actual, en la primera iteracion seria la primera letra
            "\tif(" + t3 + " == -1) goto " + label_discount + ";\n" + //le pregunto  si ya llego al limite de la palabra
            "\theap[(int)H] = " + t3 + " ;\n" +
            "\tH = H + 1;\n" +
            "\t" + t2 + " = " + t2 + "+1;\n" +
            "\tgoto " + label1 + ";\n" +
            "\t" + label_discount + ":\n" +
            "\t" + tcantidad + " = " + tcantidad + " - 1;\n" +
            "\n\tif(" + tcantidad + " == 0) goto " + label0 + ";\n" +
            "\t" + t2 + " = stack[(int)" + t1 + "];// primer caracaeter\n" +
            "\t goto " + label1 + ";\n" +
            //Principal.addComentario("Etiqueta de Salida")
            "\t" + label0 + ":\n" +
            "\theap[(int)H] = -1;\n" +
            "\tH = H+1;\n" +
            "\tP = " + tref + ";\n" +
            "\treturn;\n" +
            "}\n";
        principal_1.Principal.addComentario("Fin Potencia String");
        return print_line;
    }
    potencia_int() {
        principal_1.Principal.addComentario("Potencia Enteros");
        let temp = principal_1.Principal.temp;
        temp++;
        let tbase = "t" + temp; //valor que se multiplicara
        temp++;
        let texponente = "t" + temp; //cantidad de veces que se multiplicara
        temp++;
        let tresultado = "t" + temp; //cantidad de veces que se multiplicara
        temp++;
        let tpos = "t" + temp;
        temp++;
        let tval = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let label0 = "L" + etiqueta;
        etiqueta++;
        let label1 = "L" + etiqueta;
        etiqueta++;
        let label_salida = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        //
        //inicia proceso para realizar una potencia
        let potencia = "void potencia(){\n" +
            "\t" + tbase + " = P;\n" +
            "\t" + tpos + " = P+1;//posicion del exponente\n" +
            "\t" + tval + " = stack[(int)P];//posicion de la base\n" +
            "\t" + texponente + " = stack[(int)" + tpos + "];//valor del exponente\n" +
            "\t" + tresultado + " = 1;\n" +
            "\t" + label0 + ":\n" +
            "\t\t" + tresultado + "= " + tresultado + " * " + tval + ";\n" +
            "\t\t" + texponente + " = " + texponente + " - 1;\n" +
            "\t\t" + "if(" + texponente + "== 0) goto " + label1 + ";\n" +
            "\t\t\t" + "goto " + label0 + ";\n" +
            "\t" + label1 + ":\n" +
            "\t\t" + "P = P + 2;\n" +
            "\t\t" + "stack[(int) P] = " + tresultado + ";\n" + //salida
            "}";
        return potencia;
    }
    acceso_array() {
        principal_1.Principal.addComentario("buscando elemento");
        let temp = principal_1.Principal.temp;
        temp++;
        let t_pos_heap_element = "t" + temp; ////;posicion que se busca en el heap
        temp++;
        let t_array = "t" + temp; //posicion del array en el stack
        temp++;
        let t_contador = "t" + temp; //contador de posciones que han pasado
        temp++;
        let tref = "t" + temp; //posicion que se devuelve
        temp++;
        let taux = "t" + temp; //una variable auxiliar
        temp++;
        let temp_comparacio = "t" + temp; //temporal que guardara el resultado de la comparacion
        temp++;
        let t2 = "t" + temp;
        principal_1.Principal.temp = temp;
        let etiqueta = principal_1.Principal.etiqueta;
        etiqueta++;
        let label0 = "L" + etiqueta;
        etiqueta++;
        let label1 = "L" + etiqueta;
        etiqueta++;
        etiqueta++;
        let label2 = "L" + etiqueta;
        let literacion = "L" + etiqueta;
        etiqueta++;
        let liter = "L" + etiqueta;
        etiqueta++;
        let labelsalida = "L" + etiqueta;
        principal_1.Principal.etiqueta = etiqueta;
        let acces = "void acces(){\n" +
            "\t" + t_array + " = P;//posicion del arreglo en el stack\n" +
            "\t" + t_pos_heap_element + " = P + 1 ;//elemento que se busca\n" +
            "\t" + t_contador + "= 0;//un contador de posicones\n" +
            "\t" + t_array + "= stack[(int) " + t_array + "] ;\n" +
            "\t" + t_array + "= stack[(int) " + t_array + "] ;\n" +
            "\t" + t_pos_heap_element + "= stack[(int) " + t_pos_heap_element + "] ;\n" +
            "//iniciando con las iteraciones para buscar el elemento\n" +
            "\n\t" + label0 + ":\n" +
            "if (" + t_contador + "==" + t_pos_heap_element + ") goto " + labelsalida + ";\n" +
            label2 + ":\n" +
            t_array + " = " + t_array + " + 1 ;\n" +
            "if(heap[(int)" + t_array + "] == -1 ) goto " + label1 + ";\n" +
            "goto " + label2 + ";" +
            label1 + ":\n" +
            t_array + "=" + t_array + "+ 1;\n//finaliza con -1, entonces le sumo 1 para entrar al nuevo item" +
            t_contador + " = " + t_contador + "+ 1 ;\n//aumento el contador" +
            "goto " + label0 + ";\n" +
            labelsalida + " : \n" +
            "P = " + t_array + ";\n" +
            "return;\n" +
            //heap[(int)"+t_array+"];\n"+
            //  "\t\t"+tref  +" = heap[(int)"+t_array+"];\n//obtengo lo que esta almacenado en el heap"+
            //  "if("+tref+" == -1) goto"+label1+";\n"//label1 -> aumenta el contador
            //  "goto "+label0+";\n"+//-> 
            //  label1+":\n"+
            // "\t\t"+taux  +" = "+tref+";//almacena la posicion actual antes de continuar con la iteracion\n"+
            // "\t\t"+temp_comparacio + " = "+t_contador+"=="+t_pos_heap_element+";\n"+
            // "\n\t\t"+"if("+temp_comparacio+") goto " +labelsalida+";\n"+
            // "\t"+liter+":\n"+
            // "\t\t"+t_array  +" = "+t_array+" + 1;\n"+
            // "\t\t"+tref  +" = heap[(int)"+t_array+"];\n"+
            // //"if("+tref+" != -1 ) goto " +liter+";\n"+
            // "\n\t\t"+"if("+tref+" == -1 ) goto " +label0+";\n"+
            // "\t\t"+t_array +" = "+t_array+" + 1 ;\n"+
            // "\t\t"+"goto "+liter+";\n"+
            // "\t"+labelsalida+":\n"+
            // "\t\t"+"P = "+t_array+";\n"+
            // "\t"+"return;\n"+
            "}\n";
        return acces;
    }
}
exports.Nativas = Nativas;

},{"./principal":112}],89:[function(require,module,exports){
(function (global){(function (){
'use strict';

var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? global : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],90:[function(require,module,exports){

},{}],91:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":92,"get-intrinsic":97}],92:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":96,"get-intrinsic":97}],93:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":97}],94:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],95:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],96:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":95}],97:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":96,"has":101,"has-symbols":98}],98:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":99}],99:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],100:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":99}],101:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":96}],102:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],103:[function(require,module,exports){
'use strict';

var hasToStringTag = require('has-tostringtag/shams')();
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"call-bind/callBound":91,"has-tostringtag/shams":100}],104:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require('has-tostringtag/shams')();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};

},{"has-tostringtag/shams":100}],105:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":89,"call-bind/callBound":91,"es-abstract/helpers/getOwnPropertyDescriptor":93,"foreach":94,"has-tostringtag/shams":100}],106:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":107}],107:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],108:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],109:[function(require,module,exports){
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

'use strict';

var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});

},{"is-arguments":103,"is-generator-function":104,"is-typed-array":105,"which-typed-array":111}],110:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

}).call(this)}).call(this,require('_process'))
},{"./support/isBuffer":108,"./support/types":109,"_process":107,"inherits":102}],111:[function(require,module,exports){
(function (global){(function (){
'use strict';

var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();

var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = require('is-typed-array');

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"available-typed-arrays":89,"call-bind/callBound":91,"es-abstract/helpers/getOwnPropertyDescriptor":93,"foreach":94,"has-tostringtag/shams":100,"is-typed-array":105}],112:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Principal = void 0;
const arbol_1 = require("./table/arbol");
const tablasimbolos_1 = require("./table/tablasimbolos");
const funcion_1 = require("./instruccion/funcion");
const struct_1 = require("./expresiones/struct/struct");
const excepcion_1 = require("./table/excepcion");
const declarar_array_1 = require("./expresiones/array/declarar_array");
const declaracion_idexp_1 = require("./instruccion/declaracion_idexp");
const asignacion_struct_1 = require("./expresiones/struct/asignacion_struct");
const declaracion_id_1 = require("./instruccion/declaracion_id");
const instancia_struct_1 = require("./expresiones/struct/instancia_struct");
const asignacion_1 = require("./instruccion/asignacion");
const array_valor_1 = require("./expresiones/array/array_valor");
const break_1 = require("./instruccion/break");
const main_1 = require("./instruccion/main");
const print_1 = require("./instruccion/print");
const nativas_string_1 = require("./expresiones/nativas/nativas_string");
const Parser = require("./analizador/analizador");
const nativas_1 = require("./nativas");
const list_declaracion_1 = require("./instruccion/list_declaracion");
const nodo_1 = require("./abs/nodo");
const TSreporte_1 = require("./instruccion/TSreporte");
const TSelemento_1 = require("./instruccion/TSelemento");
class Principal {
    ejecutar(code) {
        const instrucciones = Parser.parse(code);
        const reporteE = instrucciones[1];
        const reporteGramatical = new TSreporte_1.TSreporte();
        reporteE.reporteGramatical.reverse().forEach((x) => {
            let elemento = new TSelemento_1.TSelemento(x["produccion"], x["regla"], "", Number(""), Number(""));
            reporteGramatical.listaElementos.push(elemento);
        });
        this.reporteGramatica = reporteGramatical;
        // reporteE.forEach((x)=>{
        // });
        //console.log(reporteE);
        //tabla
        let ts_global = new tablasimbolos_1.TablaSimbolos(undefined);
        //ast
        const ast = new arbol_1.Arbol(ts_global, instrucciones[0]);
        ast.excepciones.forEach((element) => { console.log(element); });
        //interpreto 1ra pasada
        ast.instrucciones.forEach((element) => {
            if (element instanceof funcion_1.Funcion) {
                ast.funciones.push(element);
            }
            if (element instanceof struct_1.Struct) {
                if (ast.structs.has(element.id))
                    return new excepcion_1.Excepcion("Semantico", "Struct duplicado " + element.id, element.fila + "", element.columna + "");
                ast.structs.set(element.id, element);
            }
            //Declaracion y asignaciones) or isinstance(instruccion, Asignacion):
            if (element instanceof asignacion_1.Asignacion ||
                element instanceof asignacion_struct_1.Asignacion_Struct ||
                element instanceof declarar_array_1.Arreglo ||
                element instanceof declaracion_idexp_1.D_IdExp ||
                element instanceof list_declaracion_1.List_Declaracion ||
                element instanceof declaracion_id_1.D_Id ||
                element instanceof list_declaracion_1.List_Declaracion ||
                element instanceof instancia_struct_1.Dec_Struct ||
                element instanceof array_valor_1.Arreglo_Valor ||
                element instanceof declarar_array_1.Arreglo ||
                element instanceof instancia_struct_1.Dec_Struct) {
                //console.log("ejecutar");
                let value = element.interpretar(ts_global, ast);
                if (value instanceof excepcion_1.Excepcion) {
                    ast.excepciones.push(value);
                    ast.updateConsolaError(value.toString());
                }
                if (value instanceof break_1.Break) {
                    let e = new excepcion_1.Excepcion("Semantico", "Break fuera de ciclo", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString());
                }
            }
        });
        //segunda pasada
        //
        let contador = 0;
        ast.instrucciones.forEach((element) => {
            if (element instanceof main_1.Main) {
                contador += 1;
                if (contador == 2) {
                    let e = new excepcion_1.Excepcion("Semantico", "Error en cantidad de Main", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString);
                    return;
                }
                let segunda_pasada = element.interpretar(ts_global, ast);
                if (segunda_pasada instanceof excepcion_1.Excepcion) {
                    ast.excepciones.push(segunda_pasada);
                    ast.updateConsolaError(segunda_pasada.toString);
                }
                if (segunda_pasada instanceof break_1.Break) {
                    let e = new excepcion_1.Excepcion("Semantico", "Break fuera de ciclo", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString());
                }
            }
        });
        ast.excepciones.forEach((x) => {
            console.log(x.toString());
        });
        //3era pasada
        ast.instrucciones.forEach((element) => {
            //if(!(element instanceof Main || ) )
            //console.log("Sentencias fuera de Main")
        });
        this.arbolG = ast;
        //this.graficarAST();
    }
    // /**************************************************Traduccion****************************************************** */
    traducir(code) {
        const instrucciones = Parser.parse(code);
        //tabla
        let ts_global = new tablasimbolos_1.TablaSimbolos(undefined);
        //ast
        const ast = new arbol_1.Arbol(ts_global, instrucciones[0]);
        // console.log(instrucciones[0]);
        // console.log(ast.instrucciones);
        //ast.instrucciones[0].interpretar(ts_global, ast);
        ast.instrucciones.forEach((element) => {
            //console.log(element);
            element.traducir(ts_global, ast);
        });
        let code_objeto = "";
        let nativa = new nativas_1.Nativas();
        let print_nativa = print_1.Print.print ? nativa.print_function(ast) : "";
        let string_upper = nativas_string_1.NativasString.UPPER ? nativa.toUpper() : "";
        let string_len = nativas_string_1.NativasString.LEN ? nativa.getLength() : "";
        let string_lower = nativas_string_1.NativasString.LOWER ? nativa.toLower() : "";
        let string_char = nativas_string_1.NativasString.LOWER ? nativa.charAt() : "";
        code_objeto =
            ast.head +
                "\n" +
                ast.list_temporales() +
                "\n" +
                string_upper +
                "\n" +
                string_lower +
                "\n" +
                string_len +
                "\n" +
                string_char +
                "\n" +
                print_nativa +
                "\n";
        console.log(code_objeto + "\n" + Principal.historial);
    }
    static addComentario(comentario) {
        Principal.historial += "/* " + comentario + " */\n";
    }
    graficarTS() {
        let codigoHTMLErrorr = " ";
        //RECORRE LA CANTIDAD DE TABLAS ALMACENADAS EN EL ARBOL
        this.arbolG.graficarts.forEach((graph) => {
            // console.log("----------INICIO TABLA----------- ");
            codigoHTMLErrorr += "<table id=\"example\" class=\"table table-striped table-bordered\" cellspacing=\"0\" width=\"100%\">\n"
                + "<thead>\n"
                + "<tr>\n"
                + "<th>ID</th>\n"
                + "<th>TIPO</th>\n"
                + "<th>VALOR</th>\n"
                + "<th>FILA</th>\n"
                + "<th>COLUMNA</th>\n"
                + "</tr>\n"
                + "</thead>\n"
                + "<tbody>\n";
            graph.listaElementos.forEach((x) => {
                //console.log("ID "+x.id+" TIPO "+x.tipo+" VALOR "+x.valor+" FILA "+x.fila +" COLUMNA "+x.columna);
                codigoHTMLErrorr += "<tr>\n";
                codigoHTMLErrorr += "<td>" + x.id + "</td>\n";
                codigoHTMLErrorr += "<td>" + x.tipo + "</td>\n";
                codigoHTMLErrorr += "<td>" + x.valor + "</td>\n";
                codigoHTMLErrorr += "<td>" + x.fila + "</td>\n";
                codigoHTMLErrorr += "<td>" + x.columna + "</td>\n";
                codigoHTMLErrorr += "</tr>\n";
            });
            codigoHTMLErrorr += "</tbody>\n" + "</table>\n";
        });
        console.log("----------INICIO TABLA----------- ");
        console.log(codigoHTMLErrorr);
        console.log("----------FIN TABLA----------- ");
        return codigoHTMLErrorr;
    }
    graficarAST() {
        console.log("-----------GENERANDO AST-----------");
        //generacion de AST
        const init = new nodo_1.NodoAST("RAIZ");
        const instr = new nodo_1.NodoAST("INSTRUCCIONES");
        this.arbolG.getInstrucciones().forEach((instruccion) => {
            instr.agregarHijoNodo(instruccion.getNodo());
        });
        init.agregarHijoNodo(instr);
        //devuelve el codigo GRAPHIZ DEL AST
        const grafo = this.arbolG.getDot(init);
        return grafo;
    }
    getErrores() {
        let codigoHTMLError = "<table id=\"example\" class=\"table table-striped table-bordered\" cellspacing=\"0\" width=\"100%\">\n"
            + "<thead>\n"
            + "<tr>\n"
            + "<th>TIPO</th>\n"
            + "<th>DESCRIPCCION</th>\n"
            + "<th>FILA</th>\n"
            + "<th>COLUMNA</th>\n"
            + "</tr>\n"
            + "</thead>\n"
            + "<tbody>\n";
        this.arbolG.excepciones.forEach((x) => {
            codigoHTMLError += "<tr>\n";
            codigoHTMLError += "<td>" + x.tipo + "</td>\n";
            codigoHTMLError += "<td>" + x.descripcion + "</td>\n";
            codigoHTMLError += "<td>" + x.fila + "</td>\n";
            codigoHTMLError += "<td>" + x.columna + "</td>\n";
            codigoHTMLError += "</tr>\n";
        });
        codigoHTMLError += "</tbody>\n"
            + "</table>\n";
        return codigoHTMLError;
    }
    getReporteGramatical() {
        let codigoHTMLError = "";
        codigoHTMLError += "<table id=\"example\" class=\"table table-striped table-bordered\" cellspacing=\"0\" width=\"100%\">\n"
            + "<thead>\n"
            + "<tr>\n"
            + "<th>PRODUCCION</th>\n"
            + "<th>VALOR</th>\n"
            + "</tr>\n"
            + "</thead>\n"
            + "<tbody>\n";
        this.reporteGramatica.listaElementos.forEach((x) => {
            codigoHTMLError += "<tr>\n";
            codigoHTMLError += "<td>" + x.id + "</td>\n";
            codigoHTMLError += "<td>" + x.tipo + "</td>\n";
            codigoHTMLError += "</tr>\n";
        });
        codigoHTMLError += "</tbody>\n" + "</table>\n";
        // console.log("----------FIN TABLA----------- ");
        return codigoHTMLError;
    }
    getConsola() {
        return this.arbolG.consola;
    }
}
exports.Principal = Principal;
Principal.contador = 0;
Principal.temp = 0; //control de temporales
Principal.etiqueta = 0; //contro de etiquetas
Principal.posicion = 0; //guarda la poscion en el stack
Principal.heap = 0; //posicion en el heap    ???
Principal.historial = "";
// let principa: Principal = new Principal();
// const fs = require("fs"),NOMBRE_ARCHIVO = "file.java";
// fs.readFile(NOMBRE_ARCHIVO, "utf8", (error, datos) => {
//   if (error) throw error;
//   let principa: Principal = new Principal();
//   //console.log(datos)
//   principa.ejecutar(datos);
//   //principa.traducir(datos);
//   //console.log("El contenido es: ", datos);
// });

},{"./abs/nodo":2,"./analizador/analizador":3,"./expresiones/array/array_valor":7,"./expresiones/array/declarar_array":9,"./expresiones/nativas/nativas_string":42,"./expresiones/struct/asignacion_struct":57,"./expresiones/struct/instancia_struct":61,"./expresiones/struct/struct":62,"./instruccion/TSelemento":66,"./instruccion/TSreporte":67,"./instruccion/asignacion":68,"./instruccion/break":70,"./instruccion/declaracion_id":73,"./instruccion/declaracion_idexp":74,"./instruccion/funcion":79,"./instruccion/list_declaracion":82,"./instruccion/main":84,"./instruccion/print":85,"./nativas":88,"./table/arbol":114,"./table/excepcion":115,"./table/tablasimbolos":117}],113:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const simbolo_1 = require("./simbolo");
class Type {
    /**
     * @param  {string} id
     * @param  {Map<String} atributos
     * @param  {} Simbolo>
     */
    constructor(id, atributos) {
        this.id = id;
        this.atributos = atributos;
        Object.assign(this, { id, atributos });
    }
    /**
     * @param  {string} id
     */
    hasAtributo(id) {
        return this.atributos.has(id);
    }
    /**
     * @param  {string} id
     * @returns Simbolo
     */
    getAtributo(id) {
        //return this.atributos.get(id);
        return this.atributos.get(id);
    }
    /**
     * @param  {Simbolo} variable
     */
    setAtributo(variable) {
        this.atributos.set(variable.id, variable);
    }
    /**
     * @returns string
     */
    toString() {
        let salida = '{';
        let i = 0;
        const size = this.atributos.size - 1;
        for (let [key, value] of this.atributos) {
            salida += `${key}: `;
            if (value instanceof simbolo_1.Simbolo) {
                salida += `${value.valor}`;
            }
            else {
                salida += `${value}`;
            }
            if (i != size) {
                salida += ', ';
            }
            i++;
        }
        salida += '}';
        return salida;
    }
    /**
     * @returns String
     */
    getSalidaBase() {
        let salida = `${this.id} = {`;
        let i = 0;
        const size = this.atributos.size - 1;
        for (let [key, value] of this.atributos) {
            salida += `${key}`;
            if (i != size) {
                salida += ', ';
            }
            i++;
        }
        salida += '}';
        return salida;
    }
}
exports.Type = Type;

},{"./simbolo":116}],114:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Arbol = void 0;
const principal_1 = require("../principal");
class Arbol {
    //no confundir la variable anterior con la que esta en tablasimbolos
    //este contador es para etiquetas y el otro es para los temporales
    /**
     * @param  {TablaSimbolos} TSglobal
     * @param  {Instruccion[]} instrucciones
     */
    constructor(TSglobal, instrucciones) {
        this.consola = "";
        this.dot = "";
        this.head = "#include <stdio.h>\n";
        this.etiqueta = ""; //para crear los saltos
        this.contador = 0; //para llevar el conteo de las etiquetas
        this.excepciones = new Array();
        this.graficarts = new Array();
        this.funciones = new Array();
        this.TSglobal = TSglobal;
        this.instrucciones = instrucciones;
        this.structs = new Map();
        this.head += "#include <math.h>\n\ndouble heap[30101999];\n";
        this.head += "double stack[30101999];\n\ndouble P;\ndouble H;\n\n";
        this.posicion = 0;
        this.graficarts = new Array();
    }
    updateConsolaError(texto) {
        this.consola += texto + '\n';
    }
    /**
     * @param  {string} nombre
     * @returns Funcion
     */
    getFunctionByName(nombre) {
        let funcion;
        this.funciones.forEach((x) => {
            if (x.id === nombre)
                funcion = x;
        });
        return funcion;
    }
    getInstrucciones() {
        return this.instrucciones;
    }
    getDot(raiz) {
        this.dot = "";
        this.dot += "digraph{ \n ";
        this.dot += "n0[label=\"" + raiz.getValor() + "\"];\n";
        this.contador = 1;
        this.recorrerAST("n0", raiz);
        this.dot += "}";
        console.log("RETORNA DOT : )");
        return this.dot;
    }
    recorrerAST(idPadre, nodoPadre) {
        nodoPadre.getHijos().forEach((hijo) => {
            const nombreHijo = "n" + this.contador;
            this.dot += nombreHijo + " [label=\"" + hijo.getValor() + "\"];\n";
            this.dot += idPadre + "->" + nombreHijo + ";\n";
            this.contador += 1;
            this.recorrerAST(nombreHijo, hijo);
        });
        // for(const hijo in nodoPadre.getHijos()){
        //     const nombreHijo="n"+this.contador;
        //     this.dot+=nombreHijo+" [label=\""+hijo.getValor()+ "\"];\n"
        //     this.dot+=idPadre+"->"+nombreHijo+ ";\n";
        //     this.contador+=1;
        //     this.recorrerAST(nombreHijo,hijo);
        // }
    }
    list_temporales() {
        //.slice(0, value.length - 2);
        let temporales = "";
        //console.log("contador",TablaSimbolos.contador);
        //console.log("Temporales ", Principal.temp);
        for (let con = 0; con <= (principal_1.Principal.temp + 1); con++) {
            temporales += " t" + con + ", ";
        }
        return (temporales.length > 0) ? "double " + temporales.slice(0, temporales.length - 2) + ";" : "";
    }
    getGraficarTS() {
        return this.graficarts;
    }
    addGraficarTS(table) {
        this.graficarts.push(table);
    }
}
exports.Arbol = Arbol;

},{"../principal":112}],115:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Excepcion = void 0;
const Instruccion_1 = require("../abs/Instruccion");
const nodo_1 = require("../abs/nodo");
class Excepcion extends Instruccion_1.Instruccion {
    /**
     * @param  {string} tipo
     * @param  {string} desc
     * @param  {string} fila
     * @param  {string} columna
     */
    constructor(tipo, desc, fila, columna) {
        super(Number(fila), Number(columna));
        this.tipo = tipo;
        this.descripcion = desc;
        this.filaa = fila;
        this.columnaa = columna;
    }
    /**
     * @returns string
     */
    toString() {
        return `${this.tipo} - ${this.descripcion} - ${this.filaa},${this.columnaa}`;
    }
    interpretar(e, arbol) {
        const err = new Excepcion(this.tipo, this.descripcion, this.filaa, this.columnaa);
        return this;
    }
    traducir(entorno, arbol) {
        return "";
    }
    getNodo() {
        return new nodo_1.NodoAST("err");
    }
}
exports.Excepcion = Excepcion;

},{"../abs/Instruccion":1,"../abs/nodo":2}],116:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Simbolo = void 0;
class Simbolo {
    /**
     * @param  {string} id
     * @param  {TIPO} tipo
     * @param  {number} fila
     * @param  {number} columna
     * @param  {any} valor
     * @param  {boolean} arreglo
     * @param  {boolean} struct
     */
    constructor(id, tipo, fila, columna, valor, arreglo, struct) {
        this.id = id;
        this.tipo = tipo;
        this.fila = fila;
        this.columna = columna;
        this.arreglo = arreglo;
        this.valor = valor; //arreglo? JSON.parse(JSON.stringify(valor)):valor;
        this.name_struct = "";
        this.struct = struct;
        this.constante = false;
        this.posicion = 0;
    }
    /**
     */
    getID() {
        return this.id;
    }
    /**
     * @param  {string} id
     */
    setID(id) {
        this.id = id;
    }
    /**
     */
    getTipo() {
        return this.tipo;
    }
    /**
     * @param  {TIPO} tipo
     */
    setTipo(tipo) {
        this.tipo = tipo;
    }
    /**
     */
    getValor() {
        return this.valor;
    }
    /**
     * @param  {any} valor
     */
    setValor(valor) {
        this.valor = valor;
    }
    /**
     */
    getArreglo() {
        return this.arreglo;
    }
    /**
     */
    getStruct() {
        return this.struct;
    }
    toString() {
        let value = this.valor;
        if (this.struct) {
            value = "";
            value = this.name_struct + "( ";
            if (this.valor instanceof Map) {
                //sim.valor.map((x)=> console.log(x));
                this.valor.forEach((x) => {
                    if (x.struct) {
                        let simbolo = Object.setPrototypeOf((x), Simbolo.prototype);
                        value += x.id + " = " + simbolo.toString() + " )";
                    }
                    else
                        value += x.id + " = " + x.valor + ", "; //x.toString()//x();
                });
                value = value.slice(0, value.length - 2);
                value += " )";
            }
            //else if(this.valor instanceof )
        }
        return value;
    }
    getTuPe() {
        let pos_stack = this.posicion;
        this.posicion++;
        return pos_stack;
    }
}
exports.Simbolo = Simbolo;

},{}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TablaSimbolos = void 0;
const excepcion_1 = require("./excepcion");
const principal_1 = require("../principal");
class TablaSimbolos {
    /**
     * @param  {TablaSimbolos|undefined} anterior
     */
    constructor(anterior) {
        this.tabla = new Map();
        this.anterior = anterior;
    }
    /**
     * @param  {Simbolo} simbolo
     */
    addSimbolo(simbolo) {
        if (simbolo.id in this.tabla) {
            return new excepcion_1.Excepcion("Semantico", "Variable " + simbolo.id + " ya existe en el entorno", simbolo.fila + "", simbolo.columna + "");
        }
        else {
            principal_1.Principal.posicion += 1; //contador  de posicion P
            simbolo.posicion = principal_1.Principal.posicion; //para el
            this.tabla.set(simbolo.id, simbolo);
        }
    }
    /**
     * @param  {string} id
     */
    getSimbolo(id) {
        let tabla_actual = this;
        while (tabla_actual != undefined) {
            if (tabla_actual.tabla.has(id)) {
                return tabla_actual.tabla.get(id);
            }
            else {
                tabla_actual = tabla_actual.anterior;
            }
        }
        return undefined;
    }
    //obtener el simbolo
    getSimboloJ(id) {
        let tabla_actual = this;
        while (tabla_actual != undefined || tabla_actual != null) {
            if (tabla_actual.tabla.has(id)) {
                let s = tabla_actual.tabla.get(id);
                s === null || s === void 0 ? void 0 : s.id;
                //retorna el simbolo
                return s;
            }
            else {
                tabla_actual = tabla_actual.anterior;
            }
        }
    }
    /**
     * @param  {Simbolo} simbolo
     */
    actualizarSimboloEnTabla(simbolo) {
        let tabla_actual = this;
        while (tabla_actual != null) {
            if (tabla_actual.tabla.has(simbolo.id)) {
                let s = tabla_actual.tabla.get(simbolo.id);
                s === null || s === void 0 ? void 0 : s.id;
                if ((s === null || s === void 0 ? void 0 : s.getTipo) == simbolo.getTipo) {
                    //tabla_actual.tabla.get(simbolo.id) = s
                    tabla_actual.tabla.delete(simbolo.id);
                    tabla_actual.tabla.set(simbolo.id, simbolo);
                    return;
                }
                return new excepcion_1.Excepcion("Semantico", "Tipo de dato Diferente en Asignacion", simbolo.fila + "", simbolo.columna + "");
            }
            else {
                tabla_actual = tabla_actual.anterior;
            }
        }
        return new excepcion_1.Excepcion("Semantico", "Variable No encontrada en Asignacion", simbolo.fila + "", simbolo.columna + "");
    }
    consultar_en_tabla_actual(id) {
        if (this.tabla.has(id)) {
            return this.tabla.get(id);
        }
        return undefined;
    }
    get_temp() {
        let vale = TablaSimbolos.contador;
        TablaSimbolos.contador++;
        return vale;
    }
}
exports.TablaSimbolos = TablaSimbolos;

},{"../principal":112,"./excepcion":115}],118:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIPO = void 0;
var TIPO;
(function (TIPO) {
    TIPO[TIPO["ENTERO"] = 0] = "ENTERO";
    TIPO[TIPO["DECIMAL"] = 1] = "DECIMAL";
    TIPO[TIPO["BOOLEAN"] = 2] = "BOOLEAN";
    TIPO[TIPO["CADENA"] = 3] = "CADENA";
    TIPO[TIPO["NULL"] = 4] = "NULL";
    TIPO[TIPO["ARREGLO"] = 5] = "ARREGLO";
    TIPO[TIPO["STRUCT"] = 6] = "STRUCT";
    TIPO[TIPO["CARACTER"] = 7] = "CARACTER";
    TIPO[TIPO["VOID"] = 8] = "VOID";
})(TIPO = exports.TIPO || (exports.TIPO = {}));

},{}],119:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Traducir = void 0;
const arbol_1 = require("./table/arbol");
const tablasimbolos_1 = require("./table/tablasimbolos");
const funcion_1 = require("./instruccion/funcion");
const struct_1 = require("./expresiones/struct/struct");
const excepcion_1 = require("./table/excepcion");
const declarar_array_1 = require("./expresiones/array/declarar_array");
const declaracion_idexp_1 = require("./instruccion/declaracion_idexp");
const asignacion_struct_1 = require("./expresiones/struct/asignacion_struct");
const declaracion_id_1 = require("./instruccion/declaracion_id");
const instancia_struct_1 = require("./expresiones/struct/instancia_struct");
const asignacion_1 = require("./instruccion/asignacion");
const array_valor_1 = require("./expresiones/array/array_valor");
const break_1 = require("./instruccion/break");
const main_1 = require("./instruccion/main");
const print_1 = require("./instruccion/print");
const nativas_string_1 = require("./expresiones/nativas/nativas_string");
const Parser = require("./analizador/analizador");
const nativas_1 = require("./nativas");
const list_declaracion_1 = require("./instruccion/list_declaracion");
const principal_1 = require("./principal");
const repeticion_cadena_1 = require("./expresiones/nativas/repeticion_cadena");
const pow_1 = require("./expresiones/nativas/pow");
const acceso_1 = require("./expresiones/array/acceso");
class Traducir {
    traducir(code) {
        const instrucciones = Parser.parse(code);
        let ts_global = new tablasimbolos_1.TablaSimbolos(undefined);
        //ast
        const ast = new arbol_1.Arbol(ts_global, instrucciones[0]);
        ast.excepciones.forEach((element) => {
            console.log("excepciones", element);
        });
        //interpreto 1ra pasada
        ast.instrucciones.forEach((element) => {
            if (element instanceof funcion_1.Funcion) {
                let posicion = principal_1.Principal.posicion;
                posicion++;
                element.posicion = posicion;
                ast.funciones.push(element);
                element.traducir(ts_global, ast);
                principal_1.Principal.posicion = posicion;
            }
            if (element instanceof struct_1.Struct) {
                if (ast.structs.has(element.id))
                    return new excepcion_1.Excepcion("Semantico", "Struct duplicado " + element.id, element.fila + "", element.columna + "");
                ast.structs.set(element.id, element);
            }
            //Declaracion y asignaciones) or isinstance(instruccion, Asignacion):
            if (element instanceof asignacion_1.Asignacion ||
                element instanceof asignacion_struct_1.Asignacion_Struct ||
                element instanceof declarar_array_1.Arreglo ||
                element instanceof declaracion_idexp_1.D_IdExp ||
                element instanceof list_declaracion_1.List_Declaracion ||
                element instanceof declaracion_id_1.D_Id ||
                element instanceof list_declaracion_1.List_Declaracion ||
                element instanceof instancia_struct_1.Dec_Struct ||
                element instanceof array_valor_1.Arreglo_Valor ||
                element instanceof declarar_array_1.Arreglo ||
                element instanceof instancia_struct_1.Dec_Struct) {
                //console.log("ejecutar");
                let value = element.traducir(ts_global, ast);
                if (value instanceof excepcion_1.Excepcion) {
                    ast.excepciones.push(value);
                    ast.updateConsolaError(value.toString());
                }
                if (value instanceof break_1.Break) {
                    let e = new excepcion_1.Excepcion("Semantico", "Break fuera de ciclo", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString());
                }
            }
        });
        //segunda pasada
        //
        let contador = 0;
        ast.instrucciones.forEach((element) => {
            if (element instanceof main_1.Main) {
                contador += 1;
                if (contador == 2) {
                    let e = new excepcion_1.Excepcion("Semantico", "Error en cantidad de Main", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString);
                    return;
                }
                let segunda_pasada = element.traducir(ts_global, ast);
                if (segunda_pasada instanceof excepcion_1.Excepcion) {
                    ast.excepciones.push(segunda_pasada);
                    ast.updateConsolaError(segunda_pasada.toString);
                }
                if (segunda_pasada instanceof break_1.Break) {
                    let e = new excepcion_1.Excepcion("Semantico", "Break fuera de ciclo", element.fila + "", element.columna + "");
                    ast.excepciones.push(e);
                    ast.updateConsolaError(e.toString());
                }
            }
        });
        //3era pasada
        ast.instrucciones.forEach((element) => {
            //if(!(element instanceof Main || ) )
            //console.log("Sentencias fuera de Main")
        });
        let code_objeto = "";
        let nativa = new nativas_1.Nativas();
        let print_nativa = print_1.Print.print ? nativa.print_function(ast) : "";
        let string_upper = nativas_string_1.NativasString.UPPER ? nativa.toUpper() : "";
        let string_len = nativas_string_1.NativasString.LEN ? nativa.getLength() : "";
        let string_lower = nativas_string_1.NativasString.LOWER ? nativa.toLower() : "";
        let string_char = nativas_string_1.NativasString.LOWER ? nativa.charAt() : "";
        let potencia_str = repeticion_cadena_1.RepeticionCadena.REPETICION ? nativa.potencia_string() : "";
        let potencia_int = pow_1.Pow.Pow ? nativa.potencia_int() + "\n" : "";
        let acceso = acceso_1.Acceso.ACCCESO ? nativa.acceso_array() + "\n" : "";
        code_objeto = ast.head +
            "\n" +
            ast.list_temporales() +
            "\n" +
            string_upper +
            "\n" +
            string_lower +
            "\n" +
            string_len +
            "\n" +
            string_char +
            "\n" +
            potencia_str +
            "\n" +
            potencia_int +
            "\n" +
            acceso +
            "\n" +
            print_nativa +
            "\n";
        console.log(code_objeto + "\n" + principal_1.Principal.historial);
        let codeshare = code_objeto + "\n" + principal_1.Principal.historial + "";
        return codeshare;
    }
    // /**************************************************Traduccion****************************************************** */
    static addComentario(comentario) {
        principal_1.Principal.historial += "/* " + comentario + " */\n";
    }
}
exports.Traducir = Traducir;
Traducir.funciones = "";
//let principa: Principal = new Principal();
// const fs = require("fs"),
//   NOMBRE_ARCHIVO = "file.java";
// fs.readFile(NOMBRE_ARCHIVO, "utf8", (error, datos) => {
//   if (error) throw error;
//   let traducir: Traducir = new Traducir();
//   // console.log(datos)
//   traducir.traducir(datos);
//   //principa.ejecutar(datos);
//   //console.log("El contenido es: ", datos);
// });

},{"./analizador/analizador":3,"./expresiones/array/acceso":6,"./expresiones/array/array_valor":7,"./expresiones/array/declarar_array":9,"./expresiones/nativas/nativas_string":42,"./expresiones/nativas/pow":43,"./expresiones/nativas/repeticion_cadena":44,"./expresiones/struct/asignacion_struct":57,"./expresiones/struct/instancia_struct":61,"./expresiones/struct/struct":62,"./instruccion/asignacion":68,"./instruccion/break":70,"./instruccion/declaracion_id":73,"./instruccion/declaracion_idexp":74,"./instruccion/funcion":79,"./instruccion/list_declaracion":82,"./instruccion/main":84,"./instruccion/print":85,"./nativas":88,"./principal":112,"./table/arbol":114,"./table/excepcion":115,"./table/tablasimbolos":117}]},{},[64]);
